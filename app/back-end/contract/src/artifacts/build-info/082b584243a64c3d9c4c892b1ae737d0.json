{
	"id": "082b584243a64c3d9c4c892b1ae737d0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"app/back-end/contract/src/erc20-usdt.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\r\n\r\nimport \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\n\r\n\r\ncontract wUSDT is ERC20,ERC20Permit{\r\n    address Market;\r\n    address admin;   \r\n    constructor() ERC20(\"Win-Win USDT\", \"wUSDT\")ERC20Permit(\"wUSDT\") {\r\n        _mint(msg.sender, 1 * 10 ** 8 * 10 ** decimals());\r\n       admin = msg.sender;\r\n    }\r\n\r\n    function setMarket(address _Market) external {\r\n        require(msg.sender==admin, \"Only admin can call this function\");\r\n        Market = _Market;\r\n    }\r\n\r\n    modifier onlyMarket {\r\n        require(msg.sender==Market, \"Only market can call this function\");\r\n        _;\r\n    }\r\n\r\n    function Aware(address buyer,address seller,uint256 amount) external onlyMarket returns(uint256){\r\n        _mint(buyer,amount);\r\n        _mint(seller,amount);\r\n        return amount;\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\r\nimport {ERC20} from \"../ERC20.sol\";\r\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\r\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\r\nimport {Nonces} from \"../../../utils/Nonces.sol\";\r\n\r\n/**\r\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\r\n    bytes32 private constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /**\r\n     * @dev Permit deadline has expired.\r\n     */\r\n    error ERC2612ExpiredSignature(uint256 deadline);\r\n\r\n    /**\r\n     * @dev Mismatched signature.\r\n     */\r\n    error ERC2612InvalidSigner(address signer, address owner);\r\n\r\n    /**\r\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\r\n     *\r\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\r\n     */\r\n    constructor(string memory name) EIP712(name, \"1\") {}\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        if (block.timestamp > deadline) {\r\n            revert ERC2612ExpiredSignature(deadline);\r\n        }\r\n\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\r\n\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n\r\n        address signer = ECDSA.recover(hash, v, r, s);\r\n        if (signer != owner) {\r\n            revert ERC2612InvalidSigner(signer, owner);\r\n        }\r\n\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\r\n        return super.nonces(owner);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC20Permit\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20} from \"./IERC20.sol\";\r\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\r\nimport {Context} from \"../../utils/Context.sol\";\r\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\r\n */\r\nabstract contract Nonces {\r\n    /**\r\n     * @dev The nonce used for an `account` is not the expected current nonce.\r\n     */\r\n    error InvalidAccountNonce(address account, uint256 currentNonce);\r\n\r\n    mapping(address account => uint256) private _nonces;\r\n\r\n    /**\r\n     * @dev Returns the next unused nonce for an address.\r\n     */\r\n    function nonces(address owner) public view virtual returns (uint256) {\r\n        return _nonces[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Consumes a nonce.\r\n     *\r\n     * Returns the current value and increments nonce.\r\n     */\r\n    function _useNonce(address owner) internal virtual returns (uint256) {\r\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\r\n        // decremented or reset. This guarantees that the nonce never overflows.\r\n        unchecked {\r\n            // It is important to do x++ and not ++x here.\r\n            return _nonces[owner]++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\r\n     */\r\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\r\n        uint256 current = _useNonce(owner);\r\n        if (nonce != current) {\r\n            revert InvalidAccountNonce(owner, current);\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\r\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\r\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\r\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\r\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\r\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\r\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\r\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\r\n *\r\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n */\r\nabstract contract EIP712 is IERC5267 {\r\n    using ShortStrings for *;\r\n\r\n    bytes32 private constant TYPE_HASH =\r\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _cachedDomainSeparator;\r\n    uint256 private immutable _cachedChainId;\r\n    address private immutable _cachedThis;\r\n\r\n    bytes32 private immutable _hashedName;\r\n    bytes32 private immutable _hashedVersion;\r\n\r\n    ShortString private immutable _name;\r\n    ShortString private immutable _version;\r\n    string private _nameFallback;\r\n    string private _versionFallback;\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        _name = name.toShortStringWithFallback(_nameFallback);\r\n        _version = version.toShortStringWithFallback(_versionFallback);\r\n        _hashedName = keccak256(bytes(name));\r\n        _hashedVersion = keccak256(bytes(version));\r\n\r\n        _cachedChainId = block.chainid;\r\n        _cachedDomainSeparator = _buildDomainSeparator();\r\n        _cachedThis = address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\r\n            return _cachedDomainSeparator;\r\n        } else {\r\n            return _buildDomainSeparator();\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator() private view returns (bytes32) {\r\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC-5267}.\r\n     */\r\n    function eip712Domain()\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        )\r\n    {\r\n        return (\r\n            hex\"0f\", // 01111\r\n            _EIP712Name(),\r\n            _EIP712Version(),\r\n            block.chainid,\r\n            address(this),\r\n            bytes32(0),\r\n            new uint256[](0)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev The name parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: By default this function reads _name which is an immutable value.\r\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _EIP712Name() internal view returns (string memory) {\r\n        return _name.toStringWithFallback(_nameFallback);\r\n    }\r\n\r\n    /**\r\n     * @dev The version parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: By default this function reads _version which is an immutable value.\r\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _EIP712Version() internal view returns (string memory) {\r\n        return _version.toStringWithFallback(_versionFallback);\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS\r\n    }\r\n\r\n    /**\r\n     * @dev The signature derives the `address(0)`.\r\n     */\r\n    error ECDSAInvalidSignature();\r\n\r\n    /**\r\n     * @dev The signature has an invalid length.\r\n     */\r\n    error ECDSAInvalidSignatureLength(uint256 length);\r\n\r\n    /**\r\n     * @dev The signature has an S value that is in the upper half order.\r\n     */\r\n    error ECDSAInvalidSignatureS(bytes32 s);\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\r\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\r\n     * and a bytes32 providing additional information about the error.\r\n     *\r\n     * If no error is returned, then the address can be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     */\r\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\r\n        unchecked {\r\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\r\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n            return tryRecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError, bytes32) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS, s);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\r\n        }\r\n\r\n        return (signer, RecoverError.NoError, bytes32(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\r\n        _throwError(error, errorArg);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\r\n     */\r\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert ECDSAInvalidSignature();\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert ECDSAInvalidSignatureS(errorArg);\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC20} from \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC5267 {\r\n    /**\r\n     * @dev MAY be emitted to signal that the domain could have changed.\r\n     */\r\n    event EIP712DomainChanged();\r\n\r\n    /**\r\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\r\n     * signature.\r\n     */\r\n    function eip712Domain()\r\n        external\r\n        view\r\n        returns (\r\n            bytes1 fields,\r\n            string memory name,\r\n            string memory version,\r\n            uint256 chainId,\r\n            address verifyingContract,\r\n            bytes32 salt,\r\n            uint256[] memory extensions\r\n        );\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {StorageSlot} from \"./StorageSlot.sol\";\r\n\r\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\r\n// | length  | 0x                                                              BB |\r\ntype ShortString is bytes32;\r\n\r\n/**\r\n * @dev This library provides functions to convert short memory strings\r\n * into a `ShortString` type that can be used as an immutable variable.\r\n *\r\n * Strings of arbitrary length can be optimized using this library if\r\n * they are short enough (up to 31 bytes) by packing them with their\r\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\r\n * fallback mechanism can be used for every other case.\r\n *\r\n * Usage example:\r\n *\r\n * ```solidity\r\n * contract Named {\r\n *     using ShortStrings for *;\r\n *\r\n *     ShortString private immutable _name;\r\n *     string private _nameFallback;\r\n *\r\n *     constructor(string memory contractName) {\r\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\r\n *     }\r\n *\r\n *     function name() external view returns (string memory) {\r\n *         return _name.toStringWithFallback(_nameFallback);\r\n *     }\r\n * }\r\n * ```\r\n */\r\nlibrary ShortStrings {\r\n    // Used as an identifier for strings longer than 31 bytes.\r\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\r\n\r\n    error StringTooLong(string str);\r\n    error InvalidShortString();\r\n\r\n    /**\r\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\r\n     *\r\n     * This will trigger a `StringTooLong` error is the input string is too long.\r\n     */\r\n    function toShortString(string memory str) internal pure returns (ShortString) {\r\n        bytes memory bstr = bytes(str);\r\n        if (bstr.length > 31) {\r\n            revert StringTooLong(str);\r\n        }\r\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\r\n    }\r\n\r\n    /**\r\n     * @dev Decode a `ShortString` back to a \"normal\" string.\r\n     */\r\n    function toString(ShortString sstr) internal pure returns (string memory) {\r\n        uint256 len = byteLength(sstr);\r\n        // using `new string(len)` would work locally but is not memory safe.\r\n        string memory str = new string(32);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(str, len)\r\n            mstore(add(str, 0x20), sstr)\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the length of a `ShortString`.\r\n     */\r\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\r\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\r\n        if (result > 31) {\r\n            revert InvalidShortString();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\r\n     */\r\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\r\n        if (bytes(value).length < 32) {\r\n            return toShortString(value);\r\n        } else {\r\n            StorageSlot.getStringSlot(store).value = value;\r\n            return ShortString.wrap(FALLBACK_SENTINEL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\r\n     */\r\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\r\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\r\n            return toString(value);\r\n        } else {\r\n            return store;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\r\n     * {setWithFallback}.\r\n     *\r\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\r\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\r\n     */\r\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\r\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\r\n            return byteLength(value);\r\n        } else {\r\n            return bytes(store).length;\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Strings} from \"../Strings.sol\";\r\n\r\n/**\r\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\r\n *\r\n * The library provides methods for generating a hash of a message that conforms to the\r\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\r\n * specifications.\r\n */\r\nlibrary MessageHashUtils {\r\n    /**\r\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\r\n     * `0x45` (`personal_sign` messages).\r\n     *\r\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\r\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\r\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\r\n     *\r\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\r\n     * keccak256, although any bytes32 value can be safely used because the final digest will\r\n     * be re-hashed.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\r\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\r\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\r\n     * `0x45` (`personal_sign` messages).\r\n     *\r\n     * The digest is calculated by prefixing an arbitrary `message` with\r\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\r\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\r\n     * `0x00` (data with intended validator).\r\n     *\r\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\r\n     * `validator` address. Then hashing the result.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\r\n     *\r\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\r\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {ECDSA-recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, hex\"19_01\")\r\n            mstore(add(ptr, 0x02), domainSeparator)\r\n            mstore(add(ptr, 0x22), structHash)\r\n            digest := keccak256(ptr, 0x42)\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Math} from \"./math/Math.sol\";\r\nimport {SignedMath} from \"./math/SignedMath.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(newImplementation.code.length > 0);\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n"
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n"
			}
		}
	},
	"output": {
		"contracts": {
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x28b2a1f629338ad9bfe7bdab27a478f3d04001bbde67aefb48f473e01589a05a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b13fe921b3a4db8194370374451c3243045d4852e6e27c00fe161acc3eff59ee\",\"dweb:/ipfs/QmfNmkXJsDj9x2et6BTibrbonVGhcP8bRDkRTiXuqhevvR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x198433113545cc855ffb34ec844854dd59e1b8420a97a876ce67eae3b3929c50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d26179570c319b970030e366c034a27921c6de0e78bbe32ea34a1b30c08d24af\",\"dweb:/ipfs/QmTKRYXntXit6U2gwMhwKojhwpfhXkzWSLS1cy6DVEi6F9\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x1c15854d415493331ff06ef9b0899f81dc6960189fa86cfd1b29c4374cc336a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb41bc9b9e1f5617d8e826c07fb21ecf986f70b4b5b395d6ecf9c5eb9f1a204\",\"dweb:/ipfs/QmNvJhvpJE8b3nyz7RaMCSPhfbmzj1TLuL3a7NkS9AHkGJ\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8edf51e08ea403df2542380d8fba4a3fc63aa07c571ee75cf55e18d1e353645b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5878fafb7c542c7b0d3f9d34447177b54a7ffa5a388a23c4da78116655b7fba6\",\"dweb:/ipfs/Qmb8VVEhtoUAEGsDRKmo9ER23eQfAEynDxvEDTeVWfG1Wm\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83fa9b15077fd2f33f6c175d694e2f7ae9c9a289c7feaca40aa7d6feb8d87c26\",\"dweb:/ipfs/QmQLfKCJ7mjiEeCGN1sHgWT8wjAMbAmBqcBVoQQyUZa5ws\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 184,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 190,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 192,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 194,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 196,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x1c15854d415493331ff06ef9b0899f81dc6960189fa86cfd1b29c4374cc336a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb41bc9b9e1f5617d8e826c07fb21ecf986f70b4b5b395d6ecf9c5eb9f1a204\",\"dweb:/ipfs/QmNvJhvpJE8b3nyz7RaMCSPhfbmzj1TLuL3a7NkS9AHkGJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x28b2a1f629338ad9bfe7bdab27a478f3d04001bbde67aefb48f473e01589a05a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b13fe921b3a4db8194370374451c3243045d4852e6e27c00fe161acc3eff59ee\",\"dweb:/ipfs/QmfNmkXJsDj9x2et6BTibrbonVGhcP8bRDkRTiXuqhevvR\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x198433113545cc855ffb34ec844854dd59e1b8420a97a876ce67eae3b3929c50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d26179570c319b970030e366c034a27921c6de0e78bbe32ea34a1b30c08d24af\",\"dweb:/ipfs/QmTKRYXntXit6U2gwMhwKojhwpfhXkzWSLS1cy6DVEi6F9\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x1c15854d415493331ff06ef9b0899f81dc6960189fa86cfd1b29c4374cc336a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb41bc9b9e1f5617d8e826c07fb21ecf986f70b4b5b395d6ecf9c5eb9f1a204\",\"dweb:/ipfs/QmNvJhvpJE8b3nyz7RaMCSPhfbmzj1TLuL3a7NkS9AHkGJ\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x3b4a7848523d3c3bf86fbb898f8f0a7f785bfe52c3400af1a08b99fc4c725da3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d075fc42b2a76046ec3f473fa1be4e40e002fc71b5591a849058ce9ba1578d4\",\"dweb:/ipfs/QmV1yZTLoRhyUjupvfUyVqi7N9fhKiRNTGwnfvNQ2vq1dk\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8edf51e08ea403df2542380d8fba4a3fc63aa07c571ee75cf55e18d1e353645b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5878fafb7c542c7b0d3f9d34447177b54a7ffa5a388a23c4da78116655b7fba6\",\"dweb:/ipfs/Qmb8VVEhtoUAEGsDRKmo9ER23eQfAEynDxvEDTeVWfG1Wm\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x36560926db8fa096a799a54143e48ff23002e115d4a8380e31def8f8aab0efd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c289d6f0ededdbf5cf5f885adf2d41b76d6fe602946273cab10830f64906af9f\",\"dweb:/ipfs/Qmd81LQLGNmfs3rxwGLHUSJ2d3w5Z4aooxtRkCe7XDDEc8\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83fa9b15077fd2f33f6c175d694e2f7ae9c9a289c7feaca40aa7d6feb8d87c26\",\"dweb:/ipfs/QmQLfKCJ7mjiEeCGN1sHgWT8wjAMbAmBqcBVoQQyUZa5ws\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0xb2ac469a92e3980b87267eacabd4e470df6cf278858efa230f69c723316c138d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ce61d28f35bf80f21d884b285b4061c938e400a0d90d7a8176e2cacf29b5eaf\",\"dweb:/ipfs/Qmar9FHYkwMVvQYtDoeJFETryVwBPTPs1dxhvKG1AMah1c\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xee8d332ccb6fde868e14d766aeff6e1c139b23942e456867f8541740d53608ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108e2f859cce1ce6f28615199cf951e87022c78fd161a55da353e51615930564\",\"dweb:/ipfs/QmWvGG7mue3WNYrham6cNRhBNY3bEzdFutMEkLBEDNougg\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8c7891489c7dc56f84a8b8d9b5507b893bf45de931be6a501be22dfade66aff\",\"dweb:/ipfs/QmYwu2yuP3GrcvT9eM1gd8M65RpUsRaRoyLsWcVLDbeQcG\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2d8207531ade88bd3e1c0dc264c1c8c1a46a62d3f79d6b0ddad7743d886f2eef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf6c34e642d31633434efc3381aeab02876928da15386459d9158e070ed5b27a\",\"dweb:/ipfs/QmQp6H9WZ93V5byxvYQbcFjRtiHTj8RbqadMWmivMLx5B8\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x969cdd93cf4321ba534d61127d7127da83bb807be4b3b84f029b0aa1e41b5851\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57b66f3ca0fc32ad41d02463de1566f2c4fe007a03ea50d3ebbfe3c58d76eff3\",\"dweb:/ipfs/QmTRCri2AtWnhm1Dj4uzuE7Jr1utpP82oRuwq3sxRRtfaW\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x481eac0573c56cb92c225e3d7c3a8509db8ce6f907a2af44fdfef486740bb3eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d341e11ae851c1356a3c1570fac620c19c6b4e1269f7eaee9a1f1583c1c83891\",\"dweb:/ipfs/QmaRVN9TFLpVvVJfjwiLx9fttDhr5C83NoJmyXgriKXS4T\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 184,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 190,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 192,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 194,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 196,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2035,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2037,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1014,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x1c15854d415493331ff06ef9b0899f81dc6960189fa86cfd1b29c4374cc336a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb41bc9b9e1f5617d8e826c07fb21ecf986f70b4b5b395d6ecf9c5eb9f1a204\",\"dweb:/ipfs/QmNvJhvpJE8b3nyz7RaMCSPhfbmzj1TLuL3a7NkS9AHkGJ\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8edf51e08ea403df2542380d8fba4a3fc63aa07c571ee75cf55e18d1e353645b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5878fafb7c542c7b0d3f9d34447177b54a7ffa5a388a23c4da78116655b7fba6\",\"dweb:/ipfs/Qmb8VVEhtoUAEGsDRKmo9ER23eQfAEynDxvEDTeVWfG1Wm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x36560926db8fa096a799a54143e48ff23002e115d4a8380e31def8f8aab0efd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c289d6f0ededdbf5cf5f885adf2d41b76d6fe602946273cab10830f64906af9f\",\"dweb:/ipfs/Qmd81LQLGNmfs3rxwGLHUSJ2d3w5Z4aooxtRkCe7XDDEc8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83fa9b15077fd2f33f6c175d694e2f7ae9c9a289c7feaca40aa7d6feb8d87c26\",\"dweb:/ipfs/QmQLfKCJ7mjiEeCGN1sHgWT8wjAMbAmBqcBVoQQyUZa5ws\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0xb2ac469a92e3980b87267eacabd4e470df6cf278858efa230f69c723316c138d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ce61d28f35bf80f21d884b285b4061c938e400a0d90d7a8176e2cacf29b5eaf\",\"dweb:/ipfs/Qmar9FHYkwMVvQYtDoeJFETryVwBPTPs1dxhvKG1AMah1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1014,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1294:4430  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1294:4430  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122060befdf176856a9ddbd8420145ade0ecf1ea519752417134720c396c4ac501eb64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122060befdf176856a9ddbd8420145ade0ecf1ea519752417134720c396c4ac501eb64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0xBE REVERT CALL PUSH23 0x856A9DDBD8420145ADE0ECF1EA519752417134720C396C 0x4A 0xC5 ADD 0xEB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "1294:3136:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1294:3136:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122060befdf176856a9ddbd8420145ade0ecf1ea519752417134720c396c4ac501eb64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0xBE REVERT CALL PUSH23 0x856A9DDBD8420145ADE0ECF1EA519752417134720C396C 0x4A 0xC5 ADD 0xEB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "1294:3136:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1294,
									"end": 4430,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122060befdf176856a9ddbd8420145ade0ecf1ea519752417134720c396c4ac501eb64736f6c63430008160033",
									".code": [
										{
											"begin": 1294,
											"end": 4430,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1294,
											"end": 4430,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xee8d332ccb6fde868e14d766aeff6e1c139b23942e456867f8541740d53608ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108e2f859cce1ce6f28615199cf951e87022c78fd161a55da353e51615930564\",\"dweb:/ipfs/QmWvGG7mue3WNYrham6cNRhBNY3bEzdFutMEkLBEDNougg\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8c7891489c7dc56f84a8b8d9b5507b893bf45de931be6a501be22dfade66aff\",\"dweb:/ipfs/QmYwu2yuP3GrcvT9eM1gd8M65RpUsRaRoyLsWcVLDbeQcG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":1275:4064  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":1275:4064  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205f2bb11a6688d7a6bbb34cef4534dc0483df7ab33ca3e2a33bb2cc24cda35a4b64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205f2bb11a6688d7a6bbb34cef4534dc0483df7ab33ca3e2a33bb2cc24cda35a4b64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH0 0x2B 0xB1 BYTE PUSH7 0x88D7A6BBB34CEF GASLIMIT CALLVALUE 0xDC DIV DUP4 0xDF PUSH27 0xB33CA3E2A33BB2CC24CDA35A4B64736F6C63430008160033000000 ",
							"sourceMap": "1275:2789:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1275:2789:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205f2bb11a6688d7a6bbb34cef4534dc0483df7ab33ca3e2a33bb2cc24cda35a4b64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH0 0x2B 0xB1 BYTE PUSH7 0x88D7A6BBB34CEF GASLIMIT CALLVALUE 0xDC DIV DUP4 0xDF PUSH27 0xB33CA3E2A33BB2CC24CDA35A4B64736F6C63430008160033000000 ",
							"sourceMap": "1275:2789:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1275,
									"end": 4064,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f2bb11a6688d7a6bbb34cef4534dc0483df7ab33ca3e2a33bb2cc24cda35a4b64736f6c63430008160033",
									".code": [
										{
											"begin": 1275,
											"end": 4064,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1275,
											"end": 4064,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8c7891489c7dc56f84a8b8d9b5507b893bf45de931be6a501be22dfade66aff\",\"dweb:/ipfs/QmYwu2yuP3GrcvT9eM1gd8M65RpUsRaRoyLsWcVLDbeQcG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":262:3191  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":262:3191  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208412c79ccb0a3121efb5a88fba3ce0e0a64935c83cdd495e7d435588258763a564736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208412c79ccb0a3121efb5a88fba3ce0e0a64935c83cdd495e7d435588258763a564736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 SLT 0xC7 SWAP13 0xCB EXP BALANCE 0x21 0xEF 0xB5 0xA8 DUP16 0xBA EXTCODECOPY 0xE0 0xE0 0xA6 0x49 CALLDATALOAD 0xC8 EXTCODECOPY 0xDD 0x49 0x5E PUSH30 0x435588258763A564736F6C63430008160033000000000000000000000000 ",
							"sourceMap": "262:2929:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;262:2929:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208412c79ccb0a3121efb5a88fba3ce0e0a64935c83cdd495e7d435588258763a564736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 SLT 0xC7 SWAP13 0xCB EXP BALANCE 0x21 0xEF 0xB5 0xA8 DUP16 0xBA EXTCODECOPY 0xE0 0xE0 0xA6 0x49 CALLDATALOAD 0xC8 EXTCODECOPY 0xDD 0x49 0x5E PUSH30 0x435588258763A564736F6C63430008160033000000000000000000000000 ",
							"sourceMap": "262:2929:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208412c79ccb0a3121efb5a88fba3ce0e0a64935c83cdd495e7d435588258763a564736f6c63430008160033",
									".code": [
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":355:7903  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":355:7903  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206d449be4933bdc43bc979e3cd547cce3291395c5710c1c77d769c85c5c04ae2d64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206d449be4933bdc43bc979e3cd547cce3291395c5710c1c77d769c85c5c04ae2d64736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x449BE4933BDC43BC979E3CD547CC 0xE3 0x29 SGT SWAP6 0xC5 PUSH18 0xC1C77D769C85C5C04AE2D64736F6C634300 ADDMOD AND STOP CALLER ",
							"sourceMap": "355:7548:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;355:7548:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206d449be4933bdc43bc979e3cd547cce3291395c5710c1c77d769c85c5c04ae2d64736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x449BE4933BDC43BC979E3CD547CC 0xE3 0x29 SGT SWAP6 0xC5 PUSH18 0xC1C77D769C85C5C04AE2D64736F6C634300 ADDMOD AND STOP CALLER ",
							"sourceMap": "355:7548:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 355,
									"end": 7903,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206d449be4933bdc43bc979e3cd547cce3291395c5710c1c77d769c85c5c04ae2d64736f6c63430008160033",
									".code": [
										{
											"begin": 355,
											"end": 7903,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 355,
											"end": 7903,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2d8207531ade88bd3e1c0dc264c1c8c1a46a62d3f79d6b0ddad7743d886f2eef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf6c34e642d31633434efc3381aeab02876928da15386459d9158e070ed5b27a\",\"dweb:/ipfs/QmQp6H9WZ93V5byxvYQbcFjRtiHTj8RbqadMWmivMLx5B8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x28b2a1f629338ad9bfe7bdab27a478f3d04001bbde67aefb48f473e01589a05a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b13fe921b3a4db8194370374451c3243045d4852e6e27c00fe161acc3eff59ee\",\"dweb:/ipfs/QmfNmkXJsDj9x2et6BTibrbonVGhcP8bRDkRTiXuqhevvR\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xee8d332ccb6fde868e14d766aeff6e1c139b23942e456867f8541740d53608ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108e2f859cce1ce6f28615199cf951e87022c78fd161a55da353e51615930564\",\"dweb:/ipfs/QmWvGG7mue3WNYrham6cNRhBNY3bEzdFutMEkLBEDNougg\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8c7891489c7dc56f84a8b8d9b5507b893bf45de931be6a501be22dfade66aff\",\"dweb:/ipfs/QmYwu2yuP3GrcvT9eM1gd8M65RpUsRaRoyLsWcVLDbeQcG\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x969cdd93cf4321ba534d61127d7127da83bb807be4b3b84f029b0aa1e41b5851\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57b66f3ca0fc32ad41d02463de1566f2c4fe007a03ea50d3ebbfe3c58d76eff3\",\"dweb:/ipfs/QmTRCri2AtWnhm1Dj4uzuE7Jr1utpP82oRuwq3sxRRtfaW\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x481eac0573c56cb92c225e3d7c3a8509db8ce6f907a2af44fdfef486740bb3eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d341e11ae851c1356a3c1570fac620c19c6b4e1269f7eaee9a1f1583c1c83891\",\"dweb:/ipfs/QmaRVN9TFLpVvVJfjwiLx9fttDhr5C83NoJmyXgriKXS4T\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2035,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2037,
								"contract": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":535:3841  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":535:3841  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200e94efa5c38b8a7796f2c3996e546c787b1740c4b9e78d7258aff8c8e7589b4164736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200e94efa5c38b8a7796f2c3996e546c787b1740c4b9e78d7258aff8c8e7589b4164736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE SWAP5 0xEF 0xA5 0xC3 DUP12 DUP11 PUSH24 0x96F2C3996E546C787B1740C4B9E78D7258AFF8C8E7589B41 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "535:3306:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;535:3306:14;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200e94efa5c38b8a7796f2c3996e546c787b1740c4b9e78d7258aff8c8e7589b4164736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE SWAP5 0xEF 0xA5 0xC3 DUP12 DUP11 PUSH24 0x96F2C3996E546C787B1740C4B9E78D7258AFF8C8E7589B41 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "535:3306:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 535,
									"end": 3841,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200e94efa5c38b8a7796f2c3996e546c787b1740c4b9e78d7258aff8c8e7589b4164736f6c63430008160033",
									".code": [
										{
											"begin": 535,
											"end": 3841,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 535,
											"end": 3841,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x481eac0573c56cb92c225e3d7c3a8509db8ce6f907a2af44fdfef486740bb3eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d341e11ae851c1356a3c1570fac620c19c6b4e1269f7eaee9a1f1583c1c83891\",\"dweb:/ipfs/QmaRVN9TFLpVvVJfjwiLx9fttDhr5C83NoJmyXgriKXS4T\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":211:15531  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":211:15531  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e6d126be189b22795be4afee7f1ad880e689f847469333088311eedd9eadf7c464736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e6d126be189b22795be4afee7f1ad880e689f847469333088311eedd9eadf7c464736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xD1 0x26 0xBE XOR SWAP12 0x22 PUSH26 0x5BE4AFEE7F1AD880E689F847469333088311EEDD9EADF7C46473 PUSH16 0x6C634300081600330000000000000000 ",
							"sourceMap": "211:15320:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;211:15320:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e6d126be189b22795be4afee7f1ad880e689f847469333088311eedd9eadf7c464736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0xD1 0x26 0xBE XOR SWAP12 0x22 PUSH26 0x5BE4AFEE7F1AD880E689F847469333088311EEDD9EADF7C46473 PUSH16 0x6C634300081600330000000000000000 ",
							"sourceMap": "211:15320:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e6d126be189b22795be4afee7f1ad880e689f847469333088311eedd9eadf7c464736f6c63430008160033",
									".code": [
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":224:1305  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":224:1305  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207a713a28fd3e60e4213b1a5e4ce61ed8255eb2f61f7340161c871ce04acf252264736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207a713a28fd3e60e4213b1a5e4ce61ed8255eb2f61f7340161c871ce04acf252264736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0x713A28FD3E60E4213B1A5E4CE61ED8255EB2F61F7340161C871CE0 0x4A 0xCF 0x25 0x22 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "224:1081:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;224:1081:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207a713a28fd3e60e4213b1a5e4ce61ed8255eb2f61f7340161c871ce04acf252264736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0x713A28FD3E60E4213B1A5E4CE61ED8255EB2F61F7340161C871CE0 0x4A 0xCF 0x25 0x22 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "224:1081:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207a713a28fd3e60e4213b1a5e4ce61ed8255eb2f61f7340161c871ce04acf252264736f6c63430008160033",
									".code": [
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"app/back-end/contract/src/erc20-usdt.sol": {
				"wUSDT": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Aware",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_Market",
									"type": "address"
								}
							],
							"name": "setMarket",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"app/back-end/contract/src/erc20-usdt.sol\":268:1001  contract wUSDT is ERC20,ERC20Permit{... */\n  mstore(0x40, 0x0160)\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":354:515  constructor() ERC20(\"Win-Win USDT\", \"wUSDT\")ERC20Permit(\"wUSDT\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1612:1664  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xda, 0x1dd554d115)\n  dup2\n  mstore\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1651:1655  name */\n  dup1\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3393:3833  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":1945:2061  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0c\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xa2, 0x15da5b8b55da5b881554d115)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xda, 0x1dd554d115)\n  dup2\n  mstore\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2020:2025  name_ */\n  dup2\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2012:2017  _name */\n  0x03\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2012:2025  _name = name_ */\n  swap1\n  dup2\n  tag_7\n  swap2\n  swap1\n  tag_8\n  jump\t// in\ntag_7:\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2036:2043  _symbol */\n  0x04\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2036:2053  _symbol = symbol_ */\n  tag_9\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2046:2053  symbol_ */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2036:2043  _symbol */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2036:2053  _symbol = symbol_ */\n  tag_8\n  jump\t// in\ntag_9:\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3512  name.toShortStringWithFallback(_nameFallback) */\n  tag_11\n  swap2\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3471  name */\n  dup4\n  swap1\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3498:3511  _nameFallback */\n  0x05\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3497  name.toShortStringWithFallback */\n  tag_12\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3512  name.toShortStringWithFallback(_nameFallback) */\n  jump\t// in\ntag_11:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3459:3512  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3534:3585  version.toShortStringWithFallback(_versionFallback) */\n  tag_13\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3534:3541  version */\n  dup2\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3568:3584  _versionFallback */\n  0x06\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3534:3567  version.toShortStringWithFallback */\n  tag_12\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3534:3585  version.toShortStringWithFallback(_versionFallback) */\n  jump\t// in\ntag_13:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3523:3585  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3610:3632  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3596:3632  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3660:3685  keccak256(bytes(version)) */\n  dup2\n  mload\n  swap1\n  dup3\n  add\n  keccak256\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3643:3685  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3715:3728  block.chainid */\n  chainid\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3698:3728  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3764:3787  _buildDomainSeparator() */\n  tag_14\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4314:4325  _hashedName */\n  mload(0xe0)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4327:4341  _hashedVersion */\n  mload(0x0100)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2116:2211  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x20\n  dup3\n  add\n    /* \"#utility.yul\":4642:4667   */\n  mstore\n    /* \"#utility.yul\":4683:4701   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":4676:4710   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":4726:4744   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":4719:4753   */\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4343:4356  block.chainid */\n  chainid\n    /* \"#utility.yul\":4769:4787   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":4762:4796   */\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4366:4370  this */\n  address\n    /* \"#utility.yul\":4812:4831   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":4805:4866   */\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4255:4262  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":4614:4633   */\n  0xc0\n  add\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4282:4373  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4275:4373  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4200:4381  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3764:3787  _buildDomainSeparator() */\ntag_14:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3739:3787  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3820:3824  this */\n  address\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3798:3825  _cachedThis = address(this) */\n  0xc0\n  mstore\n  pop\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":430:479  _mint(msg.sender, 1 * 10 ** 8 * 10 ** decimals()) */\n  tag_18\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":436:446  msg.sender */\n  caller\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":462:478  10 ** decimals() */\n  tag_21\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3158:3160  18 */\n  0x12\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":462:464  10 */\n  0x0a\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":462:478  10 ** decimals() */\n  tag_22\n  jump\t// in\ntag_21:\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":448:478  1 * 10 ** 8 * 10 ** decimals() */\n  tag_23\n  swap1\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":448:459  1 * 10 ** 8 */\n  0x05f5e100\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":448:478  1 * 10 ** 8 * 10 ** decimals() */\n  tag_24\n  jump\t// in\ntag_23:\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":430:435  _mint */\n  tag_25\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":430:479  _mint(msg.sender, 1 * 10 ** 8 * 10 ** decimals()) */\n  jump\t// in\ntag_18:\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":489:494  admin */\n  0x09\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":489:507  admin = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":497:507  msg.sender */\n  caller\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":489:507  admin = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":268:1001  contract wUSDT is ERC20,ERC20Permit{... */\n  jump(tag_72)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3002:3349  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_12:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3098:3109  ShortString */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3148:3150  32 */\n  0x20\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3132:3137  value */\n  dup4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3126:3145  bytes(value).length */\n  mload\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3126:3150  bytes(value).length < 32 */\n  lt\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3122:3342  if (bytes(value).length < 32) {... */\n  iszero\n  tag_28\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3174:3194  toShortString(value) */\n  tag_29\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3188:3193  value */\n  dup4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3174:3187  toShortString */\n  tag_30\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3174:3194  toShortString(value) */\n  jump\t// in\ntag_29:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3167:3194  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_31)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3122:3342  if (bytes(value).length < 32) {... */\ntag_28:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3253:3258  store */\n  dup2\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3227:3273  StorageSlot.getStringSlot(store).value = value */\n  tag_34\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3268:3273  value */\n  dup5\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3253:3258  store */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3227:3273  StorageSlot.getStringSlot(store).value = value */\n  tag_8\n  jump\t// in\ntag_34:\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1431:1497  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3122:3342  if (bytes(value).length < 32) {... */\ntag_31:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3002:3349  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7946:8159  function _mint(address account, uint256 value) internal {... */\ntag_25:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8017:8038  account == address(0) */\n  dup3\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8013:8106  if (account == address(0)) {... */\n  tag_40\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8091:8092  0 */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":5023:5074   */\n  mstore\n    /* \"#utility.yul\":4996:5014   */\n  0x24\n  add\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\ntag_41:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8013:8106  if (account == address(0)) {... */\ntag_40:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8151  _update(address(0), account, value) */\n  tag_43\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8132:8133  0 */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8136:8143  account */\n  dup4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8145:8150  value */\n  dup4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8123  _update */\n  tag_44\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8151  _update(address(0), account, value) */\n  jump\t// in\ntag_43:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7946:8159  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1759:2051  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_30:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1824:1835  ShortString */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1848:1865  bytes memory bstr */\n  dup1\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1874:1877  str */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1848:1878  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1907:1909  31 */\n  0x1f\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1893:1897  bstr */\n  dup2\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1893:1904  bstr.length */\n  mload\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1893:1909  bstr.length > 31 */\n  gt\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1889:1963  if (bstr.length > 31) {... */\n  iszero\n  tag_46\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1947:1950  str */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1933:1951  StringTooLong(str) */\n  mload(0x40)\n  shl(0xe0, 0x305a27a9)\n  dup2\n  mstore\n  0x04\n  add\n  tag_41\n  swap2\n  swap1\n  tag_48\n  jump\t// in\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1889:1963  if (bstr.length > 31) {... */\ntag_46:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2030:2041  bstr.length */\n  dup1\n  mload\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2013:2026  bytes32(bstr) */\n  tag_49\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2030:2034  bstr */\n  dup3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2013:2026  bytes32(bstr) */\n  tag_50\n  jump\t// in\ntag_49:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2005:2041  uint256(bytes32(bstr)) | bstr.length */\n  or\n  swap4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1759:2051  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6458:7593  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_44:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6548:6566  from == address(0) */\n  dup4\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\n  tag_53\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6702:6707  value */\n  dup1\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6686:6698  _totalSupply */\n  0x02\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6686:6707  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_54\n  swap2\n  swap1\n  tag_55\n  jump\t// in\ntag_54:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\n  tag_56\n  swap1\n  pop\n  jump\ntag_53:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6762:6777  _balances[from] */\n  dup4\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6740:6759  uint256 fromBalance */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6762:6777  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6796:6815  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6792:6909  if (fromBalance < value) {... */\n  iszero\n  tag_57\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":6290:6322   */\n  dup6\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":6272:6323   */\n  mstore\n    /* \"#utility.yul\":6339:6357   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":6332:6366   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":6382:6400   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":6375:6409   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":6245:6263   */\n  0x64\n  add\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_41\n    /* \"#utility.yul\":6070:6415   */\n  jump\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6792:6909  if (fromBalance < value) {... */\ntag_57:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7047  _balances[from] */\n  dup5\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7041  _balances */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7047  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7050:7069  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7069  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\ntag_56:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7112:7128  to == address(0) */\n  dup3\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\n  tag_60\n  jumpi\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7278:7290  _totalSupply */\n  0x02\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7278:7299  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\n  jump(tag_61)\ntag_60:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7507  _balances[to] */\n  dup3\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7503  _balances */\n  0x00\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7507  _balances[to] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7516  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\ntag_61:\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7575:7577  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n  and\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7569:7573  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7579:7584  value */\n  dup4\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n  mload(0x40)\n  tag_62\n  swap2\n    /* \"#utility.yul\":6566:6591   */\n  dup2\n  mstore\n    /* \"#utility.yul\":6554:6556   */\n  0x20\n    /* \"#utility.yul\":6539:6557   */\n  add\n  swap1\n    /* \"#utility.yul\":6420:6597   */\n  jump\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\ntag_62:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6458:7593  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_64:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:526   */\ntag_65:\n    /* \"#utility.yul\":225:226   */\n  0x01\n    /* \"#utility.yul\":221:233   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":268:280   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":289:350   */\n  tag_75\n  jumpi\n    /* \"#utility.yul\":343:347   */\n  0x7f\n    /* \"#utility.yul\":335:341   */\n  dup3\n    /* \"#utility.yul\":331:348   */\n  and\n    /* \"#utility.yul\":321:348   */\n  swap2\n  pop\n    /* \"#utility.yul\":289:350   */\ntag_75:\n    /* \"#utility.yul\":396:398   */\n  0x20\n    /* \"#utility.yul\":388:394   */\n  dup3\n    /* \"#utility.yul\":385:399   */\n  lt\n    /* \"#utility.yul\":365:383   */\n  dup2\n    /* \"#utility.yul\":362:400   */\n  sub\n    /* \"#utility.yul\":359:520   */\n  tag_76\n  jumpi\n    /* \"#utility.yul\":442:452   */\n  0x4e487b71\n    /* \"#utility.yul\":437:440   */\n  0xe0\n    /* \"#utility.yul\":433:453   */\n  shl\n    /* \"#utility.yul\":430:431   */\n  0x00\n    /* \"#utility.yul\":423:454   */\n  mstore\n    /* \"#utility.yul\":477:481   */\n  0x22\n    /* \"#utility.yul\":474:475   */\n  0x04\n    /* \"#utility.yul\":467:482   */\n  mstore\n    /* \"#utility.yul\":505:509   */\n  0x24\n    /* \"#utility.yul\":502:503   */\n  0x00\n    /* \"#utility.yul\":495:510   */\n  revert\n    /* \"#utility.yul\":359:520   */\ntag_76:\n  pop\n    /* \"#utility.yul\":146:526   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":657:1175   */\ntag_67:\n    /* \"#utility.yul\":759:761   */\n  0x1f\n    /* \"#utility.yul\":754:757   */\n  dup3\n    /* \"#utility.yul\":751:762   */\n  gt\n    /* \"#utility.yul\":748:1169   */\n  iszero\n  tag_79\n  jumpi\n    /* \"#utility.yul\":795:800   */\n  dup1\n    /* \"#utility.yul\":792:793   */\n  0x00\n    /* \"#utility.yul\":785:801   */\n  mstore\n    /* \"#utility.yul\":839:843   */\n  0x20\n    /* \"#utility.yul\":836:837   */\n  0x00\n    /* \"#utility.yul\":826:844   */\n  keccak256\n    /* \"#utility.yul\":909:911   */\n  0x1f\n    /* \"#utility.yul\":897:907   */\n  dup5\n    /* \"#utility.yul\":893:912   */\n  add\n    /* \"#utility.yul\":890:891   */\n  0x05\n    /* \"#utility.yul\":886:913   */\n  shr\n    /* \"#utility.yul\":880:884   */\n  dup2\n    /* \"#utility.yul\":876:914   */\n  add\n    /* \"#utility.yul\":945:949   */\n  0x20\n    /* \"#utility.yul\":933:943   */\n  dup6\n    /* \"#utility.yul\":930:950   */\n  lt\n    /* \"#utility.yul\":927:974   */\n  iszero\n  tag_80\n  jumpi\n  pop\n    /* \"#utility.yul\":968:972   */\n  dup1\n    /* \"#utility.yul\":927:974   */\ntag_80:\n    /* \"#utility.yul\":1023:1025   */\n  0x1f\n    /* \"#utility.yul\":1018:1021   */\n  dup5\n    /* \"#utility.yul\":1014:1026   */\n  add\n    /* \"#utility.yul\":1011:1012   */\n  0x05\n    /* \"#utility.yul\":1007:1027   */\n  shr\n    /* \"#utility.yul\":1001:1005   */\n  dup3\n    /* \"#utility.yul\":997:1028   */\n  add\n    /* \"#utility.yul\":987:1028   */\n  swap2\n  pop\n    /* \"#utility.yul\":1078:1159   */\ntag_81:\n    /* \"#utility.yul\":1096:1098   */\n  dup2\n    /* \"#utility.yul\":1089:1094   */\n  dup2\n    /* \"#utility.yul\":1086:1099   */\n  lt\n    /* \"#utility.yul\":1078:1159   */\n  iszero\n  tag_83\n  jumpi\n    /* \"#utility.yul\":1155:1156   */\n  0x00\n    /* \"#utility.yul\":1141:1157   */\n  dup2\n  sstore\n    /* \"#utility.yul\":1122:1123   */\n  0x01\n    /* \"#utility.yul\":1111:1124   */\n  add\n    /* \"#utility.yul\":1078:1159   */\n  jump(tag_81)\ntag_83:\n    /* \"#utility.yul\":1082:1085   */\n  pop\n  pop\n    /* \"#utility.yul\":748:1169   */\ntag_79:\n    /* \"#utility.yul\":657:1175   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1351:2696   */\ntag_8:\n    /* \"#utility.yul\":1471:1481   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1493:1523   */\n  dup2\n  gt\n    /* \"#utility.yul\":1490:1546   */\n  iszero\n  tag_87\n  jumpi\n    /* \"#utility.yul\":1526:1544   */\n  tag_87\n  tag_64\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":1555:1652   */\n  tag_88\n    /* \"#utility.yul\":1645:1651   */\n  dup2\n    /* \"#utility.yul\":1605:1643   */\n  tag_89\n    /* \"#utility.yul\":1637:1641   */\n  dup5\n    /* \"#utility.yul\":1631:1642   */\n  sload\n    /* \"#utility.yul\":1605:1643   */\n  tag_65\n  jump\t// in\ntag_89:\n    /* \"#utility.yul\":1599:1603   */\n  dup5\n    /* \"#utility.yul\":1555:1652   */\n  tag_67\n  jump\t// in\ntag_88:\n    /* \"#utility.yul\":1707:1711   */\n  0x20\n  dup1\n    /* \"#utility.yul\":1764:1766   */\n  0x1f\n    /* \"#utility.yul\":1753:1767   */\n  dup4\n  gt\n    /* \"#utility.yul\":1781:1782   */\n  0x01\n    /* \"#utility.yul\":1776:2439   */\n  dup2\n  eq\n  tag_91\n  jumpi\n    /* \"#utility.yul\":2483:2484   */\n  0x00\n    /* \"#utility.yul\":2500:2506   */\n  dup5\n    /* \"#utility.yul\":2497:2586   */\n  iszero\n  tag_92\n  jumpi\n  pop\n    /* \"#utility.yul\":2552:2571   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":2546:2572   */\n  mload\n    /* \"#utility.yul\":2497:2586   */\ntag_92:\n  not(0x00)\n    /* \"#utility.yul\":1308:1309   */\n  0x03\n    /* \"#utility.yul\":1304:1315   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":1300:1324   */\n  shr\n    /* \"#utility.yul\":1296:1325   */\n  not\n    /* \"#utility.yul\":1286:1326   */\n  and\n    /* \"#utility.yul\":1332:1333   */\n  0x01\n    /* \"#utility.yul\":1328:1339   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1283:1340   */\n  or\n    /* \"#utility.yul\":2599:2680   */\n  dup6\n  sstore\n    /* \"#utility.yul\":1746:2690   */\n  jump(tag_90)\n    /* \"#utility.yul\":1776:2439   */\ntag_91:\n    /* \"#utility.yul\":604:605   */\n  0x00\n    /* \"#utility.yul\":597:611   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":641:645   */\n  0x20\n    /* \"#utility.yul\":628:646   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":1812:1832   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":1930:2166   */\ntag_95:\n    /* \"#utility.yul\":1944:1951   */\n  dup3\n    /* \"#utility.yul\":1941:1942   */\n  dup2\n    /* \"#utility.yul\":1938:1952   */\n  lt\n    /* \"#utility.yul\":1930:2166   */\n  iszero\n  tag_97\n  jumpi\n    /* \"#utility.yul\":2033:2052   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":2027:2053   */\n  mload\n    /* \"#utility.yul\":2012:2054   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2125:2152   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":2093:2094   */\n  0x01\n    /* \"#utility.yul\":2081:2095   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":1960:1979   */\n  dup5\n  add\n    /* \"#utility.yul\":1930:2166   */\n  jump(tag_95)\ntag_97:\n    /* \"#utility.yul\":1934:1937   */\n  pop\n    /* \"#utility.yul\":2194:2200   */\n  dup6\n    /* \"#utility.yul\":2185:2192   */\n  dup3\n    /* \"#utility.yul\":2182:2201   */\n  lt\n    /* \"#utility.yul\":2179:2380   */\n  iszero\n  tag_98\n  jumpi\n    /* \"#utility.yul\":2255:2274   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":2249:2275   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2338:2339   */\n  0x03\n    /* \"#utility.yul\":2334:2348   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":2350:2353   */\n  0xf8\n    /* \"#utility.yul\":2330:2354   */\n  and\n    /* \"#utility.yul\":2326:2363   */\n  shr\n    /* \"#utility.yul\":2322:2364   */\n  not\n    /* \"#utility.yul\":2307:2365   */\n  and\n    /* \"#utility.yul\":2292:2366   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2179:2380   */\ntag_98:\n  pop\n  pop\n    /* \"#utility.yul\":2426:2427   */\n  0x01\n    /* \"#utility.yul\":2417:2423   */\n  dup5\n    /* \"#utility.yul\":2414:2415   */\n  0x01\n    /* \"#utility.yul\":2410:2424   */\n  shl\n    /* \"#utility.yul\":2406:2428   */\n  add\n    /* \"#utility.yul\":2400:2404   */\n  dup6\n    /* \"#utility.yul\":2393:2429   */\n  sstore\n    /* \"#utility.yul\":1746:2690   */\ntag_90:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":1351:2696   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2701:2828   */\ntag_69:\n    /* \"#utility.yul\":2762:2772   */\n  0x4e487b71\n    /* \"#utility.yul\":2757:2760   */\n  0xe0\n    /* \"#utility.yul\":2753:2773   */\n  shl\n    /* \"#utility.yul\":2750:2751   */\n  0x00\n    /* \"#utility.yul\":2743:2774   */\n  mstore\n    /* \"#utility.yul\":2793:2797   */\n  0x11\n    /* \"#utility.yul\":2790:2791   */\n  0x04\n    /* \"#utility.yul\":2783:2798   */\n  mstore\n    /* \"#utility.yul\":2817:2821   */\n  0x24\n    /* \"#utility.yul\":2814:2815   */\n  0x00\n    /* \"#utility.yul\":2807:2822   */\n  revert\n    /* \"#utility.yul\":2833:3249   */\ntag_70:\n    /* \"#utility.yul\":2922:2923   */\n  0x01\n    /* \"#utility.yul\":2959:2964   */\n  dup2\n    /* \"#utility.yul\":2922:2923   */\n  dup2\n    /* \"#utility.yul\":2973:3243   */\ntag_101:\n    /* \"#utility.yul\":2994:3001   */\n  dup1\n    /* \"#utility.yul\":2984:2992   */\n  dup6\n    /* \"#utility.yul\":2981:3002   */\n  gt\n    /* \"#utility.yul\":2973:3243   */\n  iszero\n  tag_103\n  jumpi\n    /* \"#utility.yul\":3053:3057   */\n  dup2\n    /* \"#utility.yul\":3049:3050   */\n  0x00\n    /* \"#utility.yul\":3045:3051   */\n  not\n    /* \"#utility.yul\":3041:3058   */\n  div\n    /* \"#utility.yul\":3035:3039   */\n  dup3\n    /* \"#utility.yul\":3032:3059   */\n  gt\n    /* \"#utility.yul\":3029:3082   */\n  iszero\n  tag_105\n  jumpi\n    /* \"#utility.yul\":3062:3080   */\n  tag_105\n  tag_69\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":3112:3119   */\n  dup1\n    /* \"#utility.yul\":3102:3110   */\n  dup6\n    /* \"#utility.yul\":3098:3120   */\n  and\n    /* \"#utility.yul\":3095:3150   */\n  iszero\n  tag_106\n  jumpi\n    /* \"#utility.yul\":3132:3148   */\n  swap2\n  dup2\n  mul\n  swap2\n    /* \"#utility.yul\":3095:3150   */\ntag_106:\n    /* \"#utility.yul\":3211:3233   */\n  swap4\n  dup5\n  shr\n  swap4\n    /* \"#utility.yul\":3171:3186   */\n  swap1\n  dup1\n  mul\n  swap1\n    /* \"#utility.yul\":2973:3243   */\n  jump(tag_101)\ntag_103:\n    /* \"#utility.yul\":2977:2980   */\n  pop\n    /* \"#utility.yul\":2833:3249   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3254:4060   */\ntag_71:\n    /* \"#utility.yul\":3303:3308   */\n  0x00\n    /* \"#utility.yul\":3333:3341   */\n  dup3\n    /* \"#utility.yul\":3323:3403   */\n  tag_108\n  jumpi\n  pop\n    /* \"#utility.yul\":3374:3375   */\n  0x01\n    /* \"#utility.yul\":3388:3393   */\n  jump(tag_31)\n    /* \"#utility.yul\":3323:3403   */\ntag_108:\n    /* \"#utility.yul\":3422:3426   */\n  dup2\n    /* \"#utility.yul\":3412:3488   */\n  tag_109\n  jumpi\n  pop\n    /* \"#utility.yul\":3459:3460   */\n  0x00\n    /* \"#utility.yul\":3473:3478   */\n  jump(tag_31)\n    /* \"#utility.yul\":3412:3488   */\ntag_109:\n    /* \"#utility.yul\":3504:3508   */\n  dup2\n    /* \"#utility.yul\":3522:3523   */\n  0x01\n    /* \"#utility.yul\":3517:3576   */\n  dup2\n  eq\n  tag_111\n  jumpi\n    /* \"#utility.yul\":3590:3591   */\n  0x02\n    /* \"#utility.yul\":3585:3715   */\n  dup2\n  eq\n  tag_112\n  jumpi\n    /* \"#utility.yul\":3497:3715   */\n  jump(tag_110)\n    /* \"#utility.yul\":3517:3576   */\ntag_111:\n    /* \"#utility.yul\":3547:3548   */\n  0x01\n    /* \"#utility.yul\":3538:3548   */\n  swap2\n  pop\n    /* \"#utility.yul\":3561:3566   */\n  pop\n  jump(tag_31)\n    /* \"#utility.yul\":3585:3715   */\ntag_112:\n    /* \"#utility.yul\":3622:3625   */\n  0xff\n    /* \"#utility.yul\":3612:3620   */\n  dup5\n    /* \"#utility.yul\":3609:3626   */\n  gt\n    /* \"#utility.yul\":3606:3649   */\n  iszero\n  tag_114\n  jumpi\n    /* \"#utility.yul\":3629:3647   */\n  tag_114\n  tag_69\n  jump\t// in\ntag_114:\n  pop\n  pop\n    /* \"#utility.yul\":3685:3686   */\n  0x01\n    /* \"#utility.yul\":3671:3687   */\n  dup3\n  shl\n    /* \"#utility.yul\":3700:3705   */\n  jump(tag_31)\n    /* \"#utility.yul\":3497:3715   */\ntag_110:\n  pop\n    /* \"#utility.yul\":3799:3801   */\n  0x20\n    /* \"#utility.yul\":3789:3797   */\n  dup4\n    /* \"#utility.yul\":3786:3802   */\n  lt\n    /* \"#utility.yul\":3780:3783   */\n  0x0133\n    /* \"#utility.yul\":3774:3778   */\n  dup4\n    /* \"#utility.yul\":3771:3784   */\n  lt\n    /* \"#utility.yul\":3767:3803   */\n  and\n    /* \"#utility.yul\":3761:3763   */\n  0x4e\n    /* \"#utility.yul\":3751:3759   */\n  dup5\n    /* \"#utility.yul\":3748:3764   */\n  lt\n    /* \"#utility.yul\":3743:3745   */\n  0x0b\n    /* \"#utility.yul\":3737:3741   */\n  dup5\n    /* \"#utility.yul\":3734:3746   */\n  lt\n    /* \"#utility.yul\":3730:3765   */\n  and\n    /* \"#utility.yul\":3727:3804   */\n  or\n    /* \"#utility.yul\":3724:3883   */\n  iszero\n  tag_115\n  jumpi\n  pop\n    /* \"#utility.yul\":3836:3855   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":3868:3873   */\n  jump(tag_31)\n    /* \"#utility.yul\":3724:3883   */\ntag_115:\n    /* \"#utility.yul\":3915:3949   */\n  tag_116\n    /* \"#utility.yul\":3940:3948   */\n  dup4\n    /* \"#utility.yul\":3934:3938   */\n  dup4\n    /* \"#utility.yul\":3915:3949   */\n  tag_70\n  jump\t// in\ntag_116:\n    /* \"#utility.yul\":3985:3991   */\n  dup1\n    /* \"#utility.yul\":3981:3982   */\n  0x00\n    /* \"#utility.yul\":3977:3983   */\n  not\n    /* \"#utility.yul\":3973:3992   */\n  div\n    /* \"#utility.yul\":3964:3971   */\n  dup3\n    /* \"#utility.yul\":3961:3993   */\n  gt\n    /* \"#utility.yul\":3958:4016   */\n  iszero\n  tag_118\n  jumpi\n    /* \"#utility.yul\":3996:4014   */\n  tag_118\n  tag_69\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":4034:4054   */\n  mul\n  swap4\n    /* \"#utility.yul\":3254:4060   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4065:4205   */\ntag_22:\n    /* \"#utility.yul\":4123:4128   */\n  0x00\n    /* \"#utility.yul\":4152:4199   */\n  tag_120\n    /* \"#utility.yul\":4193:4197   */\n  0xff\n    /* \"#utility.yul\":4183:4191   */\n  dup5\n    /* \"#utility.yul\":4179:4198   */\n  and\n    /* \"#utility.yul\":4173:4177   */\n  dup4\n    /* \"#utility.yul\":4152:4199   */\n  tag_71\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":4143:4199   */\n  swap4\n    /* \"#utility.yul\":4065:4205   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4210:4378   */\ntag_24:\n    /* \"#utility.yul\":4283:4292   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":4314:4323   */\n  dup2\n  iszero\n    /* \"#utility.yul\":4331:4346   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":4325:4347   */\n  dup5\n  eq\n    /* \"#utility.yul\":4311:4348   */\n  or\n    /* \"#utility.yul\":4301:4372   */\n  tag_31\n  jumpi\n    /* \"#utility.yul\":4352:4370   */\n  tag_31\n  tag_69\n  jump\t// in\n    /* \"#utility.yul\":5085:5633   */\ntag_48:\n    /* \"#utility.yul\":5197:5201   */\n  0x00\n    /* \"#utility.yul\":5226:5228   */\n  0x20\n    /* \"#utility.yul\":5255:5257   */\n  dup1\n    /* \"#utility.yul\":5244:5253   */\n  dup4\n    /* \"#utility.yul\":5237:5258   */\n  mstore\n    /* \"#utility.yul\":5287:5293   */\n  dup4\n    /* \"#utility.yul\":5281:5294   */\n  mload\n    /* \"#utility.yul\":5330:5336   */\n  dup1\n    /* \"#utility.yul\":5325:5327   */\n  0x20\n    /* \"#utility.yul\":5314:5323   */\n  dup6\n    /* \"#utility.yul\":5310:5328   */\n  add\n    /* \"#utility.yul\":5303:5337   */\n  mstore\n    /* \"#utility.yul\":5355:5356   */\n  0x00\n    /* \"#utility.yul\":5365:5505   */\ntag_127:\n    /* \"#utility.yul\":5379:5385   */\n  dup2\n    /* \"#utility.yul\":5376:5377   */\n  dup2\n    /* \"#utility.yul\":5373:5386   */\n  lt\n    /* \"#utility.yul\":5365:5505   */\n  iszero\n  tag_129\n  jumpi\n    /* \"#utility.yul\":5474:5488   */\n  dup6\n  dup2\n  add\n    /* \"#utility.yul\":5470:5493   */\n  dup4\n  add\n    /* \"#utility.yul\":5464:5494   */\n  mload\n    /* \"#utility.yul\":5440:5457   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":5459:5461   */\n  0x40\n    /* \"#utility.yul\":5436:5462   */\n  add\n    /* \"#utility.yul\":5429:5495   */\n  mstore\n    /* \"#utility.yul\":5394:5404   */\n  dup3\n  add\n    /* \"#utility.yul\":5365:5505   */\n  jump(tag_127)\ntag_129:\n    /* \"#utility.yul\":5369:5372   */\n  pop\n    /* \"#utility.yul\":5554:5555   */\n  0x00\n    /* \"#utility.yul\":5549:5551   */\n  0x40\n    /* \"#utility.yul\":5540:5546   */\n  dup3\n    /* \"#utility.yul\":5529:5538   */\n  dup7\n    /* \"#utility.yul\":5525:5547   */\n  add\n    /* \"#utility.yul\":5521:5552   */\n  add\n    /* \"#utility.yul\":5514:5556   */\n  mstore\n    /* \"#utility.yul\":5624:5626   */\n  0x40\n    /* \"#utility.yul\":5617:5619   */\n  0x1f\n    /* \"#utility.yul\":5613:5620   */\n  not\n    /* \"#utility.yul\":5608:5610   */\n  0x1f\n    /* \"#utility.yul\":5600:5606   */\n  dup4\n    /* \"#utility.yul\":5596:5611   */\n  add\n    /* \"#utility.yul\":5592:5621   */\n  and\n    /* \"#utility.yul\":5581:5590   */\n  dup6\n    /* \"#utility.yul\":5577:5622   */\n  add\n    /* \"#utility.yul\":5573:5627   */\n  add\n    /* \"#utility.yul\":5565:5627   */\n  swap3\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5085:5633   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5638:5935   */\ntag_50:\n    /* \"#utility.yul\":5756:5768   */\n  dup1\n  mload\n    /* \"#utility.yul\":5803:5807   */\n  0x20\n    /* \"#utility.yul\":5792:5808   */\n  dup1\n  dup4\n  add\n    /* \"#utility.yul\":5786:5809   */\n  mload\n  swap2\n    /* \"#utility.yul\":5756:5768   */\n  swap1\n    /* \"#utility.yul\":5821:5837   */\n  dup2\n  lt\n    /* \"#utility.yul\":5818:5929   */\n  iszero\n  tag_76\n  jumpi\n  not(0x00)\n    /* \"#utility.yul\":5895:5899   */\n  0x20\n    /* \"#utility.yul\":5891:5908   */\n  swap2\n  swap1\n  swap2\n  sub\n    /* \"#utility.yul\":5888:5889   */\n  0x03\n    /* \"#utility.yul\":5884:5909   */\n  shl\n    /* \"#utility.yul\":5880:5918   */\n  shl\n    /* \"#utility.yul\":5869:5919   */\n  and\n  swap2\n    /* \"#utility.yul\":5638:5935   */\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5940:6065   */\ntag_55:\n    /* \"#utility.yul\":6005:6014   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":6026:6036   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":6023:6059   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":6039:6057   */\n  tag_31\n  tag_69\n  jump\t// in\n    /* \"#utility.yul\":6420:6597   */\ntag_72:\n    /* \"app/back-end/contract/src/erc20-usdt.sol\":268:1001  contract wUSDT is ERC20,ERC20Permit{... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xe156ff544111f0d61300ce79ff347b01537432ccb5ab72ff35b2177c2ed3fa4b\")\n  0x00\n  assignImmutable(\"0x57650568a02a7887f4f4e1ae3b5071ca25e4fb181c1b7adfd0d312e8c663feb3\")\n  0x00\n  assignImmutable(\"0xf22c5b16043446a68d62f47815793cbbc874be5b2e65e9e313507336d6583f6d\")\n  0x00\n  assignImmutable(\"0x7046b97b103039cb97ea5110f1f4832d5d00e701e21d67c9f93f60c215815d45\")\n  0x00\n  assignImmutable(\"0x45583c716935567ea164771749ab630fc2584e89eead72531f29ea474918321a\")\n  0x00\n  assignImmutable(\"0x2eb9a99718a5ddb41634aa3a127c1821b30a0e7db3d87b6203b71d7595223311\")\n  0x00\n  assignImmutable(\"0xb775854bb325b699ccfc2a72dec93b06810d465e2ba7b7ffc485571437231d1a\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":268:1001  contract wUSDT is ERC20,ERC20Permit{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa9059cbb\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb7881eb0\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x23b872dd\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x6dcea85f\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2131:2222  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4424:4614  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_25\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1269:1283   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1262:1284   */\n      iszero\n        /* \"#utility.yul\":1244:1285   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1232:1234   */\n      0x20\n        /* \"#utility.yul\":1217:1235   */\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4424:4614  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_23\n        /* \"#utility.yul\":1104:1291   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3233:3332  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3312:3324  _totalSupply */\n      sload(0x02)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3233:3332  function totalSupply() public view virtual returns (uint256) {... */\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":1442:1467   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1430:1432   */\n      0x20\n        /* \"#utility.yul\":1415:1433   */\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3233:3332  function totalSupply() public view virtual returns (uint256) {... */\n      tag_23\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5192:5441  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_25\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3084:3168  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3158:3160  18 */\n      0x12\n        /* \"#utility.yul\":1953:1989   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1941:1943   */\n      0x20\n        /* \"#utility.yul\":1926:1944   */\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3084:3168  function decimals() public view virtual returns (uint8) {... */\n      tag_23\n        /* \"#utility.yul\":1811:1995   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2735:2849  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_31\n      tag_45\n      jump\t// in\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":523:677  function setMarket(address _Market) external {... */\n    tag_9:\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      stop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3395:3513  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_10:\n      tag_31\n      tag_53\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3487:3505  _balances[account] */\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3460:3467  uint256 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3487:3505  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3395:3513  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2477:2622  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_11:\n      tag_31\n      tag_57\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_57:\n      tag_58\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5257:5837  function eip712Domain()... */\n    tag_12:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_23\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2341:2436  function symbol() public view virtual returns (string memory) {... */\n    tag_13:\n      tag_21\n      tag_65\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3718:3900  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_14:\n      tag_25\n      tag_68\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_68:\n      tag_69\n      jump\t// in\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":809:998  function Aware(address buyer,address seller,uint256 amount) external onlyMarket returns(uint256){... */\n    tag_15:\n      tag_31\n      tag_72\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1723:2418  function permit(... */\n    tag_16:\n      tag_48\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3963:4105  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_17:\n      tag_31\n      tag_80\n      calldatasize\n      0x04\n      tag_81\n      jump\t// in\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4043:4050  uint256 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4081  _allowances */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4097  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3963:4105  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2131:2222  function name() public view virtual returns (string memory) {... */\n    tag_22:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2176:2189  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2209:2214  _name */\n      0x03\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2202:2214  return _name */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_87\n      swap1\n      tag_86\n      jump\t// in\n    tag_87:\n      dup1\n      iszero\n      tag_88\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_89\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_88)\n    tag_89:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_90:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_90\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_88:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2131:2222  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4424:4614  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_28:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4497:4501  bool */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4553:4584  _approve(owner, spender, value) */\n      tag_94\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      dup2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4569:4576  spender */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4578:4583  value */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4553:4561  _approve */\n      tag_95\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4553:4584  _approve(owner, spender, value) */\n      jump\t// in\n    tag_94:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4602:4606  true */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4595:4606  return true */\n      swap2\n      pop\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4424:4614  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_91:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5192:5441  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_38:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5279:5283  bool */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5337:5374  _spendAllowance(from, spender, value) */\n      tag_99\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5353:5357  from */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5368:5373  value */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5337:5352  _spendAllowance */\n      tag_100\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5337:5374  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_99:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5385:5411  _transfer(from, to, value) */\n      tag_101\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5395:5399  from */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5401:5403  to */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5405:5410  value */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5385:5394  _transfer */\n      tag_102\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5385:5411  _transfer(from, to, value) */\n      jump\t// in\n    tag_101:\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5429:5433  true */\n      0x01\n      swap5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5192:5441  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2735:2849  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_45:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2794:2801  bytes32 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2821:2841  _domainSeparatorV4() */\n      tag_105\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2821:2839  _domainSeparatorV4 */\n      tag_106\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2821:2841  _domainSeparatorV4() */\n      jump\t// in\n    tag_105:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2814:2841  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2735:2849  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":523:677  function setMarket(address _Market) external {... */\n    tag_51:\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":599:604  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x09))\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":587:597  msg.sender */\n      caller\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":587:604  msg.sender==admin */\n      eq\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":579:642  require(msg.sender==admin, \"Only admin can call this function\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5187:5189   */\n      0x20\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":579:642  require(msg.sender==admin, \"Only admin can call this function\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5169:5190   */\n      mstore\n        /* \"#utility.yul\":5226:5228   */\n      0x21\n        /* \"#utility.yul\":5206:5224   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5199:5229   */\n      mstore\n        /* \"#utility.yul\":5265:5299   */\n      0x4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f\n        /* \"#utility.yul\":5245:5263   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5238:5300   */\n      mstore\n      shl(0xf9, 0x37)\n        /* \"#utility.yul\":5316:5334   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5309:5340   */\n      mstore\n        /* \"#utility.yul\":5357:5376   */\n      0x84\n      add\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":579:642  require(msg.sender==admin, \"Only admin can call this function\") */\n    tag_109:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_108:\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":653:659  Market */\n      0x08\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":653:669  Market = _Market */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":523:677  function setMarket(address _Market) external {... */\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2477:2622  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_58:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":643:657  _nonces[owner] */\n      dup2\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2568:2575  uint256 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":643:657  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":643:650  _nonces */\n      0x07\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":643:657  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2595:2614  super.nonces(owner) */\n      tag_91\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":556:665  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5257:5837  function eip712Domain()... */\n    tag_61:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5360:5373  bytes1 fields */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5388:5406  string memory name */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5421:5442  string memory version */\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5457:5472  uint256 chainId */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5487:5512  address verifyingContract */\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5527:5539  bytes32 salt */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5554:5581  uint256[] memory extensions */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5662:5675  _EIP712Name() */\n      tag_116\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5662:5673  _EIP712Name */\n      tag_117\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5662:5675  _EIP712Name() */\n      jump\t// in\n    tag_116:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5690:5706  _EIP712Version() */\n      tag_118\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5690:5704  _EIP712Version */\n      tag_119\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5690:5706  _EIP712Version() */\n      jump\t// in\n    tag_118:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5802:5818  new uint256[](0) */\n      0x40\n      dup1\n      mload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5785:5786  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5802:5818  new uint256[](0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      shl(0xf8, 0x0f)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5609:5829  return (... */\n      swap12\n      swap4\n      swap11\n      pop\n      swap2\n      swap9\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5721:5734  block.chainid */\n      chainid\n      swap8\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5757:5761  this */\n      address\n      swap7\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5785:5786  0 */\n      swap5\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5802:5818  new uint256[](0) */\n      swap3\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5609:5829  return (... */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5257:5837  function eip712Domain()... */\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2341:2436  function symbol() public view virtual returns (string memory) {... */\n    tag_65:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2388:2401  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2421:2428  _symbol */\n      0x04\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":2414:2428  return _symbol */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3718:3900  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_69:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3787:3791  bool */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3843:3870  _transfer(owner, to, value) */\n      tag_94\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      dup2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3860:3862  to */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3864:3869  value */\n      dup6\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3843:3852  _transfer */\n      tag_102\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":3843:3870  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":809:998  function Aware(address buyer,address seller,uint256 amount) external onlyMarket returns(uint256){... */\n    tag_73:\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":736:742  Market */\n      sload(0x08)\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":897:904  uint256 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":736:742  Market */\n      and\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":724:734  msg.sender */\n      caller\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":724:742  msg.sender==Market */\n      eq\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":716:781  require(msg.sender==Market, \"Only market can call this function\") */\n      tag_134\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5721:5723   */\n      0x20\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":716:781  require(msg.sender==Market, \"Only market can call this function\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5703:5724   */\n      mstore\n        /* \"#utility.yul\":5760:5762   */\n      0x22\n        /* \"#utility.yul\":5740:5758   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5733:5763   */\n      mstore\n        /* \"#utility.yul\":5799:5833   */\n      0x4f6e6c79206d61726b65742063616e2063616c6c20746869732066756e637469\n        /* \"#utility.yul\":5779:5797   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5772:5834   */\n      mstore\n      shl(0xf1, 0x37b7)\n        /* \"#utility.yul\":5850:5868   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5843:5875   */\n      mstore\n        /* \"#utility.yul\":5892:5911   */\n      0x84\n      add\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":716:781  require(msg.sender==Market, \"Only market can call this function\") */\n      tag_109\n        /* \"#utility.yul\":5519:5917   */\n      jump\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":716:781  require(msg.sender==Market, \"Only market can call this function\") */\n    tag_134:\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":916:935  _mint(buyer,amount) */\n      tag_138\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":922:927  buyer */\n      dup5\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":928:934  amount */\n      dup4\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":916:921  _mint */\n      tag_139\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":916:935  _mint(buyer,amount) */\n      jump\t// in\n    tag_138:\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":946:966  _mint(seller,amount) */\n      tag_140\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":952:958  seller */\n      dup4\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":959:965  amount */\n      dup4\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":946:951  _mint */\n      tag_139\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":946:966  _mint(seller,amount) */\n      jump\t// in\n    tag_140:\n      pop\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":984:990  amount */\n      swap3\n        /* \"app/back-end/contract/src/erc20-usdt.sol\":809:998  function Aware(address buyer,address seller,uint256 amount) external onlyMarket returns(uint256){... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1723:2418  function permit(... */\n    tag_78:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1953:1961  deadline */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1935:1950  block.timestamp */\n      timestamp\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1935:1961  block.timestamp > deadline */\n      gt\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1931:2030  if (block.timestamp > deadline) {... */\n      iszero\n      tag_142\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1985:2018  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      shl(0xe1, 0x313c8981)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1442:1467   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":1415:1433   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1985:2018  ERC2612ExpiredSignature(deadline) */\n      tag_109\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1931:2030  if (block.timestamp > deadline) {... */\n    tag_142:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2042:2060  bytes32 structHash */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1043:1138  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2101:2106  owner */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2108:2115  spender */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2117:2122  value */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2124:2140  _useNonce(owner) */\n      tag_144\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2134:2139  owner */\n      dup13\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1153:1167  _nonces[owner] */\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":846:853  uint256 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1153:1167  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1153:1160  _nonces */\n      0x07\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1153:1167  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1153:1169  _nonces[owner]++ */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":786:1188  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2124:2140  _useNonce(owner) */\n    tag_144:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2073:2151  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":6209:6234   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6308:6323   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":6288:6306   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":6281:6324   */\n      mstore\n        /* \"#utility.yul\":6360:6375   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":6340:6358   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":6333:6376   */\n      mstore\n        /* \"#utility.yul\":6392:6410   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":6385:6419   */\n      mstore\n        /* \"#utility.yul\":6435:6454   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":6428:6463   */\n      mstore\n        /* \"#utility.yul\":6479:6498   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":6472:6507   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":6181:6200   */\n      0xe0\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2073:2151  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2063:2152  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2042:2152  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2165:2177  bytes32 hash */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2180:2208  _hashTypedDataV4(structHash) */\n      tag_148\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2197:2207  structHash */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2180:2196  _hashTypedDataV4 */\n      tag_149\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2180:2208  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_148:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2165:2208  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2221:2235  address signer */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2238:2266  ECDSA.recover(hash, v, r, s) */\n      tag_150\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2252:2256  hash */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2259  v */\n      dup8\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2261:2262  r */\n      dup8\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2264:2265  s */\n      dup8\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2238:2251  ECDSA.recover */\n      tag_151\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2238:2266  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_150:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2221:2266  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2291:2296  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2281:2296  signer != owner */\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2281:2287  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2281:2296  signer != owner */\n      and\n      eq\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2277:2367  if (signer != owner) {... */\n      tag_152\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2320:2355  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      shl(0xe1, 0x25c00723)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6748:6763   */\n      dup1\n      dup4\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2320:2355  ERC2612InvalidSigner(signer, owner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":6730:6764   */\n      mstore\n        /* \"#utility.yul\":6800:6815   */\n      dup12\n      and\n        /* \"#utility.yul\":6780:6798   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6773:6816   */\n      mstore\n        /* \"#utility.yul\":6665:6683   */\n      0x44\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2320:2355  ERC2612InvalidSigner(signer, owner) */\n      tag_109\n        /* \"#utility.yul\":6518:6822   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2277:2367  if (signer != owner) {... */\n    tag_152:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2379:2410  _approve(owner, spender, value) */\n      tag_155\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2388:2393  owner */\n      dup11\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2395:2402  spender */\n      dup11\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2404:2409  value */\n      dup11\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2379:2387  _approve */\n      tag_95\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":2379:2410  _approve(owner, spender, value) */\n      jump\t// in\n    tag_155:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1920:2418  {... */\n      pop\n      pop\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":1723:2418  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9251:9381  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_95:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9336:9373  _approve(owner, spender, value, true) */\n      tag_159\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9345:9350  owner */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9352:9359  spender */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9361:9366  value */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9368:9372  true */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9336:9344  _approve */\n      tag_160\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9336:9373  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_159:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":9251:9381  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10967:11454  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11067:11091  uint256 currentAllowance */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4081  _allowances */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4088  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":4070:4097  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11134:11171  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11130:11447  if (currentAllowance != type(uint256).max) {... */\n      tag_167\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11211:11216  value */\n      dup2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11192:11208  currentAllowance */\n      dup2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11192:11216  currentAllowance < value */\n      lt\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11188:11320  if (currentAllowance < value) {... */\n      iszero\n      tag_164\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11244:11304  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7047:7079   */\n      dup5\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11244:11304  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7029:7080   */\n      mstore\n        /* \"#utility.yul\":7096:7114   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":7089:7123   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":7139:7157   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":7132:7166   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":7002:7020   */\n      0x64\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11244:11304  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_109\n        /* \"#utility.yul\":6827:7172   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11188:11320  if (currentAllowance < value) {... */\n    tag_164:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11363:11420  _approve(owner, spender, currentAllowance - value, false) */\n      tag_167\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11372:11377  owner */\n      dup5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11379:11386  spender */\n      dup5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11407:11412  value */\n      dup5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11388:11404  currentAllowance */\n      dup5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11388:11412  currentAllowance - value */\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11414:11419  false */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11363:11371  _approve */\n      tag_160\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11363:11420  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_167:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":11056:11454  {... */\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10967:11454  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5826:6134  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5910:5928  from == address(0) */\n      dup4\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5906:5994  if (from == address(0)) {... */\n      tag_169\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5952:5982  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5979:5980  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5952:5982  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7323:7374   */\n      mstore\n        /* \"#utility.yul\":7296:7314   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5952:5982  ERC20InvalidSender(address(0)) */\n      tag_109\n        /* \"#utility.yul\":7177:7380   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":5906:5994  if (from == address(0)) {... */\n    tag_169:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6008:6024  to == address(0) */\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6004:6092  if (to == address(0)) {... */\n      tag_172\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6048:6080  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6077:6078  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6048:6080  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7323:7374   */\n      mstore\n        /* \"#utility.yul\":7296:7314   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6048:6080  ERC20InvalidReceiver(address(0)) */\n      tag_109\n        /* \"#utility.yul\":7177:7380   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6004:6092  if (to == address(0)) {... */\n    tag_172:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6102:6126  _update(from, to, value) */\n      tag_159\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6110:6114  from */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6116:6118  to */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6120:6125  value */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6102:6109  _update */\n      tag_175\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6102:6126  _update(from, to, value) */\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3924:4192  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_106:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3977:3984  bytes32 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4009:4013  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4018:4029  _cachedThis */\n      immutable(\"0x45583c716935567ea164771749ab630fc2584e89eead72531f29ea474918321a\")\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4001:4029  address(this) == _cachedThis */\n      and\n      eq\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4001:4064  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_177\n      jumpi\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4050:4064  _cachedChainId */\n      immutable(\"0x2eb9a99718a5ddb41634aa3a127c1821b30a0e7db3d87b6203b71d7595223311\")\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4033:4046  block.chainid */\n      chainid\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4033:4064  block.chainid == _cachedChainId */\n      eq\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4001:4064  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_177:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3997:4185  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_178\n      jumpi\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4088:4110  _cachedDomainSeparator */\n      immutable(\"0xb775854bb325b699ccfc2a72dec93b06810d465e2ba7b7ffc485571437231d1a\")\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3924:4192  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3997:4185  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_178:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4150:4173  _buildDomainSeparator() */\n      tag_105\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2116:2211  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":7871:7896   */\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4314:4325  _hashedName */\n      immutable(\"0x7046b97b103039cb97ea5110f1f4832d5d00e701e21d67c9f93f60c215815d45\")\n        /* \"#utility.yul\":7912:7930   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":7905:7939   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4327:4341  _hashedVersion */\n      immutable(\"0xf22c5b16043446a68d62f47815793cbbc874be5b2e65e9e313507336d6583f6d\")\n        /* \"#utility.yul\":7955:7973   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":7948:7982   */\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4343:4356  block.chainid */\n      chainid\n        /* \"#utility.yul\":7998:8016   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":7991:8025   */\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4366:4370  this */\n      address\n        /* \"#utility.yul\":8041:8060   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":8034:8095   */\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4255:4262  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":7843:7862   */\n      0xc0\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4292:4372  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4282:4373  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4275:4373  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4200:4381  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6166:6294  function _EIP712Name() internal view returns (string memory) {... */\n    tag_117:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6212:6225  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6245:6286  _name.toStringWithFallback(_nameFallback) */\n      tag_105\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6245:6250  _name */\n      immutable(\"0x57650568a02a7887f4f4e1ae3b5071ca25e4fb181c1b7adfd0d312e8c663feb3\")\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6272:6285  _nameFallback */\n      0x05\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6245:6271  _name.toStringWithFallback */\n      tag_185\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6245:6286  _name.toStringWithFallback(_nameFallback) */\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6629:6766  function _EIP712Version() internal view returns (string memory) {... */\n    tag_119:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6678:6691  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6711:6758  _version.toStringWithFallback(_versionFallback) */\n      tag_105\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6711:6719  _version */\n      immutable(\"0xe156ff544111f0d61300ce79ff347b01537432ccb5ab72ff35b2177c2ed3fa4b\")\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6741:6757  _versionFallback */\n      0x06\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6711:6740  _version.toStringWithFallback */\n      tag_185\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6711:6758  _version.toStringWithFallback(_versionFallback) */\n      jump\t// in\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7946:8159  function _mint(address account, uint256 value) internal {... */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8017:8038  account == address(0) */\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8013:8106  if (account == address(0)) {... */\n      tag_189\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8091:8092  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7323:7374   */\n      mstore\n        /* \"#utility.yul\":7296:7314   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8062:8094  ERC20InvalidReceiver(address(0)) */\n      tag_109\n        /* \"#utility.yul\":7177:7380   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8013:8106  if (account == address(0)) {... */\n    tag_189:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8151  _update(address(0), account, value) */\n      tag_191\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8132:8133  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8136:8143  account */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8145:8150  value */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8123  _update */\n      tag_175\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":8116:8151  _update(address(0), account, value) */\n      jump\t// in\n    tag_191:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7946:8159  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5023:5201  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_149:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5100:5107  bytes32 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5127:5193  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_91\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5160:5180  _domainSeparatorV4() */\n      tag_195\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5160:5178  _domainSeparatorV4 */\n      tag_106\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5160:5180  _domainSeparatorV4() */\n      jump\t// in\n    tag_195:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5182:5192  structHash */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3633:3637  0x40 */\n      0x40\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3627:3638  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3652:3675  mstore(ptr, hex\"19_01\") */\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3705:3709  0x02 */\n      0x02\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3696:3710  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3689:3728  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3758:3762  0x22 */\n      0x22\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3749:3763  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3742:3776  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3815:3819  0x42 */\n      0x42\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3800:3820  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3428:3838  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6956:7220  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_151:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7041:7048  address */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7062:7079  address recovered */\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7081:7099  RecoverError error */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7101:7117  bytes32 errorArg */\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7121:7146  tryRecover(hash, v, r, s) */\n      tag_198\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7132:7136  hash */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7138:7139  v */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7141:7142  r */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7144:7145  s */\n      dup9\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7121:7131  tryRecover */\n      tag_199\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7121:7146  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_198:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7061:7146  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7157:7185  _throwError(error, errorArg) */\n      tag_200\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7169:7174  error */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7176:7184  errorArg */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7157:7168  _throwError */\n      tag_201\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7157:7185  _throwError(error, errorArg) */\n      jump\t// in\n    tag_200:\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7203:7212  recovered */\n      swap1\n      swap7\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6956:7220  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10232:10675  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_160:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10345:10364  owner == address(0) */\n      dup5\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10341:10432  if (owner == address(0)) {... */\n      tag_203\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10388:10420  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10417:10418  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10388:10420  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7323:7374   */\n      mstore\n        /* \"#utility.yul\":7296:7314   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10388:10420  ERC20InvalidApprover(address(0)) */\n      tag_109\n        /* \"#utility.yul\":7177:7380   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10341:10432  if (owner == address(0)) {... */\n    tag_203:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10446:10467  spender == address(0) */\n      dup4\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10442:10534  if (spender == address(0)) {... */\n      tag_205\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10491:10522  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10519:10520  0 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10491:10522  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7323:7374   */\n      mstore\n        /* \"#utility.yul\":7296:7314   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10491:10522  ERC20InvalidSpender(address(0)) */\n      tag_109\n        /* \"#utility.yul\":7177:7380   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10442:10534  if (spender == address(0)) {... */\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10544:10562  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10544:10555  _allowances */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10544:10562  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10544:10571  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10544:10579  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10590:10668  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_167\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10641:10648  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10625:10656  Approval(owner, spender, value) */\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10634:10639  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10625:10656  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10650:10655  value */\n      dup5\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10625:10656  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_208\n      swap2\n        /* \"#utility.yul\":1442:1467   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1430:1432   */\n      0x20\n        /* \"#utility.yul\":1415:1433   */\n      add\n      swap1\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10625:10656  Approval(owner, spender, value) */\n    tag_208:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":10232:10675  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6458:7593  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_175:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6548:6566  from == address(0) */\n      dup4\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\n      tag_210\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6702:6707  value */\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6686:6698  _totalSupply */\n      0x02\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6686:6707  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_211\n      swap2\n      swap1\n      tag_212\n      jump\t// in\n    tag_211:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\n      tag_213\n      swap1\n      pop\n      jump\n    tag_210:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6762:6777  _balances[from] */\n      dup4\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6740:6759  uint256 fromBalance */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6762:6777  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6796:6815  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6792:6909  if (fromBalance < value) {... */\n      iszero\n      tag_214\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7047:7079   */\n      dup6\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7029:7080   */\n      mstore\n        /* \"#utility.yul\":7096:7114   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":7089:7123   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":7139:7157   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":7132:7166   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":7002:7020   */\n      0x64\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6843:6893  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_109\n        /* \"#utility.yul\":6827:7172   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6792:6909  if (fromBalance < value) {... */\n    tag_214:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7047  _balances[from] */\n      dup5\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7041  _balances */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7047  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7050:7069  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7032:7069  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6544:7096  if (from == address(0)) {... */\n    tag_213:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7112:7128  to == address(0) */\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\n      tag_216\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7278:7290  _totalSupply */\n      0x02\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7278:7299  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\n      jump(tag_217)\n    tag_216:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7507  _balances[to] */\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7503  _balances */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7507  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7494:7516  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7108:7543  if (to == address(0)) {... */\n    tag_217:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7575:7577  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7569:7573  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7579:7584  value */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n      mload(0x40)\n      tag_218\n      swap2\n        /* \"#utility.yul\":1442:1467   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1430:1432   */\n      0x20\n        /* \"#utility.yul\":1415:1433   */\n      add\n      swap1\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":7560:7585  Transfer(from, to, value) */\n    tag_218:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":6458:7593  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3485:3758  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_185:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3579:3592  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1431:1497  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3609:3655  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup4\n      eq\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3605:3751  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_223\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3679:3694  toString(value) */\n      tag_224\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3688:3693  value */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3679:3687  toString */\n      tag_225\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3679:3694  toString(value) */\n      jump\t// in\n    tag_224:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3672:3694  return toString(value) */\n      swap1\n      pop\n      jump(tag_91)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3605:3751  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_223:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3734:3739  store */\n      dup2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3727:3739  return store */\n      dup1\n      sload\n      tag_227\n      swap1\n      tag_86\n      jump\t// in\n    tag_227:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_228\n      swap1\n      tag_86\n      jump\t// in\n    tag_228:\n      dup1\n      iszero\n      tag_229\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_230\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_229)\n    tag_230:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_231:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_231\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_229:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      jump(tag_91)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5261:6817  function tryRecover(... */\n    tag_199:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5392:5399  address */\n      0x00\n      dup1\n      dup1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6335:6401  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6322:6401  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6318:6484  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_234\n      jumpi\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6434:6435  0 */\n      0x00\n      swap2\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6438:6468  RecoverError.InvalidSignatureS */\n      0x03\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6470:6471  s */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6418:6472  return (address(0), RecoverError.InvalidSignatureS, s) */\n      jump(tag_233)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6318:6484  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_234:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6598:6622  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6581:6595  address signer */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6598:6622  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":8333:8358   */\n      dup11\n      swap1\n      mstore\n        /* \"#utility.yul\":8406:8410   */\n      0xff\n        /* \"#utility.yul\":8394:8411   */\n      dup10\n      and\n        /* \"#utility.yul\":8374:8392   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":8367:8412   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":8428:8446   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":8421:8455   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":8471:8489   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":8464:8498   */\n      dup7\n      swap1\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6598:6622  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":8305:8324   */\n      0xa0\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6598:6622  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_238\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_238:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6637:6657  signer == address(0) */\n      dup2\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6633:6748  if (signer == address(0)) {... */\n      tag_239\n      jumpi\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6690:6691  0 */\n      0x00\n      swap3\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6694:6723  RecoverError.InvalidSignature */\n      0x01\n      swap2\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6690:6691  0 */\n      dup3\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6674:6736  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      jump(tag_233)\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6633:6748  if (signer == address(0)) {... */\n    tag_239:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6768:6774  signer */\n      swap3\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6776:6796  RecoverError.NoError */\n      0x00\n      swap2\n      pop\n      dup2\n      swap1\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5261:6817  function tryRecover(... */\n    tag_233:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7358:7900  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_201:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7454:7474  RecoverError.NoError */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7445:7450  error */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7445:7474  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_245\n      jumpi\n      tag_245\n      tag_243\n      jump\t// in\n    tag_245:\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7441:7893  if (error == RecoverError.NoError) {... */\n      tag_246\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7358:7900  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7441:7893  if (error == RecoverError.NoError) {... */\n    tag_246:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7552:7581  RecoverError.InvalidSignature */\n      0x01\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7543:7548  error */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7543:7581  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_251\n      jumpi\n      tag_251\n      tag_243\n      jump\t// in\n    tag_251:\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7539:7893  if (error == RecoverError.InvalidSignature) {... */\n      tag_252\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7605:7628  ECDSAInvalidSignature() */\n      mload(0x40)\n      shl(0xe0, 0xf645eedf)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7539:7893  if (error == RecoverError.InvalidSignature) {... */\n    tag_252:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7659:7694  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7650:7655  error */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7650:7694  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_257\n      jumpi\n      tag_257\n      tag_243\n      jump\t// in\n    tag_257:\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7646:7893  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_258\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7718:7764  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      shl(0xe0, 0xfce698f7)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1442:1467   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1415:1433   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7718:7764  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      tag_109\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7646:7893  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_258:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7795:7825  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7786:7791  error */\n      dup3\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7786:7825  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_264\n      jumpi\n      tag_264\n      tag_243\n      jump\t// in\n    tag_264:\n      sub\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7782:7893  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_191\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7849:7881  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      shl(0xe2, 0x35e2f383)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1442:1467   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1415:1433   */\n      0x24\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":7849:7881  ECDSAInvalidSignatureS(errorArg) */\n      tag_109\n        /* \"#utility.yul\":1296:1473   */\n      jump\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2140:2555  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_225:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2199:2212  string memory */\n      0x60\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2225:2236  uint256 len */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2239:2255  byteLength(sstr) */\n      tag_268\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2250:2254  sstr */\n      dup4\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2239:2249  byteLength */\n      tag_269\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2239:2255  byteLength(sstr) */\n      jump\t// in\n    tag_268:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2365:2379  new string(32) */\n      0x40\n      dup1\n      mload\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2376:2378  32 */\n      0x20\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2365:2379  new string(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2225:2255  uint256 len = byteLength(sstr) */\n      swap2\n      swap3\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2345:2362  string memory str */\n      0x00\n      swap2\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2365:2379  new string(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      pop\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2458:2474  mstore(str, len) */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2504:2508  0x20 */\n      0x20\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2495:2509  add(str, 0x20) */\n      dup2\n      add\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2488:2516  mstore(add(str, 0x20), sstr) */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2458:2474  mstore(str, len) */\n      swap1\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2140:2555  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2632:2883  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_269:\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2693:2700  uint256 */\n      0x00\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2766:2770  0xFF */\n      0xff\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2730:2770  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup3\n      and\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2794:2796  31 */\n      0x1f\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2785:2796  result > 31 */\n      dup2\n      gt\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2781:2852  if (result > 31) {... */\n      iszero\n      tag_91\n      jumpi\n        /* \"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2820:2840  InvalidShortString() */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:437   */\n    tag_275:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":146:147   */\n      0x00\n        /* \"#utility.yul\":156:318   */\n    tag_279:\n        /* \"#utility.yul\":170:176   */\n      dup2\n        /* \"#utility.yul\":167:168   */\n      dup2\n        /* \"#utility.yul\":164:177   */\n      lt\n        /* \"#utility.yul\":156:318   */\n      iszero\n      tag_281\n      jumpi\n        /* \"#utility.yul\":232:236   */\n      0x20\n        /* \"#utility.yul\":288:301   */\n      dup2\n      dup6\n      add\n        /* \"#utility.yul\":284:306   */\n      dup2\n      add\n        /* \"#utility.yul\":278:307   */\n      mload\n        /* \"#utility.yul\":260:271   */\n      dup7\n      dup4\n      add\n        /* \"#utility.yul\":256:276   */\n      dup3\n      add\n        /* \"#utility.yul\":249:308   */\n      mstore\n        /* \"#utility.yul\":185:197   */\n      add\n        /* \"#utility.yul\":156:318   */\n      jump(tag_279)\n    tag_281:\n        /* \"#utility.yul\":160:163   */\n      pop\n        /* \"#utility.yul\":363:364   */\n      0x00\n        /* \"#utility.yul\":356:360   */\n      0x20\n        /* \"#utility.yul\":347:353   */\n      dup3\n        /* \"#utility.yul\":342:345   */\n      dup7\n        /* \"#utility.yul\":338:354   */\n      add\n        /* \"#utility.yul\":334:361   */\n      add\n        /* \"#utility.yul\":327:365   */\n      mstore\n        /* \"#utility.yul\":426:430   */\n      0x20\n        /* \"#utility.yul\":419:421   */\n      0x1f\n        /* \"#utility.yul\":415:422   */\n      not\n        /* \"#utility.yul\":410:412   */\n      0x1f\n        /* \"#utility.yul\":402:408   */\n      dup4\n        /* \"#utility.yul\":398:413   */\n      add\n        /* \"#utility.yul\":394:423   */\n      and\n        /* \"#utility.yul\":389:392   */\n      dup6\n        /* \"#utility.yul\":385:424   */\n      add\n        /* \"#utility.yul\":381:431   */\n      add\n        /* \"#utility.yul\":374:431   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:437   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":442:662   */\n    tag_24:\n        /* \"#utility.yul\":591:593   */\n      0x20\n        /* \"#utility.yul\":580:589   */\n      dup2\n        /* \"#utility.yul\":573:594   */\n      mstore\n        /* \"#utility.yul\":554:558   */\n      0x00\n        /* \"#utility.yul\":611:656   */\n      tag_283\n        /* \"#utility.yul\":652:654   */\n      0x20\n        /* \"#utility.yul\":641:650   */\n      dup4\n        /* \"#utility.yul\":637:655   */\n      add\n        /* \"#utility.yul\":629:635   */\n      dup5\n        /* \"#utility.yul\":611:656   */\n      tag_275\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":603:656   */\n      swap4\n        /* \"#utility.yul\":442:662   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":667:840   */\n    tag_276:\n        /* \"#utility.yul\":735:755   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":784:815   */\n      dup2\n      and\n        /* \"#utility.yul\":774:816   */\n      dup2\n      eq\n        /* \"#utility.yul\":764:834   */\n      tag_285\n      jumpi\n        /* \"#utility.yul\":830:831   */\n      0x00\n        /* \"#utility.yul\":827:828   */\n      dup1\n        /* \"#utility.yul\":820:832   */\n      revert\n        /* \"#utility.yul\":764:834   */\n    tag_285:\n        /* \"#utility.yul\":667:840   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":845:1099   */\n    tag_27:\n        /* \"#utility.yul\":913:919   */\n      0x00\n        /* \"#utility.yul\":921:927   */\n      dup1\n        /* \"#utility.yul\":974:976   */\n      0x40\n        /* \"#utility.yul\":962:971   */\n      dup4\n        /* \"#utility.yul\":953:960   */\n      dup6\n        /* \"#utility.yul\":949:972   */\n      sub\n        /* \"#utility.yul\":945:977   */\n      slt\n        /* \"#utility.yul\":942:994   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":990:991   */\n      0x00\n        /* \"#utility.yul\":987:988   */\n      dup1\n        /* \"#utility.yul\":980:992   */\n      revert\n        /* \"#utility.yul\":942:994   */\n    tag_287:\n        /* \"#utility.yul\":1013:1042   */\n      tag_288\n        /* \"#utility.yul\":1032:1041   */\n      dup4\n        /* \"#utility.yul\":1013:1042   */\n      tag_276\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":1003:1042   */\n      swap5\n        /* \"#utility.yul\":1089:1091   */\n      0x20\n        /* \"#utility.yul\":1074:1092   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1061:1093   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":845:1099   */\n      jump\t// out\n        /* \"#utility.yul\":1478:1806   */\n    tag_37:\n        /* \"#utility.yul\":1555:1561   */\n      0x00\n        /* \"#utility.yul\":1563:1569   */\n      dup1\n        /* \"#utility.yul\":1571:1577   */\n      0x00\n        /* \"#utility.yul\":1624:1626   */\n      0x60\n        /* \"#utility.yul\":1612:1621   */\n      dup5\n        /* \"#utility.yul\":1603:1610   */\n      dup7\n        /* \"#utility.yul\":1599:1622   */\n      sub\n        /* \"#utility.yul\":1595:1627   */\n      slt\n        /* \"#utility.yul\":1592:1644   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":1640:1641   */\n      0x00\n        /* \"#utility.yul\":1637:1638   */\n      dup1\n        /* \"#utility.yul\":1630:1642   */\n      revert\n        /* \"#utility.yul\":1592:1644   */\n    tag_292:\n        /* \"#utility.yul\":1663:1692   */\n      tag_293\n        /* \"#utility.yul\":1682:1691   */\n      dup5\n        /* \"#utility.yul\":1663:1692   */\n      tag_276\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":1653:1692   */\n      swap3\n      pop\n        /* \"#utility.yul\":1711:1749   */\n      tag_294\n        /* \"#utility.yul\":1745:1747   */\n      0x20\n        /* \"#utility.yul\":1734:1743   */\n      dup6\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1711:1749   */\n      tag_276\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":1701:1749   */\n      swap2\n      pop\n        /* \"#utility.yul\":1796:1798   */\n      0x40\n        /* \"#utility.yul\":1785:1794   */\n      dup5\n        /* \"#utility.yul\":1781:1799   */\n      add\n        /* \"#utility.yul\":1768:1800   */\n      calldataload\n        /* \"#utility.yul\":1758:1800   */\n      swap1\n      pop\n        /* \"#utility.yul\":1478:1806   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2182:2368   */\n    tag_50:\n        /* \"#utility.yul\":2241:2247   */\n      0x00\n        /* \"#utility.yul\":2294:2296   */\n      0x20\n        /* \"#utility.yul\":2282:2291   */\n      dup3\n        /* \"#utility.yul\":2273:2280   */\n      dup5\n        /* \"#utility.yul\":2269:2292   */\n      sub\n        /* \"#utility.yul\":2265:2297   */\n      slt\n        /* \"#utility.yul\":2262:2314   */\n      iszero\n      tag_298\n      jumpi\n        /* \"#utility.yul\":2310:2311   */\n      0x00\n        /* \"#utility.yul\":2307:2308   */\n      dup1\n        /* \"#utility.yul\":2300:2312   */\n      revert\n        /* \"#utility.yul\":2262:2314   */\n    tag_298:\n        /* \"#utility.yul\":2333:2362   */\n      tag_283\n        /* \"#utility.yul\":2352:2361   */\n      dup3\n        /* \"#utility.yul\":2333:2362   */\n      tag_276\n      jump\t// in\n        /* \"#utility.yul\":2373:3632   */\n    tag_63:\n        /* \"#utility.yul\":2779:2782   */\n      0xff\n        /* \"#utility.yul\":2774:2777   */\n      0xf8\n        /* \"#utility.yul\":2770:2783   */\n      shl\n        /* \"#utility.yul\":2762:2768   */\n      dup9\n        /* \"#utility.yul\":2758:2784   */\n      and\n        /* \"#utility.yul\":2747:2756   */\n      dup2\n        /* \"#utility.yul\":2740:2785   */\n      mstore\n        /* \"#utility.yul\":2721:2725   */\n      0x00\n        /* \"#utility.yul\":2804:2806   */\n      0x20\n        /* \"#utility.yul\":2842:2845   */\n      0xe0\n        /* \"#utility.yul\":2837:2839   */\n      0x20\n        /* \"#utility.yul\":2826:2835   */\n      dup5\n        /* \"#utility.yul\":2822:2840   */\n      add\n        /* \"#utility.yul\":2815:2846   */\n      mstore\n        /* \"#utility.yul\":2869:2915   */\n      tag_301\n        /* \"#utility.yul\":2910:2913   */\n      0xe0\n        /* \"#utility.yul\":2899:2908   */\n      dup5\n        /* \"#utility.yul\":2895:2914   */\n      add\n        /* \"#utility.yul\":2887:2893   */\n      dup11\n        /* \"#utility.yul\":2869:2915   */\n      tag_275\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":2963:2972   */\n      dup4\n        /* \"#utility.yul\":2955:2961   */\n      dup2\n        /* \"#utility.yul\":2951:2973   */\n      sub\n        /* \"#utility.yul\":2946:2948   */\n      0x40\n        /* \"#utility.yul\":2935:2944   */\n      dup6\n        /* \"#utility.yul\":2931:2949   */\n      add\n        /* \"#utility.yul\":2924:2974   */\n      mstore\n        /* \"#utility.yul\":2997:3030   */\n      tag_302\n        /* \"#utility.yul\":3023:3029   */\n      dup2\n        /* \"#utility.yul\":3015:3021   */\n      dup11\n        /* \"#utility.yul\":2997:3030   */\n      tag_275\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":3061:3063   */\n      0x60\n        /* \"#utility.yul\":3046:3064   */\n      dup6\n      add\n        /* \"#utility.yul\":3039:3073   */\n      dup10\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3110:3142   */\n      dup9\n      and\n        /* \"#utility.yul\":3104:3107   */\n      0x80\n        /* \"#utility.yul\":3089:3108   */\n      dup7\n      add\n        /* \"#utility.yul\":3082:3143   */\n      mstore\n        /* \"#utility.yul\":3130:3133   */\n      0xa0\n        /* \"#utility.yul\":3159:3178   */\n      dup6\n      add\n        /* \"#utility.yul\":3152:3187   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":3224:3246   */\n      dup5\n      dup2\n      sub\n        /* \"#utility.yul\":3218:3221   */\n      0xc0\n        /* \"#utility.yul\":3203:3222   */\n      dup7\n      add\n        /* \"#utility.yul\":3196:3247   */\n      mstore\n        /* \"#utility.yul\":3296:3309   */\n      dup6\n      mload\n        /* \"#utility.yul\":3318:3340   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3368:3370   */\n      0x20\n        /* \"#utility.yul\":3394:3409   */\n      dup1\n      dup9\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":3356:3371   */\n      swap1\n      swap2\n      add\n      swap1\n      0x00\n        /* \"#utility.yul\":3437:3606   */\n    tag_303:\n        /* \"#utility.yul\":3451:3457   */\n      dup2\n        /* \"#utility.yul\":3448:3449   */\n      dup2\n        /* \"#utility.yul\":3445:3458   */\n      lt\n        /* \"#utility.yul\":3437:3606   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":3512:3525   */\n      dup4\n      mload\n        /* \"#utility.yul\":3500:3526   */\n      dup4\n      mstore\n        /* \"#utility.yul\":3581:3596   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":3546:3558   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":3473:3474   */\n      0x01\n        /* \"#utility.yul\":3466:3475   */\n      add\n        /* \"#utility.yul\":3437:3606   */\n      jump(tag_303)\n    tag_305:\n      pop\n        /* \"#utility.yul\":3623:3626   */\n      swap1\n      swap13\n        /* \"#utility.yul\":2373:3632   */\n      swap12\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3637:4330   */\n    tag_77:\n        /* \"#utility.yul\":3748:3754   */\n      0x00\n        /* \"#utility.yul\":3756:3762   */\n      dup1\n        /* \"#utility.yul\":3764:3770   */\n      0x00\n        /* \"#utility.yul\":3772:3778   */\n      dup1\n        /* \"#utility.yul\":3780:3786   */\n      0x00\n        /* \"#utility.yul\":3788:3794   */\n      dup1\n        /* \"#utility.yul\":3796:3802   */\n      0x00\n        /* \"#utility.yul\":3849:3852   */\n      0xe0\n        /* \"#utility.yul\":3837:3846   */\n      dup9\n        /* \"#utility.yul\":3828:3835   */\n      dup11\n        /* \"#utility.yul\":3824:3847   */\n      sub\n        /* \"#utility.yul\":3820:3853   */\n      slt\n        /* \"#utility.yul\":3817:3870   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":3866:3867   */\n      0x00\n        /* \"#utility.yul\":3863:3864   */\n      dup1\n        /* \"#utility.yul\":3856:3868   */\n      revert\n        /* \"#utility.yul\":3817:3870   */\n    tag_307:\n        /* \"#utility.yul\":3889:3918   */\n      tag_308\n        /* \"#utility.yul\":3908:3917   */\n      dup9\n        /* \"#utility.yul\":3889:3918   */\n      tag_276\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":3879:3918   */\n      swap7\n      pop\n        /* \"#utility.yul\":3937:3975   */\n      tag_309\n        /* \"#utility.yul\":3971:3973   */\n      0x20\n        /* \"#utility.yul\":3960:3969   */\n      dup10\n        /* \"#utility.yul\":3956:3974   */\n      add\n        /* \"#utility.yul\":3937:3975   */\n      tag_276\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":3927:3975   */\n      swap6\n      pop\n        /* \"#utility.yul\":4022:4024   */\n      0x40\n        /* \"#utility.yul\":4011:4020   */\n      dup9\n        /* \"#utility.yul\":4007:4025   */\n      add\n        /* \"#utility.yul\":3994:4026   */\n      calldataload\n        /* \"#utility.yul\":3984:4026   */\n      swap5\n      pop\n        /* \"#utility.yul\":4073:4075   */\n      0x60\n        /* \"#utility.yul\":4062:4071   */\n      dup9\n        /* \"#utility.yul\":4058:4076   */\n      add\n        /* \"#utility.yul\":4045:4077   */\n      calldataload\n        /* \"#utility.yul\":4035:4077   */\n      swap4\n      pop\n        /* \"#utility.yul\":4127:4130   */\n      0x80\n        /* \"#utility.yul\":4116:4125   */\n      dup9\n        /* \"#utility.yul\":4112:4131   */\n      add\n        /* \"#utility.yul\":4099:4132   */\n      calldataload\n        /* \"#utility.yul\":4172:4176   */\n      0xff\n        /* \"#utility.yul\":4165:4170   */\n      dup2\n        /* \"#utility.yul\":4161:4177   */\n      and\n        /* \"#utility.yul\":4154:4159   */\n      dup2\n        /* \"#utility.yul\":4151:4178   */\n      eq\n        /* \"#utility.yul\":4141:4196   */\n      tag_310\n      jumpi\n        /* \"#utility.yul\":4192:4193   */\n      0x00\n        /* \"#utility.yul\":4189:4190   */\n      dup1\n        /* \"#utility.yul\":4182:4194   */\n      revert\n        /* \"#utility.yul\":4141:4196   */\n    tag_310:\n        /* \"#utility.yul\":3637:4330   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":4215:4220   */\n      swap5\n        /* \"#utility.yul\":4267:4270   */\n      0xa0\n        /* \"#utility.yul\":4252:4271   */\n      dup5\n      add\n        /* \"#utility.yul\":4239:4272   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4319:4322   */\n      0xc0\n        /* \"#utility.yul\":4304:4323   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":4291:4324   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":3637:4330   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4335:4595   */\n    tag_81:\n        /* \"#utility.yul\":4403:4409   */\n      0x00\n        /* \"#utility.yul\":4411:4417   */\n      dup1\n        /* \"#utility.yul\":4464:4466   */\n      0x40\n        /* \"#utility.yul\":4452:4461   */\n      dup4\n        /* \"#utility.yul\":4443:4450   */\n      dup6\n        /* \"#utility.yul\":4439:4462   */\n      sub\n        /* \"#utility.yul\":4435:4467   */\n      slt\n        /* \"#utility.yul\":4432:4484   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":4480:4481   */\n      0x00\n        /* \"#utility.yul\":4477:4478   */\n      dup1\n        /* \"#utility.yul\":4470:4482   */\n      revert\n        /* \"#utility.yul\":4432:4484   */\n    tag_312:\n        /* \"#utility.yul\":4503:4532   */\n      tag_313\n        /* \"#utility.yul\":4522:4531   */\n      dup4\n        /* \"#utility.yul\":4503:4532   */\n      tag_276\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":4493:4532   */\n      swap2\n      pop\n        /* \"#utility.yul\":4551:4589   */\n      tag_314\n        /* \"#utility.yul\":4585:4587   */\n      0x20\n        /* \"#utility.yul\":4574:4583   */\n      dup5\n        /* \"#utility.yul\":4570:4588   */\n      add\n        /* \"#utility.yul\":4551:4589   */\n      tag_276\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":4541:4589   */\n      swap1\n      pop\n        /* \"#utility.yul\":4335:4595   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4600:4980   */\n    tag_86:\n        /* \"#utility.yul\":4679:4680   */\n      0x01\n        /* \"#utility.yul\":4675:4687   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4722:4734   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4743:4804   */\n      tag_316\n      jumpi\n        /* \"#utility.yul\":4797:4801   */\n      0x7f\n        /* \"#utility.yul\":4789:4795   */\n      dup3\n        /* \"#utility.yul\":4785:4802   */\n      and\n        /* \"#utility.yul\":4775:4802   */\n      swap2\n      pop\n        /* \"#utility.yul\":4743:4804   */\n    tag_316:\n        /* \"#utility.yul\":4850:4852   */\n      0x20\n        /* \"#utility.yul\":4842:4848   */\n      dup3\n        /* \"#utility.yul\":4839:4853   */\n      lt\n        /* \"#utility.yul\":4819:4837   */\n      dup2\n        /* \"#utility.yul\":4816:4854   */\n      sub\n        /* \"#utility.yul\":4813:4974   */\n      tag_317\n      jumpi\n        /* \"#utility.yul\":4896:4906   */\n      0x4e487b71\n        /* \"#utility.yul\":4891:4894   */\n      0xe0\n        /* \"#utility.yul\":4887:4907   */\n      shl\n        /* \"#utility.yul\":4884:4885   */\n      0x00\n        /* \"#utility.yul\":4877:4908   */\n      mstore\n        /* \"#utility.yul\":4931:4935   */\n      0x22\n        /* \"#utility.yul\":4928:4929   */\n      0x04\n        /* \"#utility.yul\":4921:4936   */\n      mstore\n        /* \"#utility.yul\":4959:4963   */\n      0x24\n        /* \"#utility.yul\":4956:4957   */\n      0x00\n        /* \"#utility.yul\":4949:4964   */\n      revert\n        /* \"#utility.yul\":4813:4974   */\n    tag_317:\n      pop\n        /* \"#utility.yul\":4600:4980   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7385:7607   */\n    tag_212:\n        /* \"#utility.yul\":7450:7459   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7471:7481   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":7468:7601   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":7523:7533   */\n      0x4e487b71\n        /* \"#utility.yul\":7518:7521   */\n      0xe0\n        /* \"#utility.yul\":7514:7534   */\n      shl\n        /* \"#utility.yul\":7511:7512   */\n      0x00\n        /* \"#utility.yul\":7504:7535   */\n      mstore\n        /* \"#utility.yul\":7558:7562   */\n      0x11\n        /* \"#utility.yul\":7555:7556   */\n      0x04\n        /* \"#utility.yul\":7548:7563   */\n      mstore\n        /* \"#utility.yul\":7586:7590   */\n      0x24\n        /* \"#utility.yul\":7583:7584   */\n      0x00\n        /* \"#utility.yul\":7576:7591   */\n      revert\n        /* \"#utility.yul\":8509:8636   */\n    tag_243:\n        /* \"#utility.yul\":8570:8580   */\n      0x4e487b71\n        /* \"#utility.yul\":8565:8568   */\n      0xe0\n        /* \"#utility.yul\":8561:8581   */\n      shl\n        /* \"#utility.yul\":8558:8559   */\n      0x00\n        /* \"#utility.yul\":8551:8582   */\n      mstore\n        /* \"#utility.yul\":8601:8605   */\n      0x21\n        /* \"#utility.yul\":8598:8599   */\n      0x04\n        /* \"#utility.yul\":8591:8606   */\n      mstore\n        /* \"#utility.yul\":8625:8629   */\n      0x24\n        /* \"#utility.yul\":8622:8623   */\n      0x00\n        /* \"#utility.yul\":8615:8630   */\n      revert\n\n    auxdata: 0xa2646970667358221220ae5dc479232d5b211f00338d7e9943b28c99cc21d127f1ff4b3e2bc86601b4c364736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2095": {
									"entryPoint": null,
									"id": 2095,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_213": {
									"entryPoint": null,
									"id": 213,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3501": {
									"entryPoint": null,
									"id": 3501,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_803": {
									"entryPoint": null,
									"id": 803,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2142": {
									"entryPoint": null,
									"id": 2142,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_516": {
									"entryPoint": 481,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_update_483": {
									"entryPoint": 611,
									"id": 483,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@decimals_240": {
									"entryPoint": null,
									"id": 240,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getStringSlot_1372": {
									"entryPoint": null,
									"id": 1372,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1226": {
									"entryPoint": 425,
									"id": 1226,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1128": {
									"entryPoint": 545,
									"id": 1128,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1594,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 1296,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 1545,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 1368,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1568,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 992,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 1672,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1072,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 934,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1276,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 914,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6599:18",
										"nodeType": "YulBlock",
										"src": "0:6599:18",
										"statements": [
											{
												"nativeSrc": "6:3:18",
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "46:95:18",
													"nodeType": "YulBlock",
													"src": "46:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "63:1:18",
																		"nodeType": "YulLiteral",
																		"src": "63:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "70:3:18",
																				"nodeType": "YulLiteral",
																				"src": "70:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "75:10:18",
																				"nodeType": "YulLiteral",
																				"src": "75:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "66:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:18"
																		},
																		"nativeSrc": "66:20:18",
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "56:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:18"
																},
																"nativeSrc": "56:31:18",
																"nodeType": "YulFunctionCall",
																"src": "56:31:18"
															},
															"nativeSrc": "56:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "56:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "103:1:18",
																		"nodeType": "YulLiteral",
																		"src": "103:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "106:4:18",
																		"nodeType": "YulLiteral",
																		"src": "106:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "96:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:18"
																},
																"nativeSrc": "96:15:18",
																"nodeType": "YulFunctionCall",
																"src": "96:15:18"
															},
															"nativeSrc": "96:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "96:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "127:1:18",
																		"nodeType": "YulLiteral",
																		"src": "127:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "130:4:18",
																		"nodeType": "YulLiteral",
																		"src": "130:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "120:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:18"
																},
																"nativeSrc": "120:15:18",
																"nodeType": "YulFunctionCall",
																"src": "120:15:18"
															},
															"nativeSrc": "120:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "120:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "14:127:18",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:18"
											},
											{
												"body": {
													"nativeSrc": "201:325:18",
													"nodeType": "YulBlock",
													"src": "201:325:18",
													"statements": [
														{
															"nativeSrc": "211:22:18",
															"nodeType": "YulAssignment",
															"src": "211:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "225:1:18",
																		"nodeType": "YulLiteral",
																		"src": "225:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "228:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "228:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "221:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "221:3:18"
																},
																"nativeSrc": "221:12:18",
																"nodeType": "YulFunctionCall",
																"src": "221:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "211:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:18"
																}
															]
														},
														{
															"nativeSrc": "242:38:18",
															"nodeType": "YulVariableDeclaration",
															"src": "242:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "272:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "272:4:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "278:1:18",
																		"nodeType": "YulLiteral",
																		"src": "278:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "268:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "268:3:18"
																},
																"nativeSrc": "268:12:18",
																"nodeType": "YulFunctionCall",
																"src": "268:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "246:18:18",
																	"nodeType": "YulTypedName",
																	"src": "246:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "319:31:18",
																"nodeType": "YulBlock",
																"src": "319:31:18",
																"statements": [
																	{
																		"nativeSrc": "321:27:18",
																		"nodeType": "YulAssignment",
																		"src": "321:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "335:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "335:6:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "343:4:18",
																					"nodeType": "YulLiteral",
																					"src": "343:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "331:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "331:3:18"
																			},
																			"nativeSrc": "331:17:18",
																			"nodeType": "YulFunctionCall",
																			"src": "331:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "321:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "321:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "299:18:18",
																		"nodeType": "YulIdentifier",
																		"src": "299:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "292:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "292:6:18"
																},
																"nativeSrc": "292:26:18",
																"nodeType": "YulFunctionCall",
																"src": "292:26:18"
															},
															"nativeSrc": "289:61:18",
															"nodeType": "YulIf",
															"src": "289:61:18"
														},
														{
															"body": {
																"nativeSrc": "409:111:18",
																"nodeType": "YulBlock",
																"src": "409:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "430:1:18",
																					"nodeType": "YulLiteral",
																					"src": "430:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "437:3:18",
																							"nodeType": "YulLiteral",
																							"src": "437:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "442:10:18",
																							"nodeType": "YulLiteral",
																							"src": "442:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "433:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "433:3:18"
																					},
																					"nativeSrc": "433:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "433:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "423:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "423:6:18"
																			},
																			"nativeSrc": "423:31:18",
																			"nodeType": "YulFunctionCall",
																			"src": "423:31:18"
																		},
																		"nativeSrc": "423:31:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "423:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "474:1:18",
																					"nodeType": "YulLiteral",
																					"src": "474:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "477:4:18",
																					"nodeType": "YulLiteral",
																					"src": "477:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "467:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "467:6:18"
																			},
																			"nativeSrc": "467:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "467:15:18"
																		},
																		"nativeSrc": "467:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "467:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "502:1:18",
																					"nodeType": "YulLiteral",
																					"src": "502:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "505:4:18",
																					"nodeType": "YulLiteral",
																					"src": "505:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "495:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "495:6:18"
																			},
																			"nativeSrc": "495:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "495:15:18"
																		},
																		"nativeSrc": "495:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "495:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "365:18:18",
																		"nodeType": "YulIdentifier",
																		"src": "365:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "388:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "388:6:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "396:2:18",
																				"nodeType": "YulLiteral",
																				"src": "396:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "385:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "385:2:18"
																		},
																		"nativeSrc": "385:14:18",
																		"nodeType": "YulFunctionCall",
																		"src": "385:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "362:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "362:2:18"
																},
																"nativeSrc": "362:38:18",
																"nodeType": "YulFunctionCall",
																"src": "362:38:18"
															},
															"nativeSrc": "359:161:18",
															"nodeType": "YulIf",
															"src": "359:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "146:380:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "181:4:18",
														"nodeType": "YulTypedName",
														"src": "181:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "190:6:18",
														"nodeType": "YulTypedName",
														"src": "190:6:18",
														"type": ""
													}
												],
												"src": "146:380:18"
											},
											{
												"body": {
													"nativeSrc": "587:65:18",
													"nodeType": "YulBlock",
													"src": "587:65:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "604:1:18",
																		"nodeType": "YulLiteral",
																		"src": "604:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "607:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "607:3:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "597:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:18"
																},
																"nativeSrc": "597:14:18",
																"nodeType": "YulFunctionCall",
																"src": "597:14:18"
															},
															"nativeSrc": "597:14:18",
															"nodeType": "YulExpressionStatement",
															"src": "597:14:18"
														},
														{
															"nativeSrc": "620:26:18",
															"nodeType": "YulAssignment",
															"src": "620:26:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "638:1:18",
																		"nodeType": "YulLiteral",
																		"src": "638:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "641:4:18",
																		"nodeType": "YulLiteral",
																		"src": "641:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "628:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "628:9:18"
																},
																"nativeSrc": "628:18:18",
																"nodeType": "YulFunctionCall",
																"src": "628:18:18"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "620:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "620:4:18"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "531:121:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "570:3:18",
														"nodeType": "YulTypedName",
														"src": "570:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "578:4:18",
														"nodeType": "YulTypedName",
														"src": "578:4:18",
														"type": ""
													}
												],
												"src": "531:121:18"
											},
											{
												"body": {
													"nativeSrc": "738:437:18",
													"nodeType": "YulBlock",
													"src": "738:437:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "771:398:18",
																"nodeType": "YulBlock",
																"src": "771:398:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "792:1:18",
																					"nodeType": "YulLiteral",
																					"src": "792:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "795:5:18",
																					"nodeType": "YulIdentifier",
																					"src": "795:5:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "785:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "785:6:18"
																			},
																			"nativeSrc": "785:16:18",
																			"nodeType": "YulFunctionCall",
																			"src": "785:16:18"
																		},
																		"nativeSrc": "785:16:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "785:16:18"
																	},
																	{
																		"nativeSrc": "814:30:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "814:30:18",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "836:1:18",
																					"nodeType": "YulLiteral",
																					"src": "836:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "839:4:18",
																					"nodeType": "YulLiteral",
																					"src": "839:4:18",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "826:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "826:9:18"
																			},
																			"nativeSrc": "826:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "826:18:18"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "818:4:18",
																				"nodeType": "YulTypedName",
																				"src": "818:4:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "857:57:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "857:57:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "880:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "880:4:18"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "890:1:18",
																							"nodeType": "YulLiteral",
																							"src": "890:1:18",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "897:10:18",
																									"nodeType": "YulIdentifier",
																									"src": "897:10:18"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "909:2:18",
																									"nodeType": "YulLiteral",
																									"src": "909:2:18",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "893:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "893:3:18"
																							},
																							"nativeSrc": "893:19:18",
																							"nodeType": "YulFunctionCall",
																							"src": "893:19:18"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "886:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "886:3:18"
																					},
																					"nativeSrc": "886:27:18",
																					"nodeType": "YulFunctionCall",
																					"src": "886:27:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "876:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "876:3:18"
																			},
																			"nativeSrc": "876:38:18",
																			"nodeType": "YulFunctionCall",
																			"src": "876:38:18"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "861:11:18",
																				"nodeType": "YulTypedName",
																				"src": "861:11:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "951:23:18",
																			"nodeType": "YulBlock",
																			"src": "951:23:18",
																			"statements": [
																				{
																					"nativeSrc": "953:19:18",
																					"nodeType": "YulAssignment",
																					"src": "953:19:18",
																					"value": {
																						"name": "data",
																						"nativeSrc": "968:4:18",
																						"nodeType": "YulIdentifier",
																						"src": "968:4:18"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "953:11:18",
																							"nodeType": "YulIdentifier",
																							"src": "953:11:18"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "933:10:18",
																					"nodeType": "YulIdentifier",
																					"src": "933:10:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "945:4:18",
																					"nodeType": "YulLiteral",
																					"src": "945:4:18",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "930:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "930:2:18"
																			},
																			"nativeSrc": "930:20:18",
																			"nodeType": "YulFunctionCall",
																			"src": "930:20:18"
																		},
																		"nativeSrc": "927:47:18",
																		"nodeType": "YulIf",
																		"src": "927:47:18"
																	},
																	{
																		"nativeSrc": "987:41:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "987:41:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1001:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "1001:4:18"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1011:1:18",
																							"nodeType": "YulLiteral",
																							"src": "1011:1:18",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "1018:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "1018:3:18"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1023:2:18",
																									"nodeType": "YulLiteral",
																									"src": "1023:2:18",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1014:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "1014:3:18"
																							},
																							"nativeSrc": "1014:12:18",
																							"nodeType": "YulFunctionCall",
																							"src": "1014:12:18"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1007:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "1007:3:18"
																					},
																					"nativeSrc": "1007:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "1007:20:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "997:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "997:3:18"
																			},
																			"nativeSrc": "997:31:18",
																			"nodeType": "YulFunctionCall",
																			"src": "997:31:18"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "991:2:18",
																				"nodeType": "YulTypedName",
																				"src": "991:2:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1041:24:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1041:24:18",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "1054:11:18",
																			"nodeType": "YulIdentifier",
																			"src": "1054:11:18"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "1045:5:18",
																				"nodeType": "YulTypedName",
																				"src": "1045:5:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1139:20:18",
																			"nodeType": "YulBlock",
																			"src": "1139:20:18",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1148:5:18",
																								"nodeType": "YulIdentifier",
																								"src": "1148:5:18"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1155:1:18",
																								"nodeType": "YulLiteral",
																								"src": "1155:1:18",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "1141:6:18",
																							"nodeType": "YulIdentifier",
																							"src": "1141:6:18"
																						},
																						"nativeSrc": "1141:16:18",
																						"nodeType": "YulFunctionCall",
																						"src": "1141:16:18"
																					},
																					"nativeSrc": "1141:16:18",
																					"nodeType": "YulExpressionStatement",
																					"src": "1141:16:18"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "1089:5:18",
																					"nodeType": "YulIdentifier",
																					"src": "1089:5:18"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "1096:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "1096:2:18"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1086:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "1086:2:18"
																			},
																			"nativeSrc": "1086:13:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1086:13:18"
																		},
																		"nativeSrc": "1078:81:18",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "1100:26:18",
																			"nodeType": "YulBlock",
																			"src": "1100:26:18",
																			"statements": [
																				{
																					"nativeSrc": "1102:22:18",
																					"nodeType": "YulAssignment",
																					"src": "1102:22:18",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1115:5:18",
																								"nodeType": "YulIdentifier",
																								"src": "1115:5:18"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1122:1:18",
																								"nodeType": "YulLiteral",
																								"src": "1122:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "1111:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "1111:3:18"
																						},
																						"nativeSrc": "1111:13:18",
																						"nodeType": "YulFunctionCall",
																						"src": "1111:13:18"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "1102:5:18",
																							"nodeType": "YulIdentifier",
																							"src": "1102:5:18"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "1082:3:18",
																			"nodeType": "YulBlock",
																			"src": "1082:3:18",
																			"statements": []
																		},
																		"src": "1078:81:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "754:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "754:3:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "759:2:18",
																		"nodeType": "YulLiteral",
																		"src": "759:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "751:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "751:2:18"
																},
																"nativeSrc": "751:11:18",
																"nodeType": "YulFunctionCall",
																"src": "751:11:18"
															},
															"nativeSrc": "748:421:18",
															"nodeType": "YulIf",
															"src": "748:421:18"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "657:518:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "710:5:18",
														"nodeType": "YulTypedName",
														"src": "710:5:18",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "717:3:18",
														"nodeType": "YulTypedName",
														"src": "717:3:18",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "722:10:18",
														"nodeType": "YulTypedName",
														"src": "722:10:18",
														"type": ""
													}
												],
												"src": "657:518:18"
											},
											{
												"body": {
													"nativeSrc": "1265:81:18",
													"nodeType": "YulBlock",
													"src": "1265:81:18",
													"statements": [
														{
															"nativeSrc": "1275:65:18",
															"nodeType": "YulAssignment",
															"src": "1275:65:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "1290:4:18",
																				"nodeType": "YulIdentifier",
																				"src": "1290:4:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1308:1:18",
																										"nodeType": "YulLiteral",
																										"src": "1308:1:18",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "1311:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "1311:3:18"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1304:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "1304:3:18"
																								},
																								"nativeSrc": "1304:11:18",
																								"nodeType": "YulFunctionCall",
																								"src": "1304:11:18"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1321:1:18",
																										"nodeType": "YulLiteral",
																										"src": "1321:1:18",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "1317:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "1317:3:18"
																								},
																								"nativeSrc": "1317:6:18",
																								"nodeType": "YulFunctionCall",
																								"src": "1317:6:18"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "1300:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "1300:3:18"
																						},
																						"nativeSrc": "1300:24:18",
																						"nodeType": "YulFunctionCall",
																						"src": "1300:24:18"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "1296:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "1296:3:18"
																				},
																				"nativeSrc": "1296:29:18",
																				"nodeType": "YulFunctionCall",
																				"src": "1296:29:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1286:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1286:3:18"
																		},
																		"nativeSrc": "1286:40:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1286:40:18"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1332:1:18",
																				"nodeType": "YulLiteral",
																				"src": "1332:1:18",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "1335:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "1335:3:18"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1328:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1328:3:18"
																		},
																		"nativeSrc": "1328:11:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1328:11:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1283:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "1283:2:18"
																},
																"nativeSrc": "1283:57:18",
																"nodeType": "YulFunctionCall",
																"src": "1283:57:18"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "1275:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "1275:4:18"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "1180:166:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1242:4:18",
														"nodeType": "YulTypedName",
														"src": "1242:4:18",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1248:3:18",
														"nodeType": "YulTypedName",
														"src": "1248:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "1256:4:18",
														"nodeType": "YulTypedName",
														"src": "1256:4:18",
														"type": ""
													}
												],
												"src": "1180:166:18"
											},
											{
												"body": {
													"nativeSrc": "1447:1249:18",
													"nodeType": "YulBlock",
													"src": "1447:1249:18",
													"statements": [
														{
															"nativeSrc": "1457:24:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1457:24:18",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "1477:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "1477:3:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1471:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "1471:5:18"
																},
																"nativeSrc": "1471:10:18",
																"nodeType": "YulFunctionCall",
																"src": "1471:10:18"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "1461:6:18",
																	"nodeType": "YulTypedName",
																	"src": "1461:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1524:22:18",
																"nodeType": "YulBlock",
																"src": "1524:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1526:16:18",
																				"nodeType": "YulIdentifier",
																				"src": "1526:16:18"
																			},
																			"nativeSrc": "1526:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1526:18:18"
																		},
																		"nativeSrc": "1526:18:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "1526:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1496:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1496:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1512:2:18",
																						"nodeType": "YulLiteral",
																						"src": "1512:2:18",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1516:1:18",
																						"nodeType": "YulLiteral",
																						"src": "1516:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1508:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "1508:3:18"
																				},
																				"nativeSrc": "1508:10:18",
																				"nodeType": "YulFunctionCall",
																				"src": "1508:10:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1520:1:18",
																				"nodeType": "YulLiteral",
																				"src": "1520:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1504:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1504:3:18"
																		},
																		"nativeSrc": "1504:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1504:18:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1493:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "1493:2:18"
																},
																"nativeSrc": "1493:30:18",
																"nodeType": "YulFunctionCall",
																"src": "1493:30:18"
															},
															"nativeSrc": "1490:56:18",
															"nodeType": "YulIf",
															"src": "1490:56:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1599:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "1599:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "1637:4:18",
																						"nodeType": "YulIdentifier",
																						"src": "1637:4:18"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "1631:5:18",
																					"nodeType": "YulIdentifier",
																					"src": "1631:5:18"
																				},
																				"nativeSrc": "1631:11:18",
																				"nodeType": "YulFunctionCall",
																				"src": "1631:11:18"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "1605:25:18",
																			"nodeType": "YulIdentifier",
																			"src": "1605:25:18"
																		},
																		"nativeSrc": "1605:38:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1605:38:18"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "1645:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1645:6:18"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "1555:43:18",
																	"nodeType": "YulIdentifier",
																	"src": "1555:43:18"
																},
																"nativeSrc": "1555:97:18",
																"nodeType": "YulFunctionCall",
																"src": "1555:97:18"
															},
															"nativeSrc": "1555:97:18",
															"nodeType": "YulExpressionStatement",
															"src": "1555:97:18"
														},
														{
															"nativeSrc": "1661:18:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1661:18:18",
															"value": {
																"kind": "number",
																"nativeSrc": "1678:1:18",
																"nodeType": "YulLiteral",
																"src": "1678:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1665:9:18",
																	"nodeType": "YulTypedName",
																	"src": "1665:9:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1688:23:18",
															"nodeType": "YulVariableDeclaration",
															"src": "1688:23:18",
															"value": {
																"kind": "number",
																"nativeSrc": "1707:4:18",
																"nodeType": "YulLiteral",
																"src": "1707:4:18",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nativeSrc": "1692:11:18",
																	"nodeType": "YulTypedName",
																	"src": "1692:11:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1720:17:18",
															"nodeType": "YulAssignment",
															"src": "1720:17:18",
															"value": {
																"kind": "number",
																"nativeSrc": "1733:4:18",
																"nodeType": "YulLiteral",
																"src": "1733:4:18",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1720:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "1720:9:18"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "1783:656:18",
																		"nodeType": "YulBlock",
																		"src": "1783:656:18",
																		"statements": [
																			{
																				"nativeSrc": "1797:35:18",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1797:35:18",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "1816:6:18",
																							"nodeType": "YulIdentifier",
																							"src": "1816:6:18"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "1828:2:18",
																									"nodeType": "YulLiteral",
																									"src": "1828:2:18",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "1824:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "1824:3:18"
																							},
																							"nativeSrc": "1824:7:18",
																							"nodeType": "YulFunctionCall",
																							"src": "1824:7:18"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "1812:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "1812:3:18"
																					},
																					"nativeSrc": "1812:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "1812:20:18"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "1801:7:18",
																						"nodeType": "YulTypedName",
																						"src": "1801:7:18",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "1845:49:18",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1845:49:18",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "1889:4:18",
																							"nodeType": "YulIdentifier",
																							"src": "1889:4:18"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "1859:29:18",
																						"nodeType": "YulIdentifier",
																						"src": "1859:29:18"
																					},
																					"nativeSrc": "1859:35:18",
																					"nodeType": "YulFunctionCall",
																					"src": "1859:35:18"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "1849:6:18",
																						"nodeType": "YulTypedName",
																						"src": "1849:6:18",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "1907:10:18",
																				"nodeType": "YulVariableDeclaration",
																				"src": "1907:10:18",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "1916:1:18",
																					"nodeType": "YulLiteral",
																					"src": "1916:1:18",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "1911:1:18",
																						"nodeType": "YulTypedName",
																						"src": "1911:1:18",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "1994:172:18",
																					"nodeType": "YulBlock",
																					"src": "1994:172:18",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2019:6:18",
																										"nodeType": "YulIdentifier",
																										"src": "2019:6:18"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "2037:3:18",
																														"nodeType": "YulIdentifier",
																														"src": "2037:3:18"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "2042:9:18",
																														"nodeType": "YulIdentifier",
																														"src": "2042:9:18"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "2033:3:18",
																													"nodeType": "YulIdentifier",
																													"src": "2033:3:18"
																												},
																												"nativeSrc": "2033:19:18",
																												"nodeType": "YulFunctionCall",
																												"src": "2033:19:18"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "2027:5:18",
																											"nodeType": "YulIdentifier",
																											"src": "2027:5:18"
																										},
																										"nativeSrc": "2027:26:18",
																										"nodeType": "YulFunctionCall",
																										"src": "2027:26:18"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2012:6:18",
																									"nodeType": "YulIdentifier",
																									"src": "2012:6:18"
																								},
																								"nativeSrc": "2012:42:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2012:42:18"
																							},
																							"nativeSrc": "2012:42:18",
																							"nodeType": "YulExpressionStatement",
																							"src": "2012:42:18"
																						},
																						{
																							"nativeSrc": "2071:24:18",
																							"nodeType": "YulAssignment",
																							"src": "2071:24:18",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2085:6:18",
																										"nodeType": "YulIdentifier",
																										"src": "2085:6:18"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2093:1:18",
																										"nodeType": "YulLiteral",
																										"src": "2093:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2081:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "2081:3:18"
																								},
																								"nativeSrc": "2081:14:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2081:14:18"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "2071:6:18",
																									"nodeType": "YulIdentifier",
																									"src": "2071:6:18"
																								}
																							]
																						},
																						{
																							"nativeSrc": "2112:40:18",
																							"nodeType": "YulAssignment",
																							"src": "2112:40:18",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "2129:9:18",
																										"nodeType": "YulIdentifier",
																										"src": "2129:9:18"
																									},
																									{
																										"name": "srcOffset_1",
																										"nativeSrc": "2140:11:18",
																										"nodeType": "YulIdentifier",
																										"src": "2140:11:18"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2125:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "2125:3:18"
																								},
																								"nativeSrc": "2125:27:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2125:27:18"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2112:9:18",
																									"nodeType": "YulIdentifier",
																									"src": "2112:9:18"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "1941:1:18",
																							"nodeType": "YulIdentifier",
																							"src": "1941:1:18"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "1944:7:18",
																							"nodeType": "YulIdentifier",
																							"src": "1944:7:18"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "1938:2:18",
																						"nodeType": "YulIdentifier",
																						"src": "1938:2:18"
																					},
																					"nativeSrc": "1938:14:18",
																					"nodeType": "YulFunctionCall",
																					"src": "1938:14:18"
																				},
																				"nativeSrc": "1930:236:18",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "1953:28:18",
																					"nodeType": "YulBlock",
																					"src": "1953:28:18",
																					"statements": [
																						{
																							"nativeSrc": "1955:24:18",
																							"nodeType": "YulAssignment",
																							"src": "1955:24:18",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "1964:1:18",
																										"nodeType": "YulIdentifier",
																										"src": "1964:1:18"
																									},
																									{
																										"name": "srcOffset_1",
																										"nativeSrc": "1967:11:18",
																										"nodeType": "YulIdentifier",
																										"src": "1967:11:18"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "1960:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "1960:3:18"
																								},
																								"nativeSrc": "1960:19:18",
																								"nodeType": "YulFunctionCall",
																								"src": "1960:19:18"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "1955:1:18",
																									"nodeType": "YulIdentifier",
																									"src": "1955:1:18"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "1934:3:18",
																					"nodeType": "YulBlock",
																					"src": "1934:3:18",
																					"statements": []
																				},
																				"src": "1930:236:18"
																			},
																			{
																				"body": {
																					"nativeSrc": "2214:166:18",
																					"nodeType": "YulBlock",
																					"src": "2214:166:18",
																					"statements": [
																						{
																							"nativeSrc": "2232:43:18",
																							"nodeType": "YulVariableDeclaration",
																							"src": "2232:43:18",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2259:3:18",
																												"nodeType": "YulIdentifier",
																												"src": "2259:3:18"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2264:9:18",
																												"nodeType": "YulIdentifier",
																												"src": "2264:9:18"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2255:3:18",
																											"nodeType": "YulIdentifier",
																											"src": "2255:3:18"
																										},
																										"nativeSrc": "2255:19:18",
																										"nodeType": "YulFunctionCall",
																										"src": "2255:19:18"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2249:5:18",
																									"nodeType": "YulIdentifier",
																									"src": "2249:5:18"
																								},
																								"nativeSrc": "2249:26:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2249:26:18"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "2236:9:18",
																									"nodeType": "YulTypedName",
																									"src": "2236:9:18",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2299:6:18",
																										"nodeType": "YulIdentifier",
																										"src": "2299:6:18"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "2311:9:18",
																												"nodeType": "YulIdentifier",
																												"src": "2311:9:18"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "2338:1:18",
																																				"nodeType": "YulLiteral",
																																				"src": "2338:1:18",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "2341:6:18",
																																				"nodeType": "YulIdentifier",
																																				"src": "2341:6:18"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "2334:3:18",
																																			"nodeType": "YulIdentifier",
																																			"src": "2334:3:18"
																																		},
																																		"nativeSrc": "2334:14:18",
																																		"nodeType": "YulFunctionCall",
																																		"src": "2334:14:18"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2350:3:18",
																																		"nodeType": "YulLiteral",
																																		"src": "2350:3:18",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "2330:3:18",
																																	"nodeType": "YulIdentifier",
																																	"src": "2330:3:18"
																																},
																																"nativeSrc": "2330:24:18",
																																"nodeType": "YulFunctionCall",
																																"src": "2330:24:18"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2360:1:18",
																																		"nodeType": "YulLiteral",
																																		"src": "2360:1:18",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "2356:3:18",
																																	"nodeType": "YulIdentifier",
																																	"src": "2356:3:18"
																																},
																																"nativeSrc": "2356:6:18",
																																"nodeType": "YulFunctionCall",
																																"src": "2356:6:18"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "2326:3:18",
																															"nodeType": "YulIdentifier",
																															"src": "2326:3:18"
																														},
																														"nativeSrc": "2326:37:18",
																														"nodeType": "YulFunctionCall",
																														"src": "2326:37:18"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "2322:3:18",
																													"nodeType": "YulIdentifier",
																													"src": "2322:3:18"
																												},
																												"nativeSrc": "2322:42:18",
																												"nodeType": "YulFunctionCall",
																												"src": "2322:42:18"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "2307:3:18",
																											"nodeType": "YulIdentifier",
																											"src": "2307:3:18"
																										},
																										"nativeSrc": "2307:58:18",
																										"nodeType": "YulFunctionCall",
																										"src": "2307:58:18"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2292:6:18",
																									"nodeType": "YulIdentifier",
																									"src": "2292:6:18"
																								},
																								"nativeSrc": "2292:74:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2292:74:18"
																							},
																							"nativeSrc": "2292:74:18",
																							"nodeType": "YulExpressionStatement",
																							"src": "2292:74:18"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2185:7:18",
																							"nodeType": "YulIdentifier",
																							"src": "2185:7:18"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "2194:6:18",
																							"nodeType": "YulIdentifier",
																							"src": "2194:6:18"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2182:2:18",
																						"nodeType": "YulIdentifier",
																						"src": "2182:2:18"
																					},
																					"nativeSrc": "2182:19:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2182:19:18"
																				},
																				"nativeSrc": "2179:201:18",
																				"nodeType": "YulIf",
																				"src": "2179:201:18"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2400:4:18",
																							"nodeType": "YulIdentifier",
																							"src": "2400:4:18"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "2414:1:18",
																											"nodeType": "YulLiteral",
																											"src": "2414:1:18",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "2417:6:18",
																											"nodeType": "YulIdentifier",
																											"src": "2417:6:18"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "2410:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "2410:3:18"
																									},
																									"nativeSrc": "2410:14:18",
																									"nodeType": "YulFunctionCall",
																									"src": "2410:14:18"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2426:1:18",
																									"nodeType": "YulLiteral",
																									"src": "2426:1:18",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2406:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "2406:3:18"
																							},
																							"nativeSrc": "2406:22:18",
																							"nodeType": "YulFunctionCall",
																							"src": "2406:22:18"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2393:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "2393:6:18"
																					},
																					"nativeSrc": "2393:36:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2393:36:18"
																				},
																				"nativeSrc": "2393:36:18",
																				"nodeType": "YulExpressionStatement",
																				"src": "2393:36:18"
																			}
																		]
																	},
																	"nativeSrc": "1776:663:18",
																	"nodeType": "YulCase",
																	"src": "1776:663:18",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1781:1:18",
																		"nodeType": "YulLiteral",
																		"src": "1781:1:18",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "2456:234:18",
																		"nodeType": "YulBlock",
																		"src": "2456:234:18",
																		"statements": [
																			{
																				"nativeSrc": "2470:14:18",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2470:14:18",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2483:1:18",
																					"nodeType": "YulLiteral",
																					"src": "2483:1:18",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "2474:5:18",
																						"nodeType": "YulTypedName",
																						"src": "2474:5:18",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2519:67:18",
																					"nodeType": "YulBlock",
																					"src": "2519:67:18",
																					"statements": [
																						{
																							"nativeSrc": "2537:35:18",
																							"nodeType": "YulAssignment",
																							"src": "2537:35:18",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2556:3:18",
																												"nodeType": "YulIdentifier",
																												"src": "2556:3:18"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2561:9:18",
																												"nodeType": "YulIdentifier",
																												"src": "2561:9:18"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2552:3:18",
																											"nodeType": "YulIdentifier",
																											"src": "2552:3:18"
																										},
																										"nativeSrc": "2552:19:18",
																										"nodeType": "YulFunctionCall",
																										"src": "2552:19:18"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2546:5:18",
																									"nodeType": "YulIdentifier",
																									"src": "2546:5:18"
																								},
																								"nativeSrc": "2546:26:18",
																								"nodeType": "YulFunctionCall",
																								"src": "2546:26:18"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "2537:5:18",
																									"nodeType": "YulIdentifier",
																									"src": "2537:5:18"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "2500:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "2500:6:18"
																				},
																				"nativeSrc": "2497:89:18",
																				"nodeType": "YulIf",
																				"src": "2497:89:18"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2606:4:18",
																							"nodeType": "YulIdentifier",
																							"src": "2606:4:18"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "2665:5:18",
																									"nodeType": "YulIdentifier",
																									"src": "2665:5:18"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "2672:6:18",
																									"nodeType": "YulIdentifier",
																									"src": "2672:6:18"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "2612:52:18",
																								"nodeType": "YulIdentifier",
																								"src": "2612:52:18"
																							},
																							"nativeSrc": "2612:67:18",
																							"nodeType": "YulFunctionCall",
																							"src": "2612:67:18"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2599:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "2599:6:18"
																					},
																					"nativeSrc": "2599:81:18",
																					"nodeType": "YulFunctionCall",
																					"src": "2599:81:18"
																				},
																				"nativeSrc": "2599:81:18",
																				"nodeType": "YulExpressionStatement",
																				"src": "2599:81:18"
																			}
																		]
																	},
																	"nativeSrc": "2448:242:18",
																	"nodeType": "YulCase",
																	"src": "2448:242:18",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1756:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1756:6:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1764:2:18",
																		"nodeType": "YulLiteral",
																		"src": "1764:2:18",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1753:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "1753:2:18"
																},
																"nativeSrc": "1753:14:18",
																"nodeType": "YulFunctionCall",
																"src": "1753:14:18"
															},
															"nativeSrc": "1746:944:18",
															"nodeType": "YulSwitch",
															"src": "1746:944:18"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "1351:1345:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "1432:4:18",
														"nodeType": "YulTypedName",
														"src": "1432:4:18",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "1438:3:18",
														"nodeType": "YulTypedName",
														"src": "1438:3:18",
														"type": ""
													}
												],
												"src": "1351:1345:18"
											},
											{
												"body": {
													"nativeSrc": "2733:95:18",
													"nodeType": "YulBlock",
													"src": "2733:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2750:1:18",
																		"nodeType": "YulLiteral",
																		"src": "2750:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2757:3:18",
																				"nodeType": "YulLiteral",
																				"src": "2757:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2762:10:18",
																				"nodeType": "YulLiteral",
																				"src": "2762:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2753:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2753:3:18"
																		},
																		"nativeSrc": "2753:20:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2753:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2743:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2743:6:18"
																},
																"nativeSrc": "2743:31:18",
																"nodeType": "YulFunctionCall",
																"src": "2743:31:18"
															},
															"nativeSrc": "2743:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "2743:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2790:1:18",
																		"nodeType": "YulLiteral",
																		"src": "2790:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2793:4:18",
																		"nodeType": "YulLiteral",
																		"src": "2793:4:18",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2783:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2783:6:18"
																},
																"nativeSrc": "2783:15:18",
																"nodeType": "YulFunctionCall",
																"src": "2783:15:18"
															},
															"nativeSrc": "2783:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "2783:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2814:1:18",
																		"nodeType": "YulLiteral",
																		"src": "2814:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2817:4:18",
																		"nodeType": "YulLiteral",
																		"src": "2817:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2807:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2807:6:18"
																},
																"nativeSrc": "2807:15:18",
																"nodeType": "YulFunctionCall",
																"src": "2807:15:18"
															},
															"nativeSrc": "2807:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "2807:15:18"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "2701:127:18",
												"nodeType": "YulFunctionDefinition",
												"src": "2701:127:18"
											},
											{
												"body": {
													"nativeSrc": "2897:352:18",
													"nodeType": "YulBlock",
													"src": "2897:352:18",
													"statements": [
														{
															"nativeSrc": "2907:16:18",
															"nodeType": "YulVariableDeclaration",
															"src": "2907:16:18",
															"value": {
																"kind": "number",
																"nativeSrc": "2922:1:18",
																"nodeType": "YulLiteral",
																"src": "2922:1:18",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "2911:7:18",
																	"nodeType": "YulTypedName",
																	"src": "2911:7:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2932:10:18",
															"nodeType": "YulAssignment",
															"src": "2932:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "2941:1:18",
																"nodeType": "YulLiteral",
																"src": "2941:1:18",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "2932:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "2932:5:18"
																}
															]
														},
														{
															"nativeSrc": "2951:13:18",
															"nodeType": "YulAssignment",
															"src": "2951:13:18",
															"value": {
																"name": "_base",
																"nativeSrc": "2959:5:18",
																"nodeType": "YulIdentifier",
																"src": "2959:5:18"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "2951:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "2951:4:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3015:228:18",
																"nodeType": "YulBlock",
																"src": "3015:228:18",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "3060:22:18",
																			"nodeType": "YulBlock",
																			"src": "3060:22:18",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "3062:16:18",
																							"nodeType": "YulIdentifier",
																							"src": "3062:16:18"
																						},
																						"nativeSrc": "3062:18:18",
																						"nodeType": "YulFunctionCall",
																						"src": "3062:18:18"
																					},
																					"nativeSrc": "3062:18:18",
																					"nodeType": "YulExpressionStatement",
																					"src": "3062:18:18"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3035:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "3035:4:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "3049:1:18",
																									"nodeType": "YulLiteral",
																									"src": "3049:1:18",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "3045:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "3045:3:18"
																							},
																							"nativeSrc": "3045:6:18",
																							"nodeType": "YulFunctionCall",
																							"src": "3045:6:18"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "3053:4:18",
																							"nodeType": "YulIdentifier",
																							"src": "3053:4:18"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "3041:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "3041:3:18"
																					},
																					"nativeSrc": "3041:17:18",
																					"nodeType": "YulFunctionCall",
																					"src": "3041:17:18"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "3032:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "3032:2:18"
																			},
																			"nativeSrc": "3032:27:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3032:27:18"
																		},
																		"nativeSrc": "3029:53:18",
																		"nodeType": "YulIf",
																		"src": "3029:53:18"
																	},
																	{
																		"body": {
																			"nativeSrc": "3121:29:18",
																			"nodeType": "YulBlock",
																			"src": "3121:29:18",
																			"statements": [
																				{
																					"nativeSrc": "3123:25:18",
																					"nodeType": "YulAssignment",
																					"src": "3123:25:18",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "3136:5:18",
																								"nodeType": "YulIdentifier",
																								"src": "3136:5:18"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "3143:4:18",
																								"nodeType": "YulIdentifier",
																								"src": "3143:4:18"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "3132:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "3132:3:18"
																						},
																						"nativeSrc": "3132:16:18",
																						"nodeType": "YulFunctionCall",
																						"src": "3132:16:18"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "3123:5:18",
																							"nodeType": "YulIdentifier",
																							"src": "3123:5:18"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "3102:8:18",
																					"nodeType": "YulIdentifier",
																					"src": "3102:8:18"
																				},
																				{
																					"name": "power_1",
																					"nativeSrc": "3112:7:18",
																					"nodeType": "YulIdentifier",
																					"src": "3112:7:18"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "3098:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3098:3:18"
																			},
																			"nativeSrc": "3098:22:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3098:22:18"
																		},
																		"nativeSrc": "3095:55:18",
																		"nodeType": "YulIf",
																		"src": "3095:55:18"
																	},
																	{
																		"nativeSrc": "3163:23:18",
																		"nodeType": "YulAssignment",
																		"src": "3163:23:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3175:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "3175:4:18"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "3181:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "3181:4:18"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "3171:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3171:3:18"
																			},
																			"nativeSrc": "3171:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3171:15:18"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "3163:4:18",
																				"nodeType": "YulIdentifier",
																				"src": "3163:4:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3199:34:18",
																		"nodeType": "YulAssignment",
																		"src": "3199:34:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nativeSrc": "3215:7:18",
																					"nodeType": "YulIdentifier",
																					"src": "3215:7:18"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3224:8:18",
																					"nodeType": "YulIdentifier",
																					"src": "3224:8:18"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "3211:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3211:3:18"
																			},
																			"nativeSrc": "3211:22:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3211:22:18"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "3199:8:18",
																				"nodeType": "YulIdentifier",
																				"src": "3199:8:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "2984:8:18",
																		"nodeType": "YulIdentifier",
																		"src": "2984:8:18"
																	},
																	{
																		"name": "power_1",
																		"nativeSrc": "2994:7:18",
																		"nodeType": "YulIdentifier",
																		"src": "2994:7:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2981:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "2981:2:18"
																},
																"nativeSrc": "2981:21:18",
																"nodeType": "YulFunctionCall",
																"src": "2981:21:18"
															},
															"nativeSrc": "2973:270:18",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3003:3:18",
																"nodeType": "YulBlock",
																"src": "3003:3:18",
																"statements": []
															},
															"pre": {
																"nativeSrc": "2977:3:18",
																"nodeType": "YulBlock",
																"src": "2977:3:18",
																"statements": []
															},
															"src": "2973:270:18"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "2833:416:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "2861:5:18",
														"nodeType": "YulTypedName",
														"src": "2861:5:18",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "2868:8:18",
														"nodeType": "YulTypedName",
														"src": "2868:8:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "2881:5:18",
														"nodeType": "YulTypedName",
														"src": "2881:5:18",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "2888:4:18",
														"nodeType": "YulTypedName",
														"src": "2888:4:18",
														"type": ""
													}
												],
												"src": "2833:416:18"
											},
											{
												"body": {
													"nativeSrc": "3313:747:18",
													"nodeType": "YulBlock",
													"src": "3313:747:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "3351:52:18",
																"nodeType": "YulBlock",
																"src": "3351:52:18",
																"statements": [
																	{
																		"nativeSrc": "3365:10:18",
																		"nodeType": "YulAssignment",
																		"src": "3365:10:18",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3374:1:18",
																			"nodeType": "YulLiteral",
																			"src": "3374:1:18",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3365:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "3365:5:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3388:5:18",
																		"nodeType": "YulLeave",
																		"src": "3388:5:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3333:8:18",
																		"nodeType": "YulIdentifier",
																		"src": "3333:8:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3326:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3326:6:18"
																},
																"nativeSrc": "3326:16:18",
																"nodeType": "YulFunctionCall",
																"src": "3326:16:18"
															},
															"nativeSrc": "3323:80:18",
															"nodeType": "YulIf",
															"src": "3323:80:18"
														},
														{
															"body": {
																"nativeSrc": "3436:52:18",
																"nodeType": "YulBlock",
																"src": "3436:52:18",
																"statements": [
																	{
																		"nativeSrc": "3450:10:18",
																		"nodeType": "YulAssignment",
																		"src": "3450:10:18",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3459:1:18",
																			"nodeType": "YulLiteral",
																			"src": "3459:1:18",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3450:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "3450:5:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3473:5:18",
																		"nodeType": "YulLeave",
																		"src": "3473:5:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3422:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "3422:4:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3415:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3415:6:18"
																},
																"nativeSrc": "3415:12:18",
																"nodeType": "YulFunctionCall",
																"src": "3415:12:18"
															},
															"nativeSrc": "3412:76:18",
															"nodeType": "YulIf",
															"src": "3412:76:18"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3524:52:18",
																		"nodeType": "YulBlock",
																		"src": "3524:52:18",
																		"statements": [
																			{
																				"nativeSrc": "3538:10:18",
																				"nodeType": "YulAssignment",
																				"src": "3538:10:18",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3547:1:18",
																					"nodeType": "YulLiteral",
																					"src": "3547:1:18",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3538:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "3538:5:18"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3561:5:18",
																				"nodeType": "YulLeave",
																				"src": "3561:5:18"
																			}
																		]
																	},
																	"nativeSrc": "3517:59:18",
																	"nodeType": "YulCase",
																	"src": "3517:59:18",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3522:1:18",
																		"nodeType": "YulLiteral",
																		"src": "3522:1:18",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "3592:123:18",
																		"nodeType": "YulBlock",
																		"src": "3592:123:18",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "3627:22:18",
																					"nodeType": "YulBlock",
																					"src": "3627:22:18",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "3629:16:18",
																									"nodeType": "YulIdentifier",
																									"src": "3629:16:18"
																								},
																								"nativeSrc": "3629:18:18",
																								"nodeType": "YulFunctionCall",
																								"src": "3629:18:18"
																							},
																							"nativeSrc": "3629:18:18",
																							"nodeType": "YulExpressionStatement",
																							"src": "3629:18:18"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "3612:8:18",
																							"nodeType": "YulIdentifier",
																							"src": "3612:8:18"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3622:3:18",
																							"nodeType": "YulLiteral",
																							"src": "3622:3:18",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "3609:2:18",
																						"nodeType": "YulIdentifier",
																						"src": "3609:2:18"
																					},
																					"nativeSrc": "3609:17:18",
																					"nodeType": "YulFunctionCall",
																					"src": "3609:17:18"
																				},
																				"nativeSrc": "3606:43:18",
																				"nodeType": "YulIf",
																				"src": "3606:43:18"
																			},
																			{
																				"nativeSrc": "3662:25:18",
																				"nodeType": "YulAssignment",
																				"src": "3662:25:18",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "3675:8:18",
																							"nodeType": "YulIdentifier",
																							"src": "3675:8:18"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3685:1:18",
																							"nodeType": "YulLiteral",
																							"src": "3685:1:18",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3671:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "3671:3:18"
																					},
																					"nativeSrc": "3671:16:18",
																					"nodeType": "YulFunctionCall",
																					"src": "3671:16:18"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3662:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "3662:5:18"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3700:5:18",
																				"nodeType": "YulLeave",
																				"src": "3700:5:18"
																			}
																		]
																	},
																	"nativeSrc": "3585:130:18",
																	"nodeType": "YulCase",
																	"src": "3585:130:18",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3590:1:18",
																		"nodeType": "YulLiteral",
																		"src": "3590:1:18",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "3504:4:18",
																"nodeType": "YulIdentifier",
																"src": "3504:4:18"
															},
															"nativeSrc": "3497:218:18",
															"nodeType": "YulSwitch",
															"src": "3497:218:18"
														},
														{
															"body": {
																"nativeSrc": "3813:70:18",
																"nodeType": "YulBlock",
																"src": "3813:70:18",
																"statements": [
																	{
																		"nativeSrc": "3827:28:18",
																		"nodeType": "YulAssignment",
																		"src": "3827:28:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3840:4:18",
																					"nodeType": "YulIdentifier",
																					"src": "3840:4:18"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3846:8:18",
																					"nodeType": "YulIdentifier",
																					"src": "3846:8:18"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "3836:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3836:3:18"
																			},
																			"nativeSrc": "3836:19:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3836:19:18"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3827:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "3827:5:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3868:5:18",
																		"nodeType": "YulLeave",
																		"src": "3868:5:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3737:4:18",
																						"nodeType": "YulIdentifier",
																						"src": "3737:4:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3743:2:18",
																						"nodeType": "YulLiteral",
																						"src": "3743:2:18",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3734:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3734:2:18"
																				},
																				"nativeSrc": "3734:12:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3734:12:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3751:8:18",
																						"nodeType": "YulIdentifier",
																						"src": "3751:8:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3761:2:18",
																						"nodeType": "YulLiteral",
																						"src": "3761:2:18",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3748:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3748:2:18"
																				},
																				"nativeSrc": "3748:16:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3748:16:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3730:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3730:3:18"
																		},
																		"nativeSrc": "3730:35:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3730:35:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "3774:4:18",
																						"nodeType": "YulIdentifier",
																						"src": "3774:4:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3780:3:18",
																						"nodeType": "YulLiteral",
																						"src": "3780:3:18",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3771:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3771:2:18"
																				},
																				"nativeSrc": "3771:13:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3771:13:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "3789:8:18",
																						"nodeType": "YulIdentifier",
																						"src": "3789:8:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3799:2:18",
																						"nodeType": "YulLiteral",
																						"src": "3799:2:18",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3786:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3786:2:18"
																				},
																				"nativeSrc": "3786:16:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3786:16:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3767:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3767:3:18"
																		},
																		"nativeSrc": "3767:36:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3767:36:18"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "3727:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "3727:2:18"
																},
																"nativeSrc": "3727:77:18",
																"nodeType": "YulFunctionCall",
																"src": "3727:77:18"
															},
															"nativeSrc": "3724:159:18",
															"nodeType": "YulIf",
															"src": "3724:159:18"
														},
														{
															"nativeSrc": "3892:57:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3892:57:18",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3934:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "3934:4:18"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "3940:8:18",
																		"nodeType": "YulIdentifier",
																		"src": "3940:8:18"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "3915:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "3915:18:18"
																},
																"nativeSrc": "3915:34:18",
																"nodeType": "YulFunctionCall",
																"src": "3915:34:18"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "3896:7:18",
																	"nodeType": "YulTypedName",
																	"src": "3896:7:18",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "3905:6:18",
																	"nodeType": "YulTypedName",
																	"src": "3905:6:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3994:22:18",
																"nodeType": "YulBlock",
																"src": "3994:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3996:16:18",
																				"nodeType": "YulIdentifier",
																				"src": "3996:16:18"
																			},
																			"nativeSrc": "3996:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3996:18:18"
																		},
																		"nativeSrc": "3996:18:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "3996:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "3964:7:18",
																		"nodeType": "YulIdentifier",
																		"src": "3964:7:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3981:1:18",
																						"nodeType": "YulLiteral",
																						"src": "3981:1:18",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "3977:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "3977:3:18"
																				},
																				"nativeSrc": "3977:6:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3977:6:18"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "3985:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3985:6:18"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "3973:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3973:3:18"
																		},
																		"nativeSrc": "3973:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3973:19:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3961:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "3961:2:18"
																},
																"nativeSrc": "3961:32:18",
																"nodeType": "YulFunctionCall",
																"src": "3961:32:18"
															},
															"nativeSrc": "3958:58:18",
															"nodeType": "YulIf",
															"src": "3958:58:18"
														},
														{
															"nativeSrc": "4025:29:18",
															"nodeType": "YulAssignment",
															"src": "4025:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4038:7:18",
																		"nodeType": "YulIdentifier",
																		"src": "4038:7:18"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "4047:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "4047:6:18"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4034:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4034:3:18"
																},
																"nativeSrc": "4034:20:18",
																"nodeType": "YulFunctionCall",
																"src": "4034:20:18"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4025:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "4025:5:18"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "3254:806:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "3284:4:18",
														"nodeType": "YulTypedName",
														"src": "3284:4:18",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3290:8:18",
														"nodeType": "YulTypedName",
														"src": "3290:8:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3303:5:18",
														"nodeType": "YulTypedName",
														"src": "3303:5:18",
														"type": ""
													}
												],
												"src": "3254:806:18"
											},
											{
												"body": {
													"nativeSrc": "4133:72:18",
													"nodeType": "YulBlock",
													"src": "4133:72:18",
													"statements": [
														{
															"nativeSrc": "4143:56:18",
															"nodeType": "YulAssignment",
															"src": "4143:56:18",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4173:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "4173:4:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "4183:8:18",
																				"nodeType": "YulIdentifier",
																				"src": "4183:8:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4193:4:18",
																				"nodeType": "YulLiteral",
																				"src": "4193:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4179:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4179:3:18"
																		},
																		"nativeSrc": "4179:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4179:19:18"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "4152:20:18",
																	"nodeType": "YulIdentifier",
																	"src": "4152:20:18"
																},
																"nativeSrc": "4152:47:18",
																"nodeType": "YulFunctionCall",
																"src": "4152:47:18"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4143:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "4143:5:18"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "4065:140:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "4104:4:18",
														"nodeType": "YulTypedName",
														"src": "4104:4:18",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4110:8:18",
														"nodeType": "YulTypedName",
														"src": "4110:8:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4123:5:18",
														"nodeType": "YulTypedName",
														"src": "4123:5:18",
														"type": ""
													}
												],
												"src": "4065:140:18"
											},
											{
												"body": {
													"nativeSrc": "4262:116:18",
													"nodeType": "YulBlock",
													"src": "4262:116:18",
													"statements": [
														{
															"nativeSrc": "4272:20:18",
															"nodeType": "YulAssignment",
															"src": "4272:20:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4287:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "4287:1:18"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4290:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "4290:1:18"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4283:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4283:3:18"
																},
																"nativeSrc": "4283:9:18",
																"nodeType": "YulFunctionCall",
																"src": "4283:9:18"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4272:7:18",
																	"nodeType": "YulIdentifier",
																	"src": "4272:7:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4350:22:18",
																"nodeType": "YulBlock",
																"src": "4350:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4352:16:18",
																				"nodeType": "YulIdentifier",
																				"src": "4352:16:18"
																			},
																			"nativeSrc": "4352:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4352:18:18"
																		},
																		"nativeSrc": "4352:18:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4352:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4321:1:18",
																						"nodeType": "YulIdentifier",
																						"src": "4321:1:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4314:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "4314:6:18"
																				},
																				"nativeSrc": "4314:9:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4314:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4328:1:18",
																						"nodeType": "YulIdentifier",
																						"src": "4328:1:18"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4335:7:18",
																								"nodeType": "YulIdentifier",
																								"src": "4335:7:18"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4344:1:18",
																								"nodeType": "YulIdentifier",
																								"src": "4344:1:18"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4331:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "4331:3:18"
																						},
																						"nativeSrc": "4331:15:18",
																						"nodeType": "YulFunctionCall",
																						"src": "4331:15:18"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4325:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "4325:2:18"
																				},
																				"nativeSrc": "4325:22:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4325:22:18"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4311:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "4311:2:18"
																		},
																		"nativeSrc": "4311:37:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4311:37:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4304:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4304:6:18"
																},
																"nativeSrc": "4304:45:18",
																"nodeType": "YulFunctionCall",
																"src": "4304:45:18"
															},
															"nativeSrc": "4301:71:18",
															"nodeType": "YulIf",
															"src": "4301:71:18"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4210:168:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4241:1:18",
														"nodeType": "YulTypedName",
														"src": "4241:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4244:1:18",
														"nodeType": "YulTypedName",
														"src": "4244:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4250:7:18",
														"nodeType": "YulTypedName",
														"src": "4250:7:18",
														"type": ""
													}
												],
												"src": "4210:168:18"
											},
											{
												"body": {
													"nativeSrc": "4596:276:18",
													"nodeType": "YulBlock",
													"src": "4596:276:18",
													"statements": [
														{
															"nativeSrc": "4606:27:18",
															"nodeType": "YulAssignment",
															"src": "4606:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4618:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "4618:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4629:3:18",
																		"nodeType": "YulLiteral",
																		"src": "4629:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4614:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4614:3:18"
																},
																"nativeSrc": "4614:19:18",
																"nodeType": "YulFunctionCall",
																"src": "4614:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4606:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "4606:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4649:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "4649:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "4660:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "4660:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4642:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4642:6:18"
																},
																"nativeSrc": "4642:25:18",
																"nodeType": "YulFunctionCall",
																"src": "4642:25:18"
															},
															"nativeSrc": "4642:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "4642:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4687:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4687:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4698:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4698:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4683:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4683:3:18"
																		},
																		"nativeSrc": "4683:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4683:18:18"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "4703:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "4703:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4676:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4676:6:18"
																},
																"nativeSrc": "4676:34:18",
																"nodeType": "YulFunctionCall",
																"src": "4676:34:18"
															},
															"nativeSrc": "4676:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "4676:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4730:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4730:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4741:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4741:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4726:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4726:3:18"
																		},
																		"nativeSrc": "4726:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4726:18:18"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "4746:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "4746:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4719:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4719:6:18"
																},
																"nativeSrc": "4719:34:18",
																"nodeType": "YulFunctionCall",
																"src": "4719:34:18"
															},
															"nativeSrc": "4719:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "4719:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4773:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4773:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4784:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4784:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4769:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4769:3:18"
																		},
																		"nativeSrc": "4769:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4769:18:18"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "4789:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "4789:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4762:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4762:6:18"
																},
																"nativeSrc": "4762:34:18",
																"nodeType": "YulFunctionCall",
																"src": "4762:34:18"
															},
															"nativeSrc": "4762:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "4762:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4816:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4816:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4827:3:18",
																				"nodeType": "YulLiteral",
																				"src": "4827:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4812:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4812:3:18"
																		},
																		"nativeSrc": "4812:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4812:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "4837:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4837:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4853:3:18",
																								"nodeType": "YulLiteral",
																								"src": "4853:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4858:1:18",
																								"nodeType": "YulLiteral",
																								"src": "4858:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "4849:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "4849:3:18"
																						},
																						"nativeSrc": "4849:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "4849:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4862:1:18",
																						"nodeType": "YulLiteral",
																						"src": "4862:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4845:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "4845:3:18"
																				},
																				"nativeSrc": "4845:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4845:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4833:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4833:3:18"
																		},
																		"nativeSrc": "4833:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4833:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4805:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4805:6:18"
																},
																"nativeSrc": "4805:61:18",
																"nodeType": "YulFunctionCall",
																"src": "4805:61:18"
															},
															"nativeSrc": "4805:61:18",
															"nodeType": "YulExpressionStatement",
															"src": "4805:61:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "4383:489:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4533:9:18",
														"nodeType": "YulTypedName",
														"src": "4533:9:18",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4544:6:18",
														"nodeType": "YulTypedName",
														"src": "4544:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4552:6:18",
														"nodeType": "YulTypedName",
														"src": "4552:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4560:6:18",
														"nodeType": "YulTypedName",
														"src": "4560:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4568:6:18",
														"nodeType": "YulTypedName",
														"src": "4568:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4576:6:18",
														"nodeType": "YulTypedName",
														"src": "4576:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4587:4:18",
														"nodeType": "YulTypedName",
														"src": "4587:4:18",
														"type": ""
													}
												],
												"src": "4383:489:18"
											},
											{
												"body": {
													"nativeSrc": "4978:102:18",
													"nodeType": "YulBlock",
													"src": "4978:102:18",
													"statements": [
														{
															"nativeSrc": "4988:26:18",
															"nodeType": "YulAssignment",
															"src": "4988:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5000:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5000:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5011:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5011:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4996:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4996:3:18"
																},
																"nativeSrc": "4996:18:18",
																"nodeType": "YulFunctionCall",
																"src": "4996:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4988:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5030:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5030:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5045:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "5045:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5061:3:18",
																								"nodeType": "YulLiteral",
																								"src": "5061:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5066:1:18",
																								"nodeType": "YulLiteral",
																								"src": "5066:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5057:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "5057:3:18"
																						},
																						"nativeSrc": "5057:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "5057:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5070:1:18",
																						"nodeType": "YulLiteral",
																						"src": "5070:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5053:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "5053:3:18"
																				},
																				"nativeSrc": "5053:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5053:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5041:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5041:3:18"
																		},
																		"nativeSrc": "5041:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5041:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5023:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5023:6:18"
																},
																"nativeSrc": "5023:51:18",
																"nodeType": "YulFunctionCall",
																"src": "5023:51:18"
															},
															"nativeSrc": "5023:51:18",
															"nodeType": "YulExpressionStatement",
															"src": "5023:51:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "4877:203:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4947:9:18",
														"nodeType": "YulTypedName",
														"src": "4947:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4958:6:18",
														"nodeType": "YulTypedName",
														"src": "4958:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4969:4:18",
														"nodeType": "YulTypedName",
														"src": "4969:4:18",
														"type": ""
													}
												],
												"src": "4877:203:18"
											},
											{
												"body": {
													"nativeSrc": "5206:427:18",
													"nodeType": "YulBlock",
													"src": "5206:427:18",
													"statements": [
														{
															"nativeSrc": "5216:12:18",
															"nodeType": "YulVariableDeclaration",
															"src": "5216:12:18",
															"value": {
																"kind": "number",
																"nativeSrc": "5226:2:18",
																"nodeType": "YulLiteral",
																"src": "5226:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "5220:2:18",
																	"nodeType": "YulTypedName",
																	"src": "5220:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5244:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5244:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5255:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5255:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5237:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5237:6:18"
																},
																"nativeSrc": "5237:21:18",
																"nodeType": "YulFunctionCall",
																"src": "5237:21:18"
															},
															"nativeSrc": "5237:21:18",
															"nodeType": "YulExpressionStatement",
															"src": "5237:21:18"
														},
														{
															"nativeSrc": "5267:27:18",
															"nodeType": "YulVariableDeclaration",
															"src": "5267:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5287:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "5287:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5281:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "5281:5:18"
																},
																"nativeSrc": "5281:13:18",
																"nodeType": "YulFunctionCall",
																"src": "5281:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5271:6:18",
																	"nodeType": "YulTypedName",
																	"src": "5271:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5314:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5314:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5325:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5325:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5310:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5310:3:18"
																		},
																		"nativeSrc": "5310:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5310:18:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5330:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "5330:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5303:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5303:6:18"
																},
																"nativeSrc": "5303:34:18",
																"nodeType": "YulFunctionCall",
																"src": "5303:34:18"
															},
															"nativeSrc": "5303:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "5303:34:18"
														},
														{
															"nativeSrc": "5346:10:18",
															"nodeType": "YulVariableDeclaration",
															"src": "5346:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "5355:1:18",
																"nodeType": "YulLiteral",
																"src": "5355:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "5350:1:18",
																	"nodeType": "YulTypedName",
																	"src": "5350:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5415:90:18",
																"nodeType": "YulBlock",
																"src": "5415:90:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nativeSrc": "5444:9:18",
																									"nodeType": "YulIdentifier",
																									"src": "5444:9:18"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "5455:1:18",
																									"nodeType": "YulIdentifier",
																									"src": "5455:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "5440:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "5440:3:18"
																							},
																							"nativeSrc": "5440:17:18",
																							"nodeType": "YulFunctionCall",
																							"src": "5440:17:18"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5459:2:18",
																							"nodeType": "YulLiteral",
																							"src": "5459:2:18",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "5436:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "5436:3:18"
																					},
																					"nativeSrc": "5436:26:18",
																					"nodeType": "YulFunctionCall",
																					"src": "5436:26:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nativeSrc": "5478:6:18",
																											"nodeType": "YulIdentifier",
																											"src": "5478:6:18"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "5486:1:18",
																											"nodeType": "YulIdentifier",
																											"src": "5486:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "5474:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "5474:3:18"
																									},
																									"nativeSrc": "5474:14:18",
																									"nodeType": "YulFunctionCall",
																									"src": "5474:14:18"
																								},
																								{
																									"name": "_1",
																									"nativeSrc": "5490:2:18",
																									"nodeType": "YulIdentifier",
																									"src": "5490:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "5470:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "5470:3:18"
																							},
																							"nativeSrc": "5470:23:18",
																							"nodeType": "YulFunctionCall",
																							"src": "5470:23:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "5464:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "5464:5:18"
																					},
																					"nativeSrc": "5464:30:18",
																					"nodeType": "YulFunctionCall",
																					"src": "5464:30:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5429:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "5429:6:18"
																			},
																			"nativeSrc": "5429:66:18",
																			"nodeType": "YulFunctionCall",
																			"src": "5429:66:18"
																		},
																		"nativeSrc": "5429:66:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "5429:66:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "5376:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "5376:1:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5379:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "5379:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5373:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "5373:2:18"
																},
																"nativeSrc": "5373:13:18",
																"nodeType": "YulFunctionCall",
																"src": "5373:13:18"
															},
															"nativeSrc": "5365:140:18",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "5387:19:18",
																"nodeType": "YulBlock",
																"src": "5387:19:18",
																"statements": [
																	{
																		"nativeSrc": "5389:15:18",
																		"nodeType": "YulAssignment",
																		"src": "5389:15:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "5398:1:18",
																					"nodeType": "YulIdentifier",
																					"src": "5398:1:18"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "5401:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "5401:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5394:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "5394:3:18"
																			},
																			"nativeSrc": "5394:10:18",
																			"nodeType": "YulFunctionCall",
																			"src": "5394:10:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "5389:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "5389:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "5369:3:18",
																"nodeType": "YulBlock",
																"src": "5369:3:18",
																"statements": []
															},
															"src": "5365:140:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5529:9:18",
																						"nodeType": "YulIdentifier",
																						"src": "5529:9:18"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "5540:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "5540:6:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5525:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "5525:3:18"
																				},
																				"nativeSrc": "5525:22:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5525:22:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5549:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5549:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5521:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5521:3:18"
																		},
																		"nativeSrc": "5521:31:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5521:31:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5554:1:18",
																		"nodeType": "YulLiteral",
																		"src": "5554:1:18",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5514:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5514:6:18"
																},
																"nativeSrc": "5514:42:18",
																"nodeType": "YulFunctionCall",
																"src": "5514:42:18"
															},
															"nativeSrc": "5514:42:18",
															"nodeType": "YulExpressionStatement",
															"src": "5514:42:18"
														},
														{
															"nativeSrc": "5565:62:18",
															"nodeType": "YulAssignment",
															"src": "5565:62:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5581:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5581:9:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "5600:6:18",
																								"nodeType": "YulIdentifier",
																								"src": "5600:6:18"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5608:2:18",
																								"nodeType": "YulLiteral",
																								"src": "5608:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "5596:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "5596:3:18"
																						},
																						"nativeSrc": "5596:15:18",
																						"nodeType": "YulFunctionCall",
																						"src": "5596:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5617:2:18",
																								"nodeType": "YulLiteral",
																								"src": "5617:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "5613:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "5613:3:18"
																						},
																						"nativeSrc": "5613:7:18",
																						"nodeType": "YulFunctionCall",
																						"src": "5613:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "5592:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "5592:3:18"
																				},
																				"nativeSrc": "5592:29:18",
																				"nodeType": "YulFunctionCall",
																				"src": "5592:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5577:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5577:3:18"
																		},
																		"nativeSrc": "5577:45:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5577:45:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5624:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5624:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5573:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5573:3:18"
																},
																"nativeSrc": "5573:54:18",
																"nodeType": "YulFunctionCall",
																"src": "5573:54:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5565:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "5565:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5085:548:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5175:9:18",
														"nodeType": "YulTypedName",
														"src": "5175:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5186:6:18",
														"nodeType": "YulTypedName",
														"src": "5186:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5197:4:18",
														"nodeType": "YulTypedName",
														"src": "5197:4:18",
														"type": ""
													}
												],
												"src": "5085:548:18"
											},
											{
												"body": {
													"nativeSrc": "5732:203:18",
													"nodeType": "YulBlock",
													"src": "5732:203:18",
													"statements": [
														{
															"nativeSrc": "5742:26:18",
															"nodeType": "YulVariableDeclaration",
															"src": "5742:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "5762:5:18",
																		"nodeType": "YulIdentifier",
																		"src": "5762:5:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5756:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "5756:5:18"
																},
																"nativeSrc": "5756:12:18",
																"nodeType": "YulFunctionCall",
																"src": "5756:12:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5746:6:18",
																	"nodeType": "YulTypedName",
																	"src": "5746:6:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5777:32:18",
															"nodeType": "YulAssignment",
															"src": "5777:32:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nativeSrc": "5796:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "5796:5:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5803:4:18",
																				"nodeType": "YulLiteral",
																				"src": "5803:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5792:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5792:3:18"
																		},
																		"nativeSrc": "5792:16:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5792:16:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5786:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "5786:5:18"
																},
																"nativeSrc": "5786:23:18",
																"nodeType": "YulFunctionCall",
																"src": "5786:23:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5777:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "5777:5:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5846:83:18",
																"nodeType": "YulBlock",
																"src": "5846:83:18",
																"statements": [
																	{
																		"nativeSrc": "5860:59:18",
																		"nodeType": "YulAssignment",
																		"src": "5860:59:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "5873:5:18",
																					"nodeType": "YulIdentifier",
																					"src": "5873:5:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5888:1:18",
																									"nodeType": "YulLiteral",
																									"src": "5888:1:18",
																									"type": "",
																									"value": "3"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "5895:4:18",
																											"nodeType": "YulLiteral",
																											"src": "5895:4:18",
																											"type": "",
																											"value": "0x20"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "5901:6:18",
																											"nodeType": "YulIdentifier",
																											"src": "5901:6:18"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "5891:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "5891:3:18"
																									},
																									"nativeSrc": "5891:17:18",
																									"nodeType": "YulFunctionCall",
																									"src": "5891:17:18"
																								}
																							],
																							"functionName": {
																								"name": "shl",
																								"nativeSrc": "5884:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "5884:3:18"
																							},
																							"nativeSrc": "5884:25:18",
																							"nodeType": "YulFunctionCall",
																							"src": "5884:25:18"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5915:1:18",
																									"nodeType": "YulLiteral",
																									"src": "5915:1:18",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5911:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "5911:3:18"
																							},
																							"nativeSrc": "5911:6:18",
																							"nodeType": "YulFunctionCall",
																							"src": "5911:6:18"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5880:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "5880:3:18"
																					},
																					"nativeSrc": "5880:38:18",
																					"nodeType": "YulFunctionCall",
																					"src": "5880:38:18"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5869:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "5869:3:18"
																			},
																			"nativeSrc": "5869:50:18",
																			"nodeType": "YulFunctionCall",
																			"src": "5869:50:18"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "5860:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "5860:5:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "5824:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "5824:6:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5832:4:18",
																		"nodeType": "YulLiteral",
																		"src": "5832:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5821:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "5821:2:18"
																},
																"nativeSrc": "5821:16:18",
																"nodeType": "YulFunctionCall",
																"src": "5821:16:18"
															},
															"nativeSrc": "5818:111:18",
															"nodeType": "YulIf",
															"src": "5818:111:18"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "5638:297:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "5712:5:18",
														"nodeType": "YulTypedName",
														"src": "5712:5:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "5722:5:18",
														"nodeType": "YulTypedName",
														"src": "5722:5:18",
														"type": ""
													}
												],
												"src": "5638:297:18"
											},
											{
												"body": {
													"nativeSrc": "5988:77:18",
													"nodeType": "YulBlock",
													"src": "5988:77:18",
													"statements": [
														{
															"nativeSrc": "5998:16:18",
															"nodeType": "YulAssignment",
															"src": "5998:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6009:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "6009:1:18"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6012:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "6012:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6005:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6005:3:18"
																},
																"nativeSrc": "6005:9:18",
																"nodeType": "YulFunctionCall",
																"src": "6005:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "5998:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5998:3:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6037:22:18",
																"nodeType": "YulBlock",
																"src": "6037:22:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6039:16:18",
																				"nodeType": "YulIdentifier",
																				"src": "6039:16:18"
																			},
																			"nativeSrc": "6039:18:18",
																			"nodeType": "YulFunctionCall",
																			"src": "6039:18:18"
																		},
																		"nativeSrc": "6039:18:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "6039:18:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6029:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "6029:1:18"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6032:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "6032:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6026:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "6026:2:18"
																},
																"nativeSrc": "6026:10:18",
																"nodeType": "YulFunctionCall",
																"src": "6026:10:18"
															},
															"nativeSrc": "6023:36:18",
															"nodeType": "YulIf",
															"src": "6023:36:18"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "5940:125:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "5971:1:18",
														"nodeType": "YulTypedName",
														"src": "5971:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "5974:1:18",
														"nodeType": "YulTypedName",
														"src": "5974:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "5980:3:18",
														"nodeType": "YulTypedName",
														"src": "5980:3:18",
														"type": ""
													}
												],
												"src": "5940:125:18"
											},
											{
												"body": {
													"nativeSrc": "6227:188:18",
													"nodeType": "YulBlock",
													"src": "6227:188:18",
													"statements": [
														{
															"nativeSrc": "6237:26:18",
															"nodeType": "YulAssignment",
															"src": "6237:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6249:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6249:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6260:2:18",
																		"nodeType": "YulLiteral",
																		"src": "6260:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6245:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6245:3:18"
																},
																"nativeSrc": "6245:18:18",
																"nodeType": "YulFunctionCall",
																"src": "6245:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6237:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "6237:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6279:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6279:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6294:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "6294:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6310:3:18",
																								"nodeType": "YulLiteral",
																								"src": "6310:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6315:1:18",
																								"nodeType": "YulLiteral",
																								"src": "6315:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6306:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "6306:3:18"
																						},
																						"nativeSrc": "6306:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "6306:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6319:1:18",
																						"nodeType": "YulLiteral",
																						"src": "6319:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6302:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "6302:3:18"
																				},
																				"nativeSrc": "6302:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "6302:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6290:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6290:3:18"
																		},
																		"nativeSrc": "6290:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6290:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6272:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6272:6:18"
																},
																"nativeSrc": "6272:51:18",
																"nodeType": "YulFunctionCall",
																"src": "6272:51:18"
															},
															"nativeSrc": "6272:51:18",
															"nodeType": "YulExpressionStatement",
															"src": "6272:51:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6343:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6343:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6354:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6339:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6339:3:18"
																		},
																		"nativeSrc": "6339:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6339:18:18"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6359:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6359:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6332:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6332:6:18"
																},
																"nativeSrc": "6332:34:18",
																"nodeType": "YulFunctionCall",
																"src": "6332:34:18"
															},
															"nativeSrc": "6332:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "6332:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6386:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6386:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6397:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6397:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6382:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6382:3:18"
																		},
																		"nativeSrc": "6382:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6382:18:18"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6402:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6402:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6375:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6375:6:18"
																},
																"nativeSrc": "6375:34:18",
																"nodeType": "YulFunctionCall",
																"src": "6375:34:18"
															},
															"nativeSrc": "6375:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "6375:34:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6070:345:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6180:9:18",
														"nodeType": "YulTypedName",
														"src": "6180:9:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6191:6:18",
														"nodeType": "YulTypedName",
														"src": "6191:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6199:6:18",
														"nodeType": "YulTypedName",
														"src": "6199:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6207:6:18",
														"nodeType": "YulTypedName",
														"src": "6207:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6218:4:18",
														"nodeType": "YulTypedName",
														"src": "6218:4:18",
														"type": ""
													}
												],
												"src": "6070:345:18"
											},
											{
												"body": {
													"nativeSrc": "6521:76:18",
													"nodeType": "YulBlock",
													"src": "6521:76:18",
													"statements": [
														{
															"nativeSrc": "6531:26:18",
															"nodeType": "YulAssignment",
															"src": "6531:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6543:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6543:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6554:2:18",
																		"nodeType": "YulLiteral",
																		"src": "6554:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6539:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6539:3:18"
																},
																"nativeSrc": "6539:18:18",
																"nodeType": "YulFunctionCall",
																"src": "6539:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6531:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "6531:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6573:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6573:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6584:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6584:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6566:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6566:6:18"
																},
																"nativeSrc": "6566:25:18",
																"nodeType": "YulFunctionCall",
																"src": "6566:25:18"
															},
															"nativeSrc": "6566:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "6566:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "6420:177:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6490:9:18",
														"nodeType": "YulTypedName",
														"src": "6490:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6501:6:18",
														"nodeType": "YulTypedName",
														"src": "6501:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6512:4:18",
														"nodeType": "YulTypedName",
														"src": "6512:4:18",
														"type": ""
													}
												],
												"src": "6420:177:18"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "61016060405234801562000011575f80fd5b50604051806040016040528060058152602001641dd554d11560da1b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600c81526020016b15da5b8b55da5b881554d11560a21b815250604051806040016040528060058152602001641dd554d11560da1b81525081600390816200009f919062000430565b506004620000ae828262000430565b50620000c091508390506005620001a9565b61012052620000d1816006620001a9565b61014052815160208084019190912060e052815190820120610100524660a0526200015e60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000191336200017b6012600a62000609565b6200018b906305f5e10062000620565b620001e1565b600980546001600160a01b03191633179055620006c2565b5f602083511015620001c857620001c08362000221565b9050620001db565b81620001d5848262000430565b5060ff90505b92915050565b6001600160a01b038216620002105760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6200021d5f838362000263565b5050565b5f80829050601f815111156200024e578260405163305a27a960e01b81526004016200020791906200063a565b80516200025b8262000688565b179392505050565b6001600160a01b03831662000291578060025f828254620002859190620006ac565b90915550620003039050565b6001600160a01b0383165f9081526020819052604090205481811015620002e55760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000207565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821662000321576002805482900390556200033f565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200038591815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680620003bb57607f821691505b602082108103620003da57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200042b57805f5260205f20601f840160051c81016020851015620004075750805b601f840160051c820191505b8181101562000428575f815560010162000413565b50505b505050565b81516001600160401b038111156200044c576200044c62000392565b62000464816200045d8454620003a6565b84620003e0565b602080601f8311600181146200049a575f8415620004825750858301515b5f19600386901b1c1916600185901b178555620004f4565b5f85815260208120601f198616915b82811015620004ca57888601518255948401946001909101908401620004a9565b5085821015620004e857878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200055057815f1904821115620005345762000534620004fc565b808516156200054257918102915b93841c939080029062000515565b509250929050565b5f826200056857506001620001db565b816200057657505f620001db565b81600181146200058f57600281146200059a57620005ba565b6001915050620001db565b60ff841115620005ae57620005ae620004fc565b50506001821b620001db565b5060208310610133831016604e8410600b8410161715620005df575081810a620001db565b620005eb838362000510565b805f1904821115620006015762000601620004fc565b029392505050565b5f6200061960ff84168362000558565b9392505050565b8082028115828204841417620001db57620001db620004fc565b5f602080835283518060208501525f5b8181101562000668578581018301518582016040015282016200064a565b505f604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620003da575f1960209190910360031b1b16919050565b80820180821115620001db57620001db620004fc565b60805160a05160c05160e051610100516101205161014051611036620007145f395f61083401525f61080701525f6107b001525f61078801525f6106e301525f61070d01525f61073701526110365ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806370a0823111610093578063a9059cbb11610063578063a9059cbb146101e4578063b7881eb0146101f7578063d505accf1461020a578063dd62ed3e1461021d575f80fd5b806370a08231146101865780637ecebe00146101ae57806384b0196e146101c157806395d89b41146101dc575f80fd5b806323b872dd116100ce57806323b872dd14610147578063313ce5671461015a5780633644e515146101695780636dcea85f14610171575f80fd5b806306fdde03146100f4578063095ea7b31461011257806318160ddd14610135575b5f80fd5b6100fc610255565b6040516101099190610db2565b60405180910390f35b610125610120366004610de6565b6102e5565b6040519015158152602001610109565b6002545b604051908152602001610109565b610125610155366004610e0e565b6102fe565b60405160128152602001610109565b610139610321565b61018461017f366004610e47565b61032f565b005b610139610194366004610e47565b6001600160a01b03165f9081526020819052604090205490565b6101396101bc366004610e47565b6103ba565b6101c96103d7565b6040516101099796959493929190610e60565b6100fc610419565b6101256101f2366004610de6565b610428565b610139610205366004610e0e565b610435565b610184610218366004610ef7565b6104b7565b61013961022b366004610f64565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461026490610f95565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610f95565b80156102db5780601f106102b2576101008083540402835291602001916102db565b820191905f5260205f20905b8154815290600101906020018083116102be57829003601f168201915b5050505050905090565b5f336102f28185856105ed565b60019150505b92915050565b5f3361030b8582856105ff565b61031685858561067a565b506001949350505050565b5f61032a6106d7565b905090565b6009546001600160a01b031633146103985760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381165f908152600760205260408120546102f8565b5f6060805f805f60606103e8610800565b6103f061082d565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461026490610f95565b5f336102f281858561067a565b6008545f906001600160a01b0316331461049c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206d61726b65742063616e2063616c6c20746869732066756e63746960448201526137b760f11b606482015260840161038f565b6104a6848361085a565b6104b0838361085a565b5092915050565b834211156104db5760405163313c898160e11b81526004810185905260240161038f565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105268c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61058082610892565b90505f61058f828787876108be565b9050896001600160a01b0316816001600160a01b0316146105d6576040516325c0072360e11b81526001600160a01b0380831660048301528b16602482015260440161038f565b6105e18a8a8a6105ed565b50505050505050505050565b6105fa83838360016108ea565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610674578181101561066657604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161038f565b61067484848484035f6108ea565b50505050565b6001600160a01b0383166106a357604051634b637e8f60e11b81525f600482015260240161038f565b6001600160a01b0382166106cc5760405163ec442f0560e01b81525f600482015260240161038f565b6105fa8383836109bc565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561072f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561075957507f000000000000000000000000000000000000000000000000000000000000000090565b61032a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006005610ae2565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006006610ae2565b6001600160a01b0382166108835760405163ec442f0560e01b81525f600482015260240161038f565b61088e5f83836109bc565b5050565b5f6102f861089e6106d7565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806108ce88888888610b8b565b9250925092506108de8282610c53565b50909695505050505050565b6001600160a01b0384166109135760405163e602df0560e01b81525f600482015260240161038f565b6001600160a01b03831661093c57604051634a1406b160e11b81525f600482015260240161038f565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561067457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516109ae91815260200190565b60405180910390a350505050565b6001600160a01b0383166109e6578060025f8282546109db9190610fcd565b90915550610a569050565b6001600160a01b0383165f9081526020819052604090205481811015610a385760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161038f565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610a7257600280548290039055610a90565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ad591815260200190565b60405180910390a3505050565b606060ff8314610afc57610af583610d0b565b90506102f8565b818054610b0890610f95565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3490610f95565b8015610b7f5780601f10610b5657610100808354040283529160200191610b7f565b820191905f5260205f20905b815481529060010190602001808311610b6257829003601f168201915b505050505090506102f8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610bc457505f91506003905082610c49565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c15573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610c4057505f925060019150829050610c49565b92505f91508190505b9450945094915050565b5f826003811115610c6657610c66610fec565b03610c6f575050565b6001826003811115610c8357610c83610fec565b03610ca15760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610cb557610cb5610fec565b03610cd65760405163fce698f760e01b81526004810182905260240161038f565b6003826003811115610cea57610cea610fec565b0361088e576040516335e2f38360e21b81526004810182905260240161038f565b60605f610d1783610d48565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102f857604051632cd44ac360e21b815260040160405180910390fd5b5f81518084525f5b81811015610d9357602081850181015186830182015201610d77565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610dc46020830184610d6f565b9392505050565b80356001600160a01b0381168114610de1575f80fd5b919050565b5f8060408385031215610df7575f80fd5b610e0083610dcb565b946020939093013593505050565b5f805f60608486031215610e20575f80fd5b610e2984610dcb565b9250610e3760208501610dcb565b9150604084013590509250925092565b5f60208284031215610e57575f80fd5b610dc482610dcb565b60ff60f81b881681525f602060e06020840152610e8060e084018a610d6f565b8381036040850152610e92818a610d6f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b81811015610ee557835183529284019291840191600101610ec9565b50909c9b505050505050505050505050565b5f805f805f805f60e0888a031215610f0d575f80fd5b610f1688610dcb565b9650610f2460208901610dcb565b95506040880135945060608801359350608088013560ff81168114610f47575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610f75575f80fd5b610f7e83610dcb565b9150610f8c60208401610dcb565b90509250929050565b600181811c90821680610fa957607f821691505b602082108103610fc757634e487b7160e01b5f52602260045260245ffd5b50919050565b808201808211156102f857634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea2646970667358221220ae5dc479232d5b211f00338d7e9943b28c99cc21d127f1ff4b3e2bc86601b4c364736f6c63430008160033",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x1DD554D115 PUSH1 0xDA SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x15DA5B8B55DA5B881554D115 PUSH1 0xA2 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x1DD554D115 PUSH1 0xDA SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x9F SWAP2 SWAP1 PUSH3 0x430 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0xAE DUP3 DUP3 PUSH3 0x430 JUMP JUMPDEST POP PUSH3 0xC0 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH3 0x1A9 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH3 0xD1 DUP2 PUSH1 0x6 PUSH3 0x1A9 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x15E PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH3 0x191 CALLER PUSH3 0x17B PUSH1 0x12 PUSH1 0xA PUSH3 0x609 JUMP JUMPDEST PUSH3 0x18B SWAP1 PUSH4 0x5F5E100 PUSH3 0x620 JUMP JUMPDEST PUSH3 0x1E1 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH3 0x6C2 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x1C8 JUMPI PUSH3 0x1C0 DUP4 PUSH3 0x221 JUMP JUMPDEST SWAP1 POP PUSH3 0x1DB JUMP JUMPDEST DUP2 PUSH3 0x1D5 DUP5 DUP3 PUSH3 0x430 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x210 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x21D PUSH0 DUP4 DUP4 PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x24E JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x207 SWAP2 SWAP1 PUSH3 0x63A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x25B DUP3 PUSH3 0x688 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0x291 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH3 0x285 SWAP2 SWAP1 PUSH3 0x6AC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH3 0x303 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH3 0x2E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH3 0x207 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x321 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH3 0x33F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x385 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3BB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x3DA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x42B JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x407 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x428 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x413 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x44C JUMPI PUSH3 0x44C PUSH3 0x392 JUMP JUMPDEST PUSH3 0x464 DUP2 PUSH3 0x45D DUP5 SLOAD PUSH3 0x3A6 JUMP JUMPDEST DUP5 PUSH3 0x3E0 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x49A JUMPI PUSH0 DUP5 ISZERO PUSH3 0x482 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x4F4 JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x4CA JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x4A9 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x4E8 JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP5 PUSH1 0x1 SHL ADD DUP6 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x550 JUMPI DUP2 PUSH0 NOT DIV DUP3 GT ISZERO PUSH3 0x534 JUMPI PUSH3 0x534 PUSH3 0x4FC JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x542 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x515 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH3 0x568 JUMPI POP PUSH1 0x1 PUSH3 0x1DB JUMP JUMPDEST DUP2 PUSH3 0x576 JUMPI POP PUSH0 PUSH3 0x1DB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x58F JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x59A JUMPI PUSH3 0x5BA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x1DB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x5AE JUMPI PUSH3 0x5AE PUSH3 0x4FC JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x1DB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x5DF JUMPI POP DUP2 DUP2 EXP PUSH3 0x1DB JUMP JUMPDEST PUSH3 0x5EB DUP4 DUP4 PUSH3 0x510 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH3 0x601 JUMPI PUSH3 0x601 PUSH3 0x4FC JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH3 0x619 PUSH1 0xFF DUP5 AND DUP4 PUSH3 0x558 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x1DB JUMPI PUSH3 0x1DB PUSH3 0x4FC JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x668 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH3 0x64A JUMP JUMPDEST POP PUSH0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x3DA JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x1DB JUMPI PUSH3 0x1DB PUSH3 0x4FC JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1036 PUSH3 0x714 PUSH0 CODECOPY PUSH0 PUSH2 0x834 ADD MSTORE PUSH0 PUSH2 0x807 ADD MSTORE PUSH0 PUSH2 0x7B0 ADD MSTORE PUSH0 PUSH2 0x788 ADD MSTORE PUSH0 PUSH2 0x6E3 ADD MSTORE PUSH0 PUSH2 0x70D ADD MSTORE PUSH0 PUSH2 0x737 ADD MSTORE PUSH2 0x1036 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF0 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xB7881EB0 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x21D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x6DCEA85F EQ PUSH2 0x171 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x135 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP2 SWAP1 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x321 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x1C9 PUSH2 0x3D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x419 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0x428 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x435 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x30B DUP6 DUP3 DUP6 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x316 DUP6 DUP6 DUP6 PUSH2 0x67A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x32A PUSH2 0x6D7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x398 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2F8 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x3E8 PUSH2 0x800 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x82D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xF95 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x67A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x49C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206D61726B65742063616E2063616C6C20746869732066756E637469 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x37B7 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4A6 DUP5 DUP4 PUSH2 0x85A JUMP JUMPDEST PUSH2 0x4B0 DUP4 DUP4 PUSH2 0x85A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x526 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x580 DUP3 PUSH2 0x892 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x58F DUP3 DUP8 DUP8 DUP8 PUSH2 0x8BE JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x5E1 DUP11 DUP11 DUP11 PUSH2 0x5ED JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5FA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x8EA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x674 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x666 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x674 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x8EA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6CC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x5FA DUP4 DUP4 DUP4 PUSH2 0x9BC JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x72F JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x759 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x32A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x5 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x6 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x883 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x88E PUSH0 DUP4 DUP4 PUSH2 0x9BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2F8 PUSH2 0x89E PUSH2 0x6D7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x8CE DUP9 DUP9 DUP9 DUP9 PUSH2 0xB8B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x8DE DUP3 DUP3 PUSH2 0xC53 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x913 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x674 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9AE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9E6 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0xFCD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA56 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xA38 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA72 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xAD5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xAFC JUMPI PUSH2 0xAF5 DUP4 PUSH2 0xD0B JUMP JUMPDEST SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB08 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB34 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB7F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB56 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB7F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB62 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xBC4 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xC49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC40 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xC49 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC66 JUMPI PUSH2 0xC66 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xC6F JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH2 0xC83 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCB5 JUMPI PUSH2 0xCB5 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xCD6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCEA JUMPI PUSH2 0xCEA PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0x88E JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD17 DUP4 PUSH2 0xD48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD93 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xD77 JUMP JUMPDEST POP PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xDC4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD6F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDE1 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF7 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE00 DUP4 PUSH2 0xDCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE20 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE29 DUP5 PUSH2 0xDCB JUMP JUMPDEST SWAP3 POP PUSH2 0xE37 PUSH1 0x20 DUP6 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE57 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDC4 DUP3 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE80 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xD6F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xE92 DUP2 DUP11 PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEE5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEC9 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF0D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF16 DUP9 PUSH2 0xDCB JUMP JUMPDEST SWAP7 POP PUSH2 0xF24 PUSH1 0x20 DUP10 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF47 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF75 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF7E DUP4 PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH2 0xF8C PUSH1 0x20 DUP5 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xFC7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0x5D 0xC4 PUSH26 0x232D5B211F00338D7E9943B28C99CC21D127F1FF4B3E2BC86601 0xB4 0xC3 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "268:733:17:-:0;;;354:161;;;;;;;;;;1612:52:4;;;;;;;;;;;;;-1:-1:-1;;;1612:52:4;;;1651:4;3393:440:13;;;;;;;;;;;;;-1:-1:-1;;;3393:440:13;;;1945:116:2;;;;;;;;;;;;;-1:-1:-1;;;1945:116:2;;;;;;;;;;;;;;;;-1:-1:-1;;;1945:116:2;;;2020:5;2012;:13;;;;;;:::i;:::-;-1:-1:-1;2036:7:2;:17;2046:7;2036;:17;:::i;:::-;-1:-1:-1;3467:45:13;;-1:-1:-1;3467:4:13;;-1:-1:-1;3498:13:13;3467:30;:45::i;:::-;3459:53;;3534:51;:7;3568:16;3534:33;:51::i;:::-;3523:62;;3610:22;;;;;;;;;;3596:36;;3660:25;;;;;;3643:42;;3715:13;3698:30;;3764:23;4314:11;;4327:14;;4292:80;;;2116:95;4292:80;;;4642:25:18;4683:18;;;4676:34;;;;4726:18;;;4719:34;4343:13:13;4769:18:18;;;4762:34;4366:4:13;4812:19:18;;;4805:61;4255:7:13;;4614:19:18;;4292:80:13;;;;;;;;;;;;4282:91;;;;;;4275:98;;4200:181;;3764:23;3739:48;;-1:-1:-1;;3820:4:13;3798:27;;-1:-1:-1;430:49:17::2;436:10;462:16;3158:2:2::0;462::17::2;:16;:::i;:::-;448:30;::::0;:11:::2;:30;:::i;:::-;430:5;:49::i;:::-;489:5;:18:::0;;-1:-1:-1;;;;;;489:18:17::2;497:10;489:18;::::0;;268:733;;3002:347:9;3098:11;3148:2;3132:5;3126:19;:24;3122:220;;;3174:20;3188:5;3174:13;:20::i;:::-;3167:27;;;;3122:220;3253:5;3227:46;3268:5;3253;3227:46;:::i;:::-;-1:-1:-1;1431:66:9;;-1:-1:-1;3122:220:9;3002:347;;;;:::o;7946:213:2:-;-1:-1:-1;;;;;8017:21:2;;8013:93;;8062:32;;-1:-1:-1;;;8062:32:2;;8091:1;8062:32;;;5023:51:18;4996:18;;8062:32:2;;;;;;;;8013:93;8116:35;8132:1;8136:7;8145:5;8116:7;:35::i;:::-;7946:213;;:::o;1759:292:9:-;1824:11;1848:17;1874:3;1848:30;;1907:2;1893:4;:11;:16;1889:74;;;1947:3;1933:18;;-1:-1:-1;;;1933:18:9;;;;;;;;:::i;1889:74::-;2030:11;;2013:13;2030:4;2013:13;:::i;:::-;2005:36;;1759:292;-1:-1:-1;;;1759:292:9:o;6458:1135:2:-;-1:-1:-1;;;;;6548:18:2;;6544:552;;6702:5;6686:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6544:552:2;;-1:-1:-1;6544:552:2;;-1:-1:-1;;;;;6762:15:2;;6740:19;6762:15;;;;;;;;;;;6796:19;;;6792:117;;;6843:50;;-1:-1:-1;;;6843:50:2;;-1:-1:-1;;;;;6290:32:18;;6843:50:2;;;6272:51:18;6339:18;;;6332:34;;;6382:18;;;6375:34;;;6245:18;;6843:50:2;6070:345:18;6792:117:2;-1:-1:-1;;;;;7032:15:2;;:9;:15;;;;;;;;;;7050:19;;;;7032:37;;6544:552;-1:-1:-1;;;;;7112:16:2;;7108:435;;7278:12;:21;;;;;;;7108:435;;;-1:-1:-1;;;;;7494:13:2;;:9;:13;;;;;;;;;;:22;;;;;;7108:435;7575:2;-1:-1:-1;;;;;7560:25:2;7569:4;-1:-1:-1;;;;;7560:25:2;;7579:5;7560:25;;;;6566::18;;6554:2;6539:18;;6420:177;7560:25:2;;;;;;;;6458:1135;;;:::o;14:127:18:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:18;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1345::-;1471:10;;-1:-1:-1;;;;;1493:30:18;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1707:4;;1764:2;1753:14;;1781:1;1776:663;;;;2483:1;2500:6;2497:89;;;-1:-1:-1;2552:19:18;;;2546:26;2497:89;-1:-1:-1;;1308:1:18;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2599:81;;1746:944;;1776:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1812:20:18;;;1930:236;1944:7;1941:1;1938:14;1930:236;;;2033:19;;;2027:26;2012:42;;2125:27;;;;2093:1;2081:14;;;;1960:19;;1930:236;;;1934:3;2194:6;2185:7;2182:19;2179:201;;;2255:19;;;2249:26;-1:-1:-1;;2338:1:18;2334:14;;;2350:3;2330:24;2326:37;2322:42;2307:58;2292:74;;2179:201;;;2426:1;2417:6;2414:1;2410:14;2406:22;2400:4;2393:36;1746:944;;;;;1351:1345;;:::o;2701:127::-;2762:10;2757:3;2753:20;2750:1;2743:31;2793:4;2790:1;2783:15;2817:4;2814:1;2807:15;2833:416;2922:1;2959:5;2922:1;2973:270;2994:7;2984:8;2981:21;2973:270;;;3053:4;3049:1;3045:6;3041:17;3035:4;3032:27;3029:53;;;3062:18;;:::i;:::-;3112:7;3102:8;3098:22;3095:55;;;3132:16;;;;3095:55;3211:22;;;;3171:15;;;;2973:270;;;2977:3;2833:416;;;;;:::o;3254:806::-;3303:5;3333:8;3323:80;;-1:-1:-1;3374:1:18;3388:5;;3323:80;3422:4;3412:76;;-1:-1:-1;3459:1:18;3473:5;;3412:76;3504:4;3522:1;3517:59;;;;3590:1;3585:130;;;;3497:218;;3517:59;3547:1;3538:10;;3561:5;;;3585:130;3622:3;3612:8;3609:17;3606:43;;;3629:18;;:::i;:::-;-1:-1:-1;;3685:1:18;3671:16;;3700:5;;3497:218;;3799:2;3789:8;3786:16;3780:3;3774:4;3771:13;3767:36;3761:2;3751:8;3748:16;3743:2;3737:4;3734:12;3730:35;3727:77;3724:159;;;-1:-1:-1;3836:19:18;;;3868:5;;3724:159;3915:34;3940:8;3934:4;3915:34;:::i;:::-;3985:6;3981:1;3977:6;3973:19;3964:7;3961:32;3958:58;;;3996:18;;:::i;:::-;4034:20;;3254:806;-1:-1:-1;;;3254:806:18:o;4065:140::-;4123:5;4152:47;4193:4;4183:8;4179:19;4173:4;4152:47;:::i;:::-;4143:56;4065:140;-1:-1:-1;;;4065:140:18:o;4210:168::-;4283:9;;;4314;;4331:15;;;4325:22;;4311:37;4301:71;;4352:18;;:::i;5085:548::-;5197:4;5226:2;5255;5244:9;5237:21;5287:6;5281:13;5330:6;5325:2;5314:9;5310:18;5303:34;5355:1;5365:140;5379:6;5376:1;5373:13;5365:140;;;5474:14;;;5470:23;;5464:30;5440:17;;;5459:2;5436:26;5429:66;5394:10;;5365:140;;;5369:3;5554:1;5549:2;5540:6;5529:9;5525:22;5521:31;5514:42;5624:2;5617;5613:7;5608:2;5600:6;5596:15;5592:29;5581:9;5577:45;5573:54;5565:62;;;;5085:548;;;;:::o;5638:297::-;5756:12;;5803:4;5792:16;;;5786:23;;5756:12;5821:16;;5818:111;;;-1:-1:-1;;5895:4:18;5891:17;;;;5888:1;5884:25;5880:38;5869:50;;5638:297;-1:-1:-1;5638:297:18:o;5940:125::-;6005:9;;;6026:10;;;6023:36;;;6039:18;;:::i;6420:177::-;268:733:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@Aware_3557": {
									"entryPoint": 1077,
									"id": 3557,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@DOMAIN_SEPARATOR_907": {
									"entryPoint": 801,
									"id": 907,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2212": {
									"entryPoint": 2048,
									"id": 2212,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2224": {
									"entryPoint": 2093,
									"id": 2224,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_567": {
									"entryPoint": 1517,
									"id": 567,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_627": {
									"entryPoint": 2282,
									"id": 627,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2142": {
									"entryPoint": null,
									"id": 2142,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_domainSeparatorV4_2121": {
									"entryPoint": 1751,
									"id": 2121,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2158": {
									"entryPoint": 2194,
									"id": 2158,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_516": {
									"entryPoint": 2138,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_982": {
									"entryPoint": null,
									"id": 982,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_675": {
									"entryPoint": 1535,
									"id": 675,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_1997": {
									"entryPoint": 3155,
									"id": 1997,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transfer_406": {
									"entryPoint": 1658,
									"id": 406,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_483": {
									"entryPoint": 2492,
									"id": 483,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1042": {
									"entryPoint": null,
									"id": 1042,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_303": {
									"entryPoint": null,
									"id": 303,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_327": {
									"entryPoint": 741,
									"id": 327,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_262": {
									"entryPoint": null,
									"id": 262,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@byteLength_1186": {
									"entryPoint": 3400,
									"id": 1186,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_240": {
									"entryPoint": null,
									"id": 240,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2200": {
									"entryPoint": 983,
									"id": 2200,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@name_222": {
									"entryPoint": 597,
									"id": 222,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1027": {
									"entryPoint": null,
									"id": 1027,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_897": {
									"entryPoint": 954,
									"id": 897,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@permit_880": {
									"entryPoint": 1207,
									"id": 880,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_1948": {
									"entryPoint": 2238,
									"id": 1948,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@setMarket_3519": {
									"entryPoint": 815,
									"id": 3519,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@symbol_231": {
									"entryPoint": 1049,
									"id": 231,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1253": {
									"entryPoint": 2786,
									"id": 1253,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1154": {
									"entryPoint": 3339,
									"id": 1154,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2298": {
									"entryPoint": null,
									"id": 2298,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_249": {
									"entryPoint": null,
									"id": 249,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_359": {
									"entryPoint": 766,
									"id": 359,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_286": {
									"entryPoint": 1064,
									"id": 286,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_1912": {
									"entryPoint": 2955,
									"id": 1912,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"abi_decode_address": {
									"entryPoint": 3531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3655,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3940,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3598,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 3831,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3558,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_string": {
									"entryPoint": 3439,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 3680,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3506,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7ee95a850e265287713312fd6edb847021666b882f6668bb7e21a4764e4399a2__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4045,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 3989,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x21": {
									"entryPoint": 4076,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8638:18",
										"nodeType": "YulBlock",
										"src": "0:8638:18",
										"statements": [
											{
												"nativeSrc": "6:3:18",
												"nodeType": "YulBlock",
												"src": "6:3:18",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "64:373:18",
													"nodeType": "YulBlock",
													"src": "64:373:18",
													"statements": [
														{
															"nativeSrc": "74:26:18",
															"nodeType": "YulVariableDeclaration",
															"src": "74:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "94:5:18",
																		"nodeType": "YulIdentifier",
																		"src": "94:5:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "88:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "88:5:18"
																},
																"nativeSrc": "88:12:18",
																"nodeType": "YulFunctionCall",
																"src": "88:12:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "78:6:18",
																	"nodeType": "YulTypedName",
																	"src": "78:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "116:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "116:3:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "121:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "121:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "109:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "109:6:18"
																},
																"nativeSrc": "109:19:18",
																"nodeType": "YulFunctionCall",
																"src": "109:19:18"
															},
															"nativeSrc": "109:19:18",
															"nodeType": "YulExpressionStatement",
															"src": "109:19:18"
														},
														{
															"nativeSrc": "137:10:18",
															"nodeType": "YulVariableDeclaration",
															"src": "137:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "146:1:18",
																"nodeType": "YulLiteral",
																"src": "146:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "141:1:18",
																	"nodeType": "YulTypedName",
																	"src": "141:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "208:110:18",
																"nodeType": "YulBlock",
																"src": "208:110:18",
																"statements": [
																	{
																		"nativeSrc": "222:14:18",
																		"nodeType": "YulVariableDeclaration",
																		"src": "222:14:18",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "232:4:18",
																			"nodeType": "YulLiteral",
																			"src": "232:4:18",
																			"type": "",
																			"value": "0x20"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "226:2:18",
																				"nodeType": "YulTypedName",
																				"src": "226:2:18",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "pos",
																									"nativeSrc": "264:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "264:3:18"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "269:1:18",
																									"nodeType": "YulIdentifier",
																									"src": "269:1:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "260:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "260:3:18"
																							},
																							"nativeSrc": "260:11:18",
																							"nodeType": "YulFunctionCall",
																							"src": "260:11:18"
																						},
																						{
																							"name": "_1",
																							"nativeSrc": "273:2:18",
																							"nodeType": "YulIdentifier",
																							"src": "273:2:18"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "256:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "256:3:18"
																					},
																					"nativeSrc": "256:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "256:20:18"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "292:5:18",
																											"nodeType": "YulIdentifier",
																											"src": "292:5:18"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "299:1:18",
																											"nodeType": "YulIdentifier",
																											"src": "299:1:18"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "288:3:18",
																										"nodeType": "YulIdentifier",
																										"src": "288:3:18"
																									},
																									"nativeSrc": "288:13:18",
																									"nodeType": "YulFunctionCall",
																									"src": "288:13:18"
																								},
																								{
																									"name": "_1",
																									"nativeSrc": "303:2:18",
																									"nodeType": "YulIdentifier",
																									"src": "303:2:18"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "284:3:18",
																								"nodeType": "YulIdentifier",
																								"src": "284:3:18"
																							},
																							"nativeSrc": "284:22:18",
																							"nodeType": "YulFunctionCall",
																							"src": "284:22:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "278:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "278:5:18"
																					},
																					"nativeSrc": "278:29:18",
																					"nodeType": "YulFunctionCall",
																					"src": "278:29:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "249:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "249:6:18"
																			},
																			"nativeSrc": "249:59:18",
																			"nodeType": "YulFunctionCall",
																			"src": "249:59:18"
																		},
																		"nativeSrc": "249:59:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "249:59:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "167:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "167:1:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "170:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "170:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "164:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "164:2:18"
																},
																"nativeSrc": "164:13:18",
																"nodeType": "YulFunctionCall",
																"src": "164:13:18"
															},
															"nativeSrc": "156:162:18",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "178:21:18",
																"nodeType": "YulBlock",
																"src": "178:21:18",
																"statements": [
																	{
																		"nativeSrc": "180:17:18",
																		"nodeType": "YulAssignment",
																		"src": "180:17:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "189:1:18",
																					"nodeType": "YulIdentifier",
																					"src": "189:1:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "192:4:18",
																					"nodeType": "YulLiteral",
																					"src": "192:4:18",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "185:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "185:3:18"
																			},
																			"nativeSrc": "185:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "185:12:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "180:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "180:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "160:3:18",
																"nodeType": "YulBlock",
																"src": "160:3:18",
																"statements": []
															},
															"src": "156:162:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nativeSrc": "342:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "342:3:18"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "347:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "347:6:18"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "338:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "338:3:18"
																				},
																				"nativeSrc": "338:16:18",
																				"nodeType": "YulFunctionCall",
																				"src": "338:16:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "356:4:18",
																				"nodeType": "YulLiteral",
																				"src": "356:4:18",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "334:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "334:3:18"
																		},
																		"nativeSrc": "334:27:18",
																		"nodeType": "YulFunctionCall",
																		"src": "334:27:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "363:1:18",
																		"nodeType": "YulLiteral",
																		"src": "363:1:18",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "327:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "327:6:18"
																},
																"nativeSrc": "327:38:18",
																"nodeType": "YulFunctionCall",
																"src": "327:38:18"
															},
															"nativeSrc": "327:38:18",
															"nodeType": "YulExpressionStatement",
															"src": "327:38:18"
														},
														{
															"nativeSrc": "374:57:18",
															"nodeType": "YulAssignment",
															"src": "374:57:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "389:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "389:3:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "402:6:18",
																								"nodeType": "YulIdentifier",
																								"src": "402:6:18"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "410:2:18",
																								"nodeType": "YulLiteral",
																								"src": "410:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "398:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "398:3:18"
																						},
																						"nativeSrc": "398:15:18",
																						"nodeType": "YulFunctionCall",
																						"src": "398:15:18"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "419:2:18",
																								"nodeType": "YulLiteral",
																								"src": "419:2:18",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "415:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "415:3:18"
																						},
																						"nativeSrc": "415:7:18",
																						"nodeType": "YulFunctionCall",
																						"src": "415:7:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "394:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "394:3:18"
																				},
																				"nativeSrc": "394:29:18",
																				"nodeType": "YulFunctionCall",
																				"src": "394:29:18"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "385:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "385:3:18"
																		},
																		"nativeSrc": "385:39:18",
																		"nodeType": "YulFunctionCall",
																		"src": "385:39:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "426:4:18",
																		"nodeType": "YulLiteral",
																		"src": "426:4:18",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "381:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "381:3:18"
																},
																"nativeSrc": "381:50:18",
																"nodeType": "YulFunctionCall",
																"src": "381:50:18"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "374:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "374:3:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nativeSrc": "14:423:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "41:5:18",
														"nodeType": "YulTypedName",
														"src": "41:5:18",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "48:3:18",
														"nodeType": "YulTypedName",
														"src": "48:3:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "56:3:18",
														"nodeType": "YulTypedName",
														"src": "56:3:18",
														"type": ""
													}
												],
												"src": "14:423:18"
											},
											{
												"body": {
													"nativeSrc": "563:99:18",
													"nodeType": "YulBlock",
													"src": "563:99:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "580:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "580:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "591:2:18",
																		"nodeType": "YulLiteral",
																		"src": "591:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "573:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "573:6:18"
																},
																"nativeSrc": "573:21:18",
																"nodeType": "YulFunctionCall",
																"src": "573:21:18"
															},
															"nativeSrc": "573:21:18",
															"nodeType": "YulExpressionStatement",
															"src": "573:21:18"
														},
														{
															"nativeSrc": "603:53:18",
															"nodeType": "YulAssignment",
															"src": "603:53:18",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "629:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "629:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "641:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "641:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "652:2:18",
																				"nodeType": "YulLiteral",
																				"src": "652:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "637:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "637:3:18"
																		},
																		"nativeSrc": "637:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "637:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "611:17:18",
																	"nodeType": "YulIdentifier",
																	"src": "611:17:18"
																},
																"nativeSrc": "611:45:18",
																"nodeType": "YulFunctionCall",
																"src": "611:45:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "603:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "603:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "442:220:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "532:9:18",
														"nodeType": "YulTypedName",
														"src": "532:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "543:6:18",
														"nodeType": "YulTypedName",
														"src": "543:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "554:4:18",
														"nodeType": "YulTypedName",
														"src": "554:4:18",
														"type": ""
													}
												],
												"src": "442:220:18"
											},
											{
												"body": {
													"nativeSrc": "716:124:18",
													"nodeType": "YulBlock",
													"src": "716:124:18",
													"statements": [
														{
															"nativeSrc": "726:29:18",
															"nodeType": "YulAssignment",
															"src": "726:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "748:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "748:6:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "735:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "735:12:18"
																},
																"nativeSrc": "735:20:18",
																"nodeType": "YulFunctionCall",
																"src": "735:20:18"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "726:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "726:5:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "818:16:18",
																"nodeType": "YulBlock",
																"src": "818:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "827:1:18",
																					"nodeType": "YulLiteral",
																					"src": "827:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "830:1:18",
																					"nodeType": "YulLiteral",
																					"src": "830:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "820:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:18"
																			},
																			"nativeSrc": "820:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "820:12:18"
																		},
																		"nativeSrc": "820:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "820:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "777:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "777:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "788:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "788:5:18"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "803:3:18",
																										"nodeType": "YulLiteral",
																										"src": "803:3:18",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "808:1:18",
																										"nodeType": "YulLiteral",
																										"src": "808:1:18",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "799:3:18",
																									"nodeType": "YulIdentifier",
																									"src": "799:3:18"
																								},
																								"nativeSrc": "799:11:18",
																								"nodeType": "YulFunctionCall",
																								"src": "799:11:18"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "812:1:18",
																								"nodeType": "YulLiteral",
																								"src": "812:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "795:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "795:3:18"
																						},
																						"nativeSrc": "795:19:18",
																						"nodeType": "YulFunctionCall",
																						"src": "795:19:18"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "784:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "784:3:18"
																				},
																				"nativeSrc": "784:31:18",
																				"nodeType": "YulFunctionCall",
																				"src": "784:31:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "774:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "774:2:18"
																		},
																		"nativeSrc": "774:42:18",
																		"nodeType": "YulFunctionCall",
																		"src": "774:42:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "767:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "767:6:18"
																},
																"nativeSrc": "767:50:18",
																"nodeType": "YulFunctionCall",
																"src": "767:50:18"
															},
															"nativeSrc": "764:70:18",
															"nodeType": "YulIf",
															"src": "764:70:18"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "667:173:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "695:6:18",
														"nodeType": "YulTypedName",
														"src": "695:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "706:5:18",
														"nodeType": "YulTypedName",
														"src": "706:5:18",
														"type": ""
													}
												],
												"src": "667:173:18"
											},
											{
												"body": {
													"nativeSrc": "932:167:18",
													"nodeType": "YulBlock",
													"src": "932:167:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "978:16:18",
																"nodeType": "YulBlock",
																"src": "978:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "987:1:18",
																					"nodeType": "YulLiteral",
																					"src": "987:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "990:1:18",
																					"nodeType": "YulLiteral",
																					"src": "990:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "980:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "980:6:18"
																			},
																			"nativeSrc": "980:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "980:12:18"
																		},
																		"nativeSrc": "980:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "980:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "953:7:18",
																				"nodeType": "YulIdentifier",
																				"src": "953:7:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "962:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "962:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "949:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "949:3:18"
																		},
																		"nativeSrc": "949:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "949:23:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "974:2:18",
																		"nodeType": "YulLiteral",
																		"src": "974:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "945:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "945:3:18"
																},
																"nativeSrc": "945:32:18",
																"nodeType": "YulFunctionCall",
																"src": "945:32:18"
															},
															"nativeSrc": "942:52:18",
															"nodeType": "YulIf",
															"src": "942:52:18"
														},
														{
															"nativeSrc": "1003:39:18",
															"nodeType": "YulAssignment",
															"src": "1003:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1032:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1032:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1013:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "1013:18:18"
																},
																"nativeSrc": "1013:29:18",
																"nodeType": "YulFunctionCall",
																"src": "1013:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1003:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1003:6:18"
																}
															]
														},
														{
															"nativeSrc": "1051:42:18",
															"nodeType": "YulAssignment",
															"src": "1051:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1078:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "1078:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1089:2:18",
																				"nodeType": "YulLiteral",
																				"src": "1089:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1074:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1074:3:18"
																		},
																		"nativeSrc": "1074:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1074:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1061:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "1061:12:18"
																},
																"nativeSrc": "1061:32:18",
																"nodeType": "YulFunctionCall",
																"src": "1061:32:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1051:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1051:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "845:254:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "890:9:18",
														"nodeType": "YulTypedName",
														"src": "890:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "901:7:18",
														"nodeType": "YulTypedName",
														"src": "901:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "913:6:18",
														"nodeType": "YulTypedName",
														"src": "913:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "921:6:18",
														"nodeType": "YulTypedName",
														"src": "921:6:18",
														"type": ""
													}
												],
												"src": "845:254:18"
											},
											{
												"body": {
													"nativeSrc": "1199:92:18",
													"nodeType": "YulBlock",
													"src": "1199:92:18",
													"statements": [
														{
															"nativeSrc": "1209:26:18",
															"nodeType": "YulAssignment",
															"src": "1209:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1221:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1221:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1232:2:18",
																		"nodeType": "YulLiteral",
																		"src": "1232:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1217:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1217:3:18"
																},
																"nativeSrc": "1217:18:18",
																"nodeType": "YulFunctionCall",
																"src": "1217:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1209:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "1209:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1251:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1251:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1276:6:18",
																						"nodeType": "YulIdentifier",
																						"src": "1276:6:18"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1269:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "1269:6:18"
																				},
																				"nativeSrc": "1269:14:18",
																				"nodeType": "YulFunctionCall",
																				"src": "1269:14:18"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1262:6:18",
																			"nodeType": "YulIdentifier",
																			"src": "1262:6:18"
																		},
																		"nativeSrc": "1262:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1262:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1244:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1244:6:18"
																},
																"nativeSrc": "1244:41:18",
																"nodeType": "YulFunctionCall",
																"src": "1244:41:18"
															},
															"nativeSrc": "1244:41:18",
															"nodeType": "YulExpressionStatement",
															"src": "1244:41:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1104:187:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1168:9:18",
														"nodeType": "YulTypedName",
														"src": "1168:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1179:6:18",
														"nodeType": "YulTypedName",
														"src": "1179:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1190:4:18",
														"nodeType": "YulTypedName",
														"src": "1190:4:18",
														"type": ""
													}
												],
												"src": "1104:187:18"
											},
											{
												"body": {
													"nativeSrc": "1397:76:18",
													"nodeType": "YulBlock",
													"src": "1397:76:18",
													"statements": [
														{
															"nativeSrc": "1407:26:18",
															"nodeType": "YulAssignment",
															"src": "1407:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1419:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1419:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1430:2:18",
																		"nodeType": "YulLiteral",
																		"src": "1430:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1415:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1415:3:18"
																},
																"nativeSrc": "1415:18:18",
																"nodeType": "YulFunctionCall",
																"src": "1415:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1407:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "1407:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1449:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1449:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1460:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "1460:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1442:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1442:6:18"
																},
																"nativeSrc": "1442:25:18",
																"nodeType": "YulFunctionCall",
																"src": "1442:25:18"
															},
															"nativeSrc": "1442:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "1442:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1296:177:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1366:9:18",
														"nodeType": "YulTypedName",
														"src": "1366:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1377:6:18",
														"nodeType": "YulTypedName",
														"src": "1377:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1388:4:18",
														"nodeType": "YulTypedName",
														"src": "1388:4:18",
														"type": ""
													}
												],
												"src": "1296:177:18"
											},
											{
												"body": {
													"nativeSrc": "1582:224:18",
													"nodeType": "YulBlock",
													"src": "1582:224:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "1628:16:18",
																"nodeType": "YulBlock",
																"src": "1628:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1637:1:18",
																					"nodeType": "YulLiteral",
																					"src": "1637:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1640:1:18",
																					"nodeType": "YulLiteral",
																					"src": "1640:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1630:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "1630:6:18"
																			},
																			"nativeSrc": "1630:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "1630:12:18"
																		},
																		"nativeSrc": "1630:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "1630:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1603:7:18",
																				"nodeType": "YulIdentifier",
																				"src": "1603:7:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1612:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "1612:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1599:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1599:3:18"
																		},
																		"nativeSrc": "1599:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1599:23:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1624:2:18",
																		"nodeType": "YulLiteral",
																		"src": "1624:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1595:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1595:3:18"
																},
																"nativeSrc": "1595:32:18",
																"nodeType": "YulFunctionCall",
																"src": "1595:32:18"
															},
															"nativeSrc": "1592:52:18",
															"nodeType": "YulIf",
															"src": "1592:52:18"
														},
														{
															"nativeSrc": "1653:39:18",
															"nodeType": "YulAssignment",
															"src": "1653:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1682:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1682:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1663:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "1663:18:18"
																},
																"nativeSrc": "1663:29:18",
																"nodeType": "YulFunctionCall",
																"src": "1663:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1653:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1653:6:18"
																}
															]
														},
														{
															"nativeSrc": "1701:48:18",
															"nodeType": "YulAssignment",
															"src": "1701:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1734:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1745:2:18",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1730:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:18"
																		},
																		"nativeSrc": "1730:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1711:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "1711:18:18"
																},
																"nativeSrc": "1711:38:18",
																"nodeType": "YulFunctionCall",
																"src": "1711:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1701:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1701:6:18"
																}
															]
														},
														{
															"nativeSrc": "1758:42:18",
															"nodeType": "YulAssignment",
															"src": "1758:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1785:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "1785:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1796:2:18",
																				"nodeType": "YulLiteral",
																				"src": "1796:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1781:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1781:3:18"
																		},
																		"nativeSrc": "1781:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1781:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1768:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "1768:12:18"
																},
																"nativeSrc": "1768:32:18",
																"nodeType": "YulFunctionCall",
																"src": "1768:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1758:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1758:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1478:328:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1532:9:18",
														"nodeType": "YulTypedName",
														"src": "1532:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1543:7:18",
														"nodeType": "YulTypedName",
														"src": "1543:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1555:6:18",
														"nodeType": "YulTypedName",
														"src": "1555:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1563:6:18",
														"nodeType": "YulTypedName",
														"src": "1563:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1571:6:18",
														"nodeType": "YulTypedName",
														"src": "1571:6:18",
														"type": ""
													}
												],
												"src": "1478:328:18"
											},
											{
												"body": {
													"nativeSrc": "1908:87:18",
													"nodeType": "YulBlock",
													"src": "1908:87:18",
													"statements": [
														{
															"nativeSrc": "1918:26:18",
															"nodeType": "YulAssignment",
															"src": "1918:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1930:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1930:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1941:2:18",
																		"nodeType": "YulLiteral",
																		"src": "1941:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1926:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "1926:3:18"
																},
																"nativeSrc": "1926:18:18",
																"nodeType": "YulFunctionCall",
																"src": "1926:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1918:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "1918:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1960:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "1960:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1975:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "1975:6:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1983:4:18",
																				"nodeType": "YulLiteral",
																				"src": "1983:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1971:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "1971:3:18"
																		},
																		"nativeSrc": "1971:17:18",
																		"nodeType": "YulFunctionCall",
																		"src": "1971:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1953:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1953:6:18"
																},
																"nativeSrc": "1953:36:18",
																"nodeType": "YulFunctionCall",
																"src": "1953:36:18"
															},
															"nativeSrc": "1953:36:18",
															"nodeType": "YulExpressionStatement",
															"src": "1953:36:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1811:184:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1877:9:18",
														"nodeType": "YulTypedName",
														"src": "1877:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1888:6:18",
														"nodeType": "YulTypedName",
														"src": "1888:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1899:4:18",
														"nodeType": "YulTypedName",
														"src": "1899:4:18",
														"type": ""
													}
												],
												"src": "1811:184:18"
											},
											{
												"body": {
													"nativeSrc": "2101:76:18",
													"nodeType": "YulBlock",
													"src": "2101:76:18",
													"statements": [
														{
															"nativeSrc": "2111:26:18",
															"nodeType": "YulAssignment",
															"src": "2111:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2123:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "2123:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2134:2:18",
																		"nodeType": "YulLiteral",
																		"src": "2134:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2119:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "2119:3:18"
																},
																"nativeSrc": "2119:18:18",
																"nodeType": "YulFunctionCall",
																"src": "2119:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2111:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "2111:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2153:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "2153:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2164:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "2164:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2146:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2146:6:18"
																},
																"nativeSrc": "2146:25:18",
																"nodeType": "YulFunctionCall",
																"src": "2146:25:18"
															},
															"nativeSrc": "2146:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "2146:25:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "2000:177:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2070:9:18",
														"nodeType": "YulTypedName",
														"src": "2070:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2081:6:18",
														"nodeType": "YulTypedName",
														"src": "2081:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2092:4:18",
														"nodeType": "YulTypedName",
														"src": "2092:4:18",
														"type": ""
													}
												],
												"src": "2000:177:18"
											},
											{
												"body": {
													"nativeSrc": "2252:116:18",
													"nodeType": "YulBlock",
													"src": "2252:116:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "2298:16:18",
																"nodeType": "YulBlock",
																"src": "2298:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2307:1:18",
																					"nodeType": "YulLiteral",
																					"src": "2307:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2310:1:18",
																					"nodeType": "YulLiteral",
																					"src": "2310:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2300:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2300:6:18"
																			},
																			"nativeSrc": "2300:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "2300:12:18"
																		},
																		"nativeSrc": "2300:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "2300:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2273:7:18",
																				"nodeType": "YulIdentifier",
																				"src": "2273:7:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2282:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2282:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2269:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2269:3:18"
																		},
																		"nativeSrc": "2269:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2269:23:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2294:2:18",
																		"nodeType": "YulLiteral",
																		"src": "2294:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2265:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "2265:3:18"
																},
																"nativeSrc": "2265:32:18",
																"nodeType": "YulFunctionCall",
																"src": "2265:32:18"
															},
															"nativeSrc": "2262:52:18",
															"nodeType": "YulIf",
															"src": "2262:52:18"
														},
														{
															"nativeSrc": "2323:39:18",
															"nodeType": "YulAssignment",
															"src": "2323:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2352:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "2352:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2333:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "2333:18:18"
																},
																"nativeSrc": "2333:29:18",
																"nodeType": "YulFunctionCall",
																"src": "2333:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2323:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2323:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "2182:186:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2218:9:18",
														"nodeType": "YulTypedName",
														"src": "2218:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2229:7:18",
														"nodeType": "YulTypedName",
														"src": "2229:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2241:6:18",
														"nodeType": "YulTypedName",
														"src": "2241:6:18",
														"type": ""
													}
												],
												"src": "2182:186:18"
											},
											{
												"body": {
													"nativeSrc": "2730:902:18",
													"nodeType": "YulBlock",
													"src": "2730:902:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2747:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "2747:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2762:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2762:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2774:3:18",
																						"nodeType": "YulLiteral",
																						"src": "2774:3:18",
																						"type": "",
																						"value": "248"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2779:3:18",
																						"nodeType": "YulLiteral",
																						"src": "2779:3:18",
																						"type": "",
																						"value": "255"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2770:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "2770:3:18"
																				},
																				"nativeSrc": "2770:13:18",
																				"nodeType": "YulFunctionCall",
																				"src": "2770:13:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2758:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2758:3:18"
																		},
																		"nativeSrc": "2758:26:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2758:26:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2740:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2740:6:18"
																},
																"nativeSrc": "2740:45:18",
																"nodeType": "YulFunctionCall",
																"src": "2740:45:18"
															},
															"nativeSrc": "2740:45:18",
															"nodeType": "YulExpressionStatement",
															"src": "2740:45:18"
														},
														{
															"nativeSrc": "2794:12:18",
															"nodeType": "YulVariableDeclaration",
															"src": "2794:12:18",
															"value": {
																"kind": "number",
																"nativeSrc": "2804:2:18",
																"nodeType": "YulLiteral",
																"src": "2804:2:18",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "2798:2:18",
																	"nodeType": "YulTypedName",
																	"src": "2798:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2826:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2826:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2837:2:18",
																				"nodeType": "YulLiteral",
																				"src": "2837:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2822:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2822:3:18"
																		},
																		"nativeSrc": "2822:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2822:18:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2842:3:18",
																		"nodeType": "YulLiteral",
																		"src": "2842:3:18",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2815:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2815:6:18"
																},
																"nativeSrc": "2815:31:18",
																"nodeType": "YulFunctionCall",
																"src": "2815:31:18"
															},
															"nativeSrc": "2815:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "2815:31:18"
														},
														{
															"nativeSrc": "2855:60:18",
															"nodeType": "YulVariableDeclaration",
															"src": "2855:60:18",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "2887:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "2887:6:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2899:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2899:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2910:3:18",
																				"nodeType": "YulLiteral",
																				"src": "2910:3:18",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2895:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2895:3:18"
																		},
																		"nativeSrc": "2895:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2895:19:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "2869:17:18",
																	"nodeType": "YulIdentifier",
																	"src": "2869:17:18"
																},
																"nativeSrc": "2869:46:18",
																"nodeType": "YulFunctionCall",
																"src": "2869:46:18"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nativeSrc": "2859:6:18",
																	"nodeType": "YulTypedName",
																	"src": "2859:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2935:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2935:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2946:2:18",
																				"nodeType": "YulLiteral",
																				"src": "2946:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2931:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2931:3:18"
																		},
																		"nativeSrc": "2931:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2931:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nativeSrc": "2955:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "2955:6:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2963:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "2963:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2951:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "2951:3:18"
																		},
																		"nativeSrc": "2951:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "2951:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2924:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2924:6:18"
																},
																"nativeSrc": "2924:50:18",
																"nodeType": "YulFunctionCall",
																"src": "2924:50:18"
															},
															"nativeSrc": "2924:50:18",
															"nodeType": "YulExpressionStatement",
															"src": "2924:50:18"
														},
														{
															"nativeSrc": "2983:47:18",
															"nodeType": "YulVariableDeclaration",
															"src": "2983:47:18",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "3015:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3015:6:18"
																	},
																	{
																		"name": "tail_1",
																		"nativeSrc": "3023:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3023:6:18"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "2997:17:18",
																	"nodeType": "YulIdentifier",
																	"src": "2997:17:18"
																},
																"nativeSrc": "2997:33:18",
																"nodeType": "YulFunctionCall",
																"src": "2997:33:18"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nativeSrc": "2987:6:18",
																	"nodeType": "YulTypedName",
																	"src": "2987:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3050:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3050:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3061:2:18",
																				"nodeType": "YulLiteral",
																				"src": "3061:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3046:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3046:3:18"
																		},
																		"nativeSrc": "3046:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3046:18:18"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "3066:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3066:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3039:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3039:6:18"
																},
																"nativeSrc": "3039:34:18",
																"nodeType": "YulFunctionCall",
																"src": "3039:34:18"
															},
															"nativeSrc": "3039:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "3039:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3093:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3093:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3104:3:18",
																				"nodeType": "YulLiteral",
																				"src": "3104:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3089:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3089:3:18"
																		},
																		"nativeSrc": "3089:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "3114:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3114:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3130:3:18",
																								"nodeType": "YulLiteral",
																								"src": "3130:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3135:1:18",
																								"nodeType": "YulLiteral",
																								"src": "3135:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3126:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "3126:3:18"
																						},
																						"nativeSrc": "3126:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "3126:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3139:1:18",
																						"nodeType": "YulLiteral",
																						"src": "3139:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3122:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "3122:3:18"
																				},
																				"nativeSrc": "3122:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "3122:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3110:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3110:3:18"
																		},
																		"nativeSrc": "3110:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3110:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3082:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3082:6:18"
																},
																"nativeSrc": "3082:61:18",
																"nodeType": "YulFunctionCall",
																"src": "3082:61:18"
															},
															"nativeSrc": "3082:61:18",
															"nodeType": "YulExpressionStatement",
															"src": "3082:61:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3163:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3163:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3174:3:18",
																				"nodeType": "YulLiteral",
																				"src": "3174:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3159:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3159:3:18"
																		},
																		"nativeSrc": "3159:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3159:19:18"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "3180:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3180:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3152:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3152:6:18"
																},
																"nativeSrc": "3152:35:18",
																"nodeType": "YulFunctionCall",
																"src": "3152:35:18"
															},
															"nativeSrc": "3152:35:18",
															"nodeType": "YulExpressionStatement",
															"src": "3152:35:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3207:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3207:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3218:3:18",
																				"nodeType": "YulLiteral",
																				"src": "3218:3:18",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3203:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3203:3:18"
																		},
																		"nativeSrc": "3203:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3203:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nativeSrc": "3228:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3228:6:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3236:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3236:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3224:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3224:3:18"
																		},
																		"nativeSrc": "3224:22:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3224:22:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3196:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3196:6:18"
																},
																"nativeSrc": "3196:51:18",
																"nodeType": "YulFunctionCall",
																"src": "3196:51:18"
															},
															"nativeSrc": "3196:51:18",
															"nodeType": "YulExpressionStatement",
															"src": "3196:51:18"
														},
														{
															"nativeSrc": "3256:17:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3256:17:18",
															"value": {
																"name": "tail_2",
																"nativeSrc": "3267:6:18",
																"nodeType": "YulIdentifier",
																"src": "3267:6:18"
															},
															"variables": [
																{
																	"name": "pos",
																	"nativeSrc": "3260:3:18",
																	"nodeType": "YulTypedName",
																	"src": "3260:3:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3282:27:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3282:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3302:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3302:6:18"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3296:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "3296:5:18"
																},
																"nativeSrc": "3296:13:18",
																"nodeType": "YulFunctionCall",
																"src": "3296:13:18"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3286:6:18",
																	"nodeType": "YulTypedName",
																	"src": "3286:6:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3325:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3325:6:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3333:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3333:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3318:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3318:6:18"
																},
																"nativeSrc": "3318:22:18",
																"nodeType": "YulFunctionCall",
																"src": "3318:22:18"
															},
															"nativeSrc": "3318:22:18",
															"nodeType": "YulExpressionStatement",
															"src": "3318:22:18"
														},
														{
															"nativeSrc": "3349:22:18",
															"nodeType": "YulAssignment",
															"src": "3349:22:18",
															"value": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3360:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3360:6:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3368:2:18",
																		"nodeType": "YulLiteral",
																		"src": "3368:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3356:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3356:3:18"
																},
																"nativeSrc": "3356:15:18",
																"nodeType": "YulFunctionCall",
																"src": "3356:15:18"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "3349:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3349:3:18"
																}
															]
														},
														{
															"nativeSrc": "3380:29:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3380:29:18",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3398:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3398:6:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3406:2:18",
																		"nodeType": "YulLiteral",
																		"src": "3406:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3394:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3394:3:18"
																},
																"nativeSrc": "3394:15:18",
																"nodeType": "YulFunctionCall",
																"src": "3394:15:18"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "3384:6:18",
																	"nodeType": "YulTypedName",
																	"src": "3384:6:18",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3418:10:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3418:10:18",
															"value": {
																"kind": "number",
																"nativeSrc": "3427:1:18",
																"nodeType": "YulLiteral",
																"src": "3427:1:18",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "3422:1:18",
																	"nodeType": "YulTypedName",
																	"src": "3422:1:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3486:120:18",
																"nodeType": "YulBlock",
																"src": "3486:120:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3507:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "3507:3:18"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nativeSrc": "3518:6:18",
																							"nodeType": "YulIdentifier",
																							"src": "3518:6:18"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3512:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "3512:5:18"
																					},
																					"nativeSrc": "3512:13:18",
																					"nodeType": "YulFunctionCall",
																					"src": "3512:13:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3500:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3500:6:18"
																			},
																			"nativeSrc": "3500:26:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3500:26:18"
																		},
																		"nativeSrc": "3500:26:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "3500:26:18"
																	},
																	{
																		"nativeSrc": "3539:19:18",
																		"nodeType": "YulAssignment",
																		"src": "3539:19:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3550:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "3550:3:18"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "3555:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3555:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3546:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3546:3:18"
																			},
																			"nativeSrc": "3546:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3546:12:18"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "3539:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3539:3:18"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3571:25:18",
																		"nodeType": "YulAssignment",
																		"src": "3571:25:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "3585:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "3585:6:18"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "3593:2:18",
																					"nodeType": "YulIdentifier",
																					"src": "3593:2:18"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3581:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3581:3:18"
																			},
																			"nativeSrc": "3581:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3581:15:18"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "3571:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3571:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "3448:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "3448:1:18"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3451:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "3451:6:18"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3445:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "3445:2:18"
																},
																"nativeSrc": "3445:13:18",
																"nodeType": "YulFunctionCall",
																"src": "3445:13:18"
															},
															"nativeSrc": "3437:169:18",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3459:18:18",
																"nodeType": "YulBlock",
																"src": "3459:18:18",
																"statements": [
																	{
																		"nativeSrc": "3461:14:18",
																		"nodeType": "YulAssignment",
																		"src": "3461:14:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "3470:1:18",
																					"nodeType": "YulIdentifier",
																					"src": "3470:1:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3473:1:18",
																					"nodeType": "YulLiteral",
																					"src": "3473:1:18",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3466:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3466:3:18"
																			},
																			"nativeSrc": "3466:9:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3466:9:18"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "3461:1:18",
																				"nodeType": "YulIdentifier",
																				"src": "3461:1:18"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3441:3:18",
																"nodeType": "YulBlock",
																"src": "3441:3:18",
																"statements": []
															},
															"src": "3437:169:18"
														},
														{
															"nativeSrc": "3615:11:18",
															"nodeType": "YulAssignment",
															"src": "3615:11:18",
															"value": {
																"name": "pos",
																"nativeSrc": "3623:3:18",
																"nodeType": "YulIdentifier",
																"src": "3623:3:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3615:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "3615:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "2373:1259:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2651:9:18",
														"nodeType": "YulTypedName",
														"src": "2651:9:18",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "2662:6:18",
														"nodeType": "YulTypedName",
														"src": "2662:6:18",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "2670:6:18",
														"nodeType": "YulTypedName",
														"src": "2670:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "2678:6:18",
														"nodeType": "YulTypedName",
														"src": "2678:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2686:6:18",
														"nodeType": "YulTypedName",
														"src": "2686:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2694:6:18",
														"nodeType": "YulTypedName",
														"src": "2694:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2702:6:18",
														"nodeType": "YulTypedName",
														"src": "2702:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2710:6:18",
														"nodeType": "YulTypedName",
														"src": "2710:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2721:4:18",
														"nodeType": "YulTypedName",
														"src": "2721:4:18",
														"type": ""
													}
												],
												"src": "2373:1259:18"
											},
											{
												"body": {
													"nativeSrc": "3807:523:18",
													"nodeType": "YulBlock",
													"src": "3807:523:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "3854:16:18",
																"nodeType": "YulBlock",
																"src": "3854:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3863:1:18",
																					"nodeType": "YulLiteral",
																					"src": "3863:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3866:1:18",
																					"nodeType": "YulLiteral",
																					"src": "3866:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3856:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "3856:6:18"
																			},
																			"nativeSrc": "3856:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "3856:12:18"
																		},
																		"nativeSrc": "3856:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "3856:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3828:7:18",
																				"nodeType": "YulIdentifier",
																				"src": "3828:7:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3837:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3837:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3824:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3824:3:18"
																		},
																		"nativeSrc": "3824:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3824:23:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3849:3:18",
																		"nodeType": "YulLiteral",
																		"src": "3849:3:18",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3820:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "3820:3:18"
																},
																"nativeSrc": "3820:33:18",
																"nodeType": "YulFunctionCall",
																"src": "3820:33:18"
															},
															"nativeSrc": "3817:53:18",
															"nodeType": "YulIf",
															"src": "3817:53:18"
														},
														{
															"nativeSrc": "3879:39:18",
															"nodeType": "YulAssignment",
															"src": "3879:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3908:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "3908:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "3889:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "3889:18:18"
																},
																"nativeSrc": "3889:29:18",
																"nodeType": "YulFunctionCall",
																"src": "3889:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3879:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3879:6:18"
																}
															]
														},
														{
															"nativeSrc": "3927:48:18",
															"nodeType": "YulAssignment",
															"src": "3927:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3960:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "3960:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3971:2:18",
																				"nodeType": "YulLiteral",
																				"src": "3971:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3956:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3956:3:18"
																		},
																		"nativeSrc": "3956:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3956:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "3937:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "3937:18:18"
																},
																"nativeSrc": "3937:38:18",
																"nodeType": "YulFunctionCall",
																"src": "3937:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "3927:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3927:6:18"
																}
															]
														},
														{
															"nativeSrc": "3984:42:18",
															"nodeType": "YulAssignment",
															"src": "3984:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4011:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4011:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4022:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4022:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4007:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4007:3:18"
																		},
																		"nativeSrc": "4007:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4007:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3994:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "3994:12:18"
																},
																"nativeSrc": "3994:32:18",
																"nodeType": "YulFunctionCall",
																"src": "3994:32:18"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "3984:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3984:6:18"
																}
															]
														},
														{
															"nativeSrc": "4035:42:18",
															"nodeType": "YulAssignment",
															"src": "4035:42:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4062:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4062:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4073:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4073:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4058:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4058:3:18"
																		},
																		"nativeSrc": "4058:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4058:18:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4045:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "4045:12:18"
																},
																"nativeSrc": "4045:32:18",
																"nodeType": "YulFunctionCall",
																"src": "4045:32:18"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4035:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4035:6:18"
																}
															]
														},
														{
															"nativeSrc": "4086:46:18",
															"nodeType": "YulVariableDeclaration",
															"src": "4086:46:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4116:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4116:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4127:3:18",
																				"nodeType": "YulLiteral",
																				"src": "4127:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4112:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4112:3:18"
																		},
																		"nativeSrc": "4112:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4112:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4099:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "4099:12:18"
																},
																"nativeSrc": "4099:33:18",
																"nodeType": "YulFunctionCall",
																"src": "4099:33:18"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4090:5:18",
																	"nodeType": "YulTypedName",
																	"src": "4090:5:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4180:16:18",
																"nodeType": "YulBlock",
																"src": "4180:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4189:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4189:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4192:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4192:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4182:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4182:6:18"
																			},
																			"nativeSrc": "4182:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4182:12:18"
																		},
																		"nativeSrc": "4182:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4182:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4154:5:18",
																				"nodeType": "YulIdentifier",
																				"src": "4154:5:18"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "4165:5:18",
																						"nodeType": "YulIdentifier",
																						"src": "4165:5:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4172:4:18",
																						"nodeType": "YulLiteral",
																						"src": "4172:4:18",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4161:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "4161:3:18"
																				},
																				"nativeSrc": "4161:16:18",
																				"nodeType": "YulFunctionCall",
																				"src": "4161:16:18"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "4151:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "4151:2:18"
																		},
																		"nativeSrc": "4151:27:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4151:27:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4144:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4144:6:18"
																},
																"nativeSrc": "4144:35:18",
																"nodeType": "YulFunctionCall",
																"src": "4144:35:18"
															},
															"nativeSrc": "4141:55:18",
															"nodeType": "YulIf",
															"src": "4141:55:18"
														},
														{
															"nativeSrc": "4205:15:18",
															"nodeType": "YulAssignment",
															"src": "4205:15:18",
															"value": {
																"name": "value",
																"nativeSrc": "4215:5:18",
																"nodeType": "YulIdentifier",
																"src": "4215:5:18"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4205:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4205:6:18"
																}
															]
														},
														{
															"nativeSrc": "4229:43:18",
															"nodeType": "YulAssignment",
															"src": "4229:43:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4256:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4256:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4267:3:18",
																				"nodeType": "YulLiteral",
																				"src": "4267:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4252:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4252:3:18"
																		},
																		"nativeSrc": "4252:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4252:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4239:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "4239:12:18"
																},
																"nativeSrc": "4239:33:18",
																"nodeType": "YulFunctionCall",
																"src": "4239:33:18"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "4229:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4229:6:18"
																}
															]
														},
														{
															"nativeSrc": "4281:43:18",
															"nodeType": "YulAssignment",
															"src": "4281:43:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4308:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4308:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4319:3:18",
																				"nodeType": "YulLiteral",
																				"src": "4319:3:18",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4304:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4304:3:18"
																		},
																		"nativeSrc": "4304:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4304:19:18"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4291:12:18",
																	"nodeType": "YulIdentifier",
																	"src": "4291:12:18"
																},
																"nativeSrc": "4291:33:18",
																"nodeType": "YulFunctionCall",
																"src": "4291:33:18"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nativeSrc": "4281:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4281:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "3637:693:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3725:9:18",
														"nodeType": "YulTypedName",
														"src": "3725:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3736:7:18",
														"nodeType": "YulTypedName",
														"src": "3736:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3748:6:18",
														"nodeType": "YulTypedName",
														"src": "3748:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3756:6:18",
														"nodeType": "YulTypedName",
														"src": "3756:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3764:6:18",
														"nodeType": "YulTypedName",
														"src": "3764:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3772:6:18",
														"nodeType": "YulTypedName",
														"src": "3772:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3780:6:18",
														"nodeType": "YulTypedName",
														"src": "3780:6:18",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "3788:6:18",
														"nodeType": "YulTypedName",
														"src": "3788:6:18",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "3796:6:18",
														"nodeType": "YulTypedName",
														"src": "3796:6:18",
														"type": ""
													}
												],
												"src": "3637:693:18"
											},
											{
												"body": {
													"nativeSrc": "4422:173:18",
													"nodeType": "YulBlock",
													"src": "4422:173:18",
													"statements": [
														{
															"body": {
																"nativeSrc": "4468:16:18",
																"nodeType": "YulBlock",
																"src": "4468:16:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4477:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4477:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4480:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4480:1:18",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4470:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4470:6:18"
																			},
																			"nativeSrc": "4470:12:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4470:12:18"
																		},
																		"nativeSrc": "4470:12:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4470:12:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4443:7:18",
																				"nodeType": "YulIdentifier",
																				"src": "4443:7:18"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4452:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4452:9:18"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4439:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4439:3:18"
																		},
																		"nativeSrc": "4439:23:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4439:23:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4464:2:18",
																		"nodeType": "YulLiteral",
																		"src": "4464:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4435:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4435:3:18"
																},
																"nativeSrc": "4435:32:18",
																"nodeType": "YulFunctionCall",
																"src": "4435:32:18"
															},
															"nativeSrc": "4432:52:18",
															"nodeType": "YulIf",
															"src": "4432:52:18"
														},
														{
															"nativeSrc": "4493:39:18",
															"nodeType": "YulAssignment",
															"src": "4493:39:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4522:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "4522:9:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4503:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "4503:18:18"
																},
																"nativeSrc": "4503:29:18",
																"nodeType": "YulFunctionCall",
																"src": "4503:29:18"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "4493:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4493:6:18"
																}
															]
														},
														{
															"nativeSrc": "4541:48:18",
															"nodeType": "YulAssignment",
															"src": "4541:48:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4574:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "4574:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4585:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4585:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4570:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "4570:3:18"
																		},
																		"nativeSrc": "4570:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4570:18:18"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4551:18:18",
																	"nodeType": "YulIdentifier",
																	"src": "4551:18:18"
																},
																"nativeSrc": "4551:38:18",
																"nodeType": "YulFunctionCall",
																"src": "4551:38:18"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4541:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4541:6:18"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "4335:260:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4380:9:18",
														"nodeType": "YulTypedName",
														"src": "4380:9:18",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4391:7:18",
														"nodeType": "YulTypedName",
														"src": "4391:7:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4403:6:18",
														"nodeType": "YulTypedName",
														"src": "4403:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4411:6:18",
														"nodeType": "YulTypedName",
														"src": "4411:6:18",
														"type": ""
													}
												],
												"src": "4335:260:18"
											},
											{
												"body": {
													"nativeSrc": "4655:325:18",
													"nodeType": "YulBlock",
													"src": "4655:325:18",
													"statements": [
														{
															"nativeSrc": "4665:22:18",
															"nodeType": "YulAssignment",
															"src": "4665:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4679:1:18",
																		"nodeType": "YulLiteral",
																		"src": "4679:1:18",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "4682:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "4682:4:18"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "4675:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4675:3:18"
																},
																"nativeSrc": "4675:12:18",
																"nodeType": "YulFunctionCall",
																"src": "4675:12:18"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "4665:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4665:6:18"
																}
															]
														},
														{
															"nativeSrc": "4696:38:18",
															"nodeType": "YulVariableDeclaration",
															"src": "4696:38:18",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4726:4:18",
																		"nodeType": "YulIdentifier",
																		"src": "4726:4:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4732:1:18",
																		"nodeType": "YulLiteral",
																		"src": "4732:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4722:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "4722:3:18"
																},
																"nativeSrc": "4722:12:18",
																"nodeType": "YulFunctionCall",
																"src": "4722:12:18"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "4700:18:18",
																	"nodeType": "YulTypedName",
																	"src": "4700:18:18",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4773:31:18",
																"nodeType": "YulBlock",
																"src": "4773:31:18",
																"statements": [
																	{
																		"nativeSrc": "4775:27:18",
																		"nodeType": "YulAssignment",
																		"src": "4775:27:18",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "4789:6:18",
																					"nodeType": "YulIdentifier",
																					"src": "4789:6:18"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4797:4:18",
																					"nodeType": "YulLiteral",
																					"src": "4797:4:18",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4785:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "4785:3:18"
																			},
																			"nativeSrc": "4785:17:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4785:17:18"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "4775:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4775:6:18"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4753:18:18",
																		"nodeType": "YulIdentifier",
																		"src": "4753:18:18"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4746:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "4746:6:18"
																},
																"nativeSrc": "4746:26:18",
																"nodeType": "YulFunctionCall",
																"src": "4746:26:18"
															},
															"nativeSrc": "4743:61:18",
															"nodeType": "YulIf",
															"src": "4743:61:18"
														},
														{
															"body": {
																"nativeSrc": "4863:111:18",
																"nodeType": "YulBlock",
																"src": "4863:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4884:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4884:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4891:3:18",
																							"nodeType": "YulLiteral",
																							"src": "4891:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4896:10:18",
																							"nodeType": "YulLiteral",
																							"src": "4896:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4887:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "4887:3:18"
																					},
																					"nativeSrc": "4887:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "4887:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4877:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4877:6:18"
																			},
																			"nativeSrc": "4877:31:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4877:31:18"
																		},
																		"nativeSrc": "4877:31:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4877:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4928:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4928:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4931:4:18",
																					"nodeType": "YulLiteral",
																					"src": "4931:4:18",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4921:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4921:6:18"
																			},
																			"nativeSrc": "4921:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4921:15:18"
																		},
																		"nativeSrc": "4921:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4921:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4956:1:18",
																					"nodeType": "YulLiteral",
																					"src": "4956:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4959:4:18",
																					"nodeType": "YulLiteral",
																					"src": "4959:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4949:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4949:6:18"
																			},
																			"nativeSrc": "4949:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "4949:15:18"
																		},
																		"nativeSrc": "4949:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "4949:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4819:18:18",
																		"nodeType": "YulIdentifier",
																		"src": "4819:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "4842:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "4842:6:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4850:2:18",
																				"nodeType": "YulLiteral",
																				"src": "4850:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "4839:2:18",
																			"nodeType": "YulIdentifier",
																			"src": "4839:2:18"
																		},
																		"nativeSrc": "4839:14:18",
																		"nodeType": "YulFunctionCall",
																		"src": "4839:14:18"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "4816:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "4816:2:18"
																},
																"nativeSrc": "4816:38:18",
																"nodeType": "YulFunctionCall",
																"src": "4816:38:18"
															},
															"nativeSrc": "4813:161:18",
															"nodeType": "YulIf",
															"src": "4813:161:18"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "4600:380:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4635:4:18",
														"nodeType": "YulTypedName",
														"src": "4635:4:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "4644:6:18",
														"nodeType": "YulTypedName",
														"src": "4644:6:18",
														"type": ""
													}
												],
												"src": "4600:380:18"
											},
											{
												"body": {
													"nativeSrc": "5159:223:18",
													"nodeType": "YulBlock",
													"src": "5159:223:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5176:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5176:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5187:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5187:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5169:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5169:6:18"
																},
																"nativeSrc": "5169:21:18",
																"nodeType": "YulFunctionCall",
																"src": "5169:21:18"
															},
															"nativeSrc": "5169:21:18",
															"nodeType": "YulExpressionStatement",
															"src": "5169:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5210:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5210:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5221:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5221:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5206:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5206:3:18"
																		},
																		"nativeSrc": "5206:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5206:18:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5226:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5226:2:18",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5199:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5199:6:18"
																},
																"nativeSrc": "5199:30:18",
																"nodeType": "YulFunctionCall",
																"src": "5199:30:18"
															},
															"nativeSrc": "5199:30:18",
															"nodeType": "YulExpressionStatement",
															"src": "5199:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5249:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5249:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5260:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5260:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5245:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5245:3:18"
																		},
																		"nativeSrc": "5245:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5245:18:18"
																	},
																	{
																		"hexValue": "4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f",
																		"kind": "string",
																		"nativeSrc": "5265:34:18",
																		"nodeType": "YulLiteral",
																		"src": "5265:34:18",
																		"type": "",
																		"value": "Only admin can call this functio"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5238:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5238:6:18"
																},
																"nativeSrc": "5238:62:18",
																"nodeType": "YulFunctionCall",
																"src": "5238:62:18"
															},
															"nativeSrc": "5238:62:18",
															"nodeType": "YulExpressionStatement",
															"src": "5238:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5320:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5320:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5331:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5331:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5316:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5316:3:18"
																		},
																		"nativeSrc": "5316:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5316:18:18"
																	},
																	{
																		"hexValue": "6e",
																		"kind": "string",
																		"nativeSrc": "5336:3:18",
																		"nodeType": "YulLiteral",
																		"src": "5336:3:18",
																		"type": "",
																		"value": "n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5309:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5309:6:18"
																},
																"nativeSrc": "5309:31:18",
																"nodeType": "YulFunctionCall",
																"src": "5309:31:18"
															},
															"nativeSrc": "5309:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "5309:31:18"
														},
														{
															"nativeSrc": "5349:27:18",
															"nodeType": "YulAssignment",
															"src": "5349:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5361:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5361:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5372:3:18",
																		"nodeType": "YulLiteral",
																		"src": "5372:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5357:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5357:3:18"
																},
																"nativeSrc": "5357:19:18",
																"nodeType": "YulFunctionCall",
																"src": "5357:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5349:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "5349:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "4985:397:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5136:9:18",
														"nodeType": "YulTypedName",
														"src": "5136:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5150:4:18",
														"nodeType": "YulTypedName",
														"src": "5150:4:18",
														"type": ""
													}
												],
												"src": "4985:397:18"
											},
											{
												"body": {
													"nativeSrc": "5419:95:18",
													"nodeType": "YulBlock",
													"src": "5419:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5436:1:18",
																		"nodeType": "YulLiteral",
																		"src": "5436:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5443:3:18",
																				"nodeType": "YulLiteral",
																				"src": "5443:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5448:10:18",
																				"nodeType": "YulLiteral",
																				"src": "5448:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5439:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5439:3:18"
																		},
																		"nativeSrc": "5439:20:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5439:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5429:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5429:6:18"
																},
																"nativeSrc": "5429:31:18",
																"nodeType": "YulFunctionCall",
																"src": "5429:31:18"
															},
															"nativeSrc": "5429:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "5429:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5476:1:18",
																		"nodeType": "YulLiteral",
																		"src": "5476:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5479:4:18",
																		"nodeType": "YulLiteral",
																		"src": "5479:4:18",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5469:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5469:6:18"
																},
																"nativeSrc": "5469:15:18",
																"nodeType": "YulFunctionCall",
																"src": "5469:15:18"
															},
															"nativeSrc": "5469:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "5469:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5500:1:18",
																		"nodeType": "YulLiteral",
																		"src": "5500:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5503:4:18",
																		"nodeType": "YulLiteral",
																		"src": "5503:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5493:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5493:6:18"
																},
																"nativeSrc": "5493:15:18",
																"nodeType": "YulFunctionCall",
																"src": "5493:15:18"
															},
															"nativeSrc": "5493:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "5493:15:18"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "5387:127:18",
												"nodeType": "YulFunctionDefinition",
												"src": "5387:127:18"
											},
											{
												"body": {
													"nativeSrc": "5693:224:18",
													"nodeType": "YulBlock",
													"src": "5693:224:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5710:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5710:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5721:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5721:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5703:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5703:6:18"
																},
																"nativeSrc": "5703:21:18",
																"nodeType": "YulFunctionCall",
																"src": "5703:21:18"
															},
															"nativeSrc": "5703:21:18",
															"nodeType": "YulExpressionStatement",
															"src": "5703:21:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5744:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5744:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5755:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5755:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5740:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5740:3:18"
																		},
																		"nativeSrc": "5740:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5740:18:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5760:2:18",
																		"nodeType": "YulLiteral",
																		"src": "5760:2:18",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5733:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5733:6:18"
																},
																"nativeSrc": "5733:30:18",
																"nodeType": "YulFunctionCall",
																"src": "5733:30:18"
															},
															"nativeSrc": "5733:30:18",
															"nodeType": "YulExpressionStatement",
															"src": "5733:30:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5783:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5783:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5794:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5794:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5779:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5779:3:18"
																		},
																		"nativeSrc": "5779:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5779:18:18"
																	},
																	{
																		"hexValue": "4f6e6c79206d61726b65742063616e2063616c6c20746869732066756e637469",
																		"kind": "string",
																		"nativeSrc": "5799:34:18",
																		"nodeType": "YulLiteral",
																		"src": "5799:34:18",
																		"type": "",
																		"value": "Only market can call this functi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5772:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5772:6:18"
																},
																"nativeSrc": "5772:62:18",
																"nodeType": "YulFunctionCall",
																"src": "5772:62:18"
															},
															"nativeSrc": "5772:62:18",
															"nodeType": "YulExpressionStatement",
															"src": "5772:62:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5854:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "5854:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5865:2:18",
																				"nodeType": "YulLiteral",
																				"src": "5865:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5850:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "5850:3:18"
																		},
																		"nativeSrc": "5850:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "5850:18:18"
																	},
																	{
																		"hexValue": "6f6e",
																		"kind": "string",
																		"nativeSrc": "5870:4:18",
																		"nodeType": "YulLiteral",
																		"src": "5870:4:18",
																		"type": "",
																		"value": "on"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5843:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5843:6:18"
																},
																"nativeSrc": "5843:32:18",
																"nodeType": "YulFunctionCall",
																"src": "5843:32:18"
															},
															"nativeSrc": "5843:32:18",
															"nodeType": "YulExpressionStatement",
															"src": "5843:32:18"
														},
														{
															"nativeSrc": "5884:27:18",
															"nodeType": "YulAssignment",
															"src": "5884:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5896:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "5896:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5907:3:18",
																		"nodeType": "YulLiteral",
																		"src": "5907:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5892:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "5892:3:18"
																},
																"nativeSrc": "5892:19:18",
																"nodeType": "YulFunctionCall",
																"src": "5892:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5884:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "5884:4:18"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7ee95a850e265287713312fd6edb847021666b882f6668bb7e21a4764e4399a2__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5519:398:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5670:9:18",
														"nodeType": "YulTypedName",
														"src": "5670:9:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5684:4:18",
														"nodeType": "YulTypedName",
														"src": "5684:4:18",
														"type": ""
													}
												],
												"src": "5519:398:18"
											},
											{
												"body": {
													"nativeSrc": "6163:350:18",
													"nodeType": "YulBlock",
													"src": "6163:350:18",
													"statements": [
														{
															"nativeSrc": "6173:27:18",
															"nodeType": "YulAssignment",
															"src": "6173:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6185:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6185:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6196:3:18",
																		"nodeType": "YulLiteral",
																		"src": "6196:3:18",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6181:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6181:3:18"
																},
																"nativeSrc": "6181:19:18",
																"nodeType": "YulFunctionCall",
																"src": "6181:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6173:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "6173:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6216:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6216:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6227:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6227:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6209:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6209:6:18"
																},
																"nativeSrc": "6209:25:18",
																"nodeType": "YulFunctionCall",
																"src": "6209:25:18"
															},
															"nativeSrc": "6209:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "6209:25:18"
														},
														{
															"nativeSrc": "6243:29:18",
															"nodeType": "YulVariableDeclaration",
															"src": "6243:29:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "6261:3:18",
																				"nodeType": "YulLiteral",
																				"src": "6261:3:18",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6266:1:18",
																				"nodeType": "YulLiteral",
																				"src": "6266:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "6257:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6257:3:18"
																		},
																		"nativeSrc": "6257:11:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6257:11:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6270:1:18",
																		"nodeType": "YulLiteral",
																		"src": "6270:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "6253:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6253:3:18"
																},
																"nativeSrc": "6253:19:18",
																"nodeType": "YulFunctionCall",
																"src": "6253:19:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "6247:2:18",
																	"nodeType": "YulTypedName",
																	"src": "6247:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6292:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6292:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6303:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6303:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6288:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6288:3:18"
																		},
																		"nativeSrc": "6288:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6288:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "6312:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "6312:6:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "6320:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "6320:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6308:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6308:3:18"
																		},
																		"nativeSrc": "6308:15:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6308:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6281:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6281:6:18"
																},
																"nativeSrc": "6281:43:18",
																"nodeType": "YulFunctionCall",
																"src": "6281:43:18"
															},
															"nativeSrc": "6281:43:18",
															"nodeType": "YulExpressionStatement",
															"src": "6281:43:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6344:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6344:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6355:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6355:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6340:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6340:3:18"
																		},
																		"nativeSrc": "6340:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6340:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "6364:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "6364:6:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "6372:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "6372:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6360:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6360:3:18"
																		},
																		"nativeSrc": "6360:15:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6360:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6333:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6333:6:18"
																},
																"nativeSrc": "6333:43:18",
																"nodeType": "YulFunctionCall",
																"src": "6333:43:18"
															},
															"nativeSrc": "6333:43:18",
															"nodeType": "YulExpressionStatement",
															"src": "6333:43:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6396:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6396:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6407:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6407:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6392:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6392:3:18"
																		},
																		"nativeSrc": "6392:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6392:18:18"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "6412:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6412:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6385:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6385:6:18"
																},
																"nativeSrc": "6385:34:18",
																"nodeType": "YulFunctionCall",
																"src": "6385:34:18"
															},
															"nativeSrc": "6385:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "6385:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6439:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6439:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6450:3:18",
																				"nodeType": "YulLiteral",
																				"src": "6450:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6435:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6435:3:18"
																		},
																		"nativeSrc": "6435:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6435:19:18"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "6456:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6456:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6428:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6428:6:18"
																},
																"nativeSrc": "6428:35:18",
																"nodeType": "YulFunctionCall",
																"src": "6428:35:18"
															},
															"nativeSrc": "6428:35:18",
															"nodeType": "YulExpressionStatement",
															"src": "6428:35:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6483:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6483:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6494:3:18",
																				"nodeType": "YulLiteral",
																				"src": "6494:3:18",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6479:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6479:3:18"
																		},
																		"nativeSrc": "6479:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6479:19:18"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "6500:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "6500:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6472:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6472:6:18"
																},
																"nativeSrc": "6472:35:18",
																"nodeType": "YulFunctionCall",
																"src": "6472:35:18"
															},
															"nativeSrc": "6472:35:18",
															"nodeType": "YulExpressionStatement",
															"src": "6472:35:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5922:591:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6092:9:18",
														"nodeType": "YulTypedName",
														"src": "6092:9:18",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "6103:6:18",
														"nodeType": "YulTypedName",
														"src": "6103:6:18",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "6111:6:18",
														"nodeType": "YulTypedName",
														"src": "6111:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "6119:6:18",
														"nodeType": "YulTypedName",
														"src": "6119:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6127:6:18",
														"nodeType": "YulTypedName",
														"src": "6127:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6135:6:18",
														"nodeType": "YulTypedName",
														"src": "6135:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6143:6:18",
														"nodeType": "YulTypedName",
														"src": "6143:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6154:4:18",
														"nodeType": "YulTypedName",
														"src": "6154:4:18",
														"type": ""
													}
												],
												"src": "5922:591:18"
											},
											{
												"body": {
													"nativeSrc": "6647:175:18",
													"nodeType": "YulBlock",
													"src": "6647:175:18",
													"statements": [
														{
															"nativeSrc": "6657:26:18",
															"nodeType": "YulAssignment",
															"src": "6657:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6669:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6669:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6680:2:18",
																		"nodeType": "YulLiteral",
																		"src": "6680:2:18",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6665:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6665:3:18"
																},
																"nativeSrc": "6665:18:18",
																"nodeType": "YulFunctionCall",
																"src": "6665:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6657:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "6657:4:18"
																}
															]
														},
														{
															"nativeSrc": "6692:29:18",
															"nodeType": "YulVariableDeclaration",
															"src": "6692:29:18",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "6710:3:18",
																				"nodeType": "YulLiteral",
																				"src": "6710:3:18",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6715:1:18",
																				"nodeType": "YulLiteral",
																				"src": "6715:1:18",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "6706:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6706:3:18"
																		},
																		"nativeSrc": "6706:11:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6706:11:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6719:1:18",
																		"nodeType": "YulLiteral",
																		"src": "6719:1:18",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "6702:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "6702:3:18"
																},
																"nativeSrc": "6702:19:18",
																"nodeType": "YulFunctionCall",
																"src": "6702:19:18"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "6696:2:18",
																	"nodeType": "YulTypedName",
																	"src": "6696:2:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6737:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "6737:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6752:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "6752:6:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "6760:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "6760:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6748:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6748:3:18"
																		},
																		"nativeSrc": "6748:15:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6748:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6730:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6730:6:18"
																},
																"nativeSrc": "6730:34:18",
																"nodeType": "YulFunctionCall",
																"src": "6730:34:18"
															},
															"nativeSrc": "6730:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "6730:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6784:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "6784:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6795:2:18",
																				"nodeType": "YulLiteral",
																				"src": "6795:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6780:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6780:3:18"
																		},
																		"nativeSrc": "6780:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6780:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "6804:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "6804:6:18"
																			},
																			{
																				"name": "_1",
																				"nativeSrc": "6812:2:18",
																				"nodeType": "YulIdentifier",
																				"src": "6812:2:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6800:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "6800:3:18"
																		},
																		"nativeSrc": "6800:15:18",
																		"nodeType": "YulFunctionCall",
																		"src": "6800:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6773:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "6773:6:18"
																},
																"nativeSrc": "6773:43:18",
																"nodeType": "YulFunctionCall",
																"src": "6773:43:18"
															},
															"nativeSrc": "6773:43:18",
															"nodeType": "YulExpressionStatement",
															"src": "6773:43:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "6518:304:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6608:9:18",
														"nodeType": "YulTypedName",
														"src": "6608:9:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6619:6:18",
														"nodeType": "YulTypedName",
														"src": "6619:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6627:6:18",
														"nodeType": "YulTypedName",
														"src": "6627:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6638:4:18",
														"nodeType": "YulTypedName",
														"src": "6638:4:18",
														"type": ""
													}
												],
												"src": "6518:304:18"
											},
											{
												"body": {
													"nativeSrc": "6984:188:18",
													"nodeType": "YulBlock",
													"src": "6984:188:18",
													"statements": [
														{
															"nativeSrc": "6994:26:18",
															"nodeType": "YulAssignment",
															"src": "6994:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7006:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7006:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7017:2:18",
																		"nodeType": "YulLiteral",
																		"src": "7017:2:18",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7002:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "7002:3:18"
																},
																"nativeSrc": "7002:18:18",
																"nodeType": "YulFunctionCall",
																"src": "7002:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6994:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "6994:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7036:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7036:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "7051:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "7051:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7067:3:18",
																								"nodeType": "YulLiteral",
																								"src": "7067:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7072:1:18",
																								"nodeType": "YulLiteral",
																								"src": "7072:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7063:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "7063:3:18"
																						},
																						"nativeSrc": "7063:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "7063:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7076:1:18",
																						"nodeType": "YulLiteral",
																						"src": "7076:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7059:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "7059:3:18"
																				},
																				"nativeSrc": "7059:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "7059:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7047:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:18"
																		},
																		"nativeSrc": "7047:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7047:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7029:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7029:6:18"
																},
																"nativeSrc": "7029:51:18",
																"nodeType": "YulFunctionCall",
																"src": "7029:51:18"
															},
															"nativeSrc": "7029:51:18",
															"nodeType": "YulExpressionStatement",
															"src": "7029:51:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7100:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "7100:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7111:2:18",
																				"nodeType": "YulLiteral",
																				"src": "7111:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7096:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7096:3:18"
																		},
																		"nativeSrc": "7096:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7096:18:18"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "7116:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "7116:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7089:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7089:6:18"
																},
																"nativeSrc": "7089:34:18",
																"nodeType": "YulFunctionCall",
																"src": "7089:34:18"
															},
															"nativeSrc": "7089:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "7089:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7143:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "7143:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7154:2:18",
																				"nodeType": "YulLiteral",
																				"src": "7154:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7139:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7139:3:18"
																		},
																		"nativeSrc": "7139:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7139:18:18"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7159:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "7159:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7132:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7132:6:18"
																},
																"nativeSrc": "7132:34:18",
																"nodeType": "YulFunctionCall",
																"src": "7132:34:18"
															},
															"nativeSrc": "7132:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "7132:34:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6827:345:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6937:9:18",
														"nodeType": "YulTypedName",
														"src": "6937:9:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6948:6:18",
														"nodeType": "YulTypedName",
														"src": "6948:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6956:6:18",
														"nodeType": "YulTypedName",
														"src": "6956:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6964:6:18",
														"nodeType": "YulTypedName",
														"src": "6964:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6975:4:18",
														"nodeType": "YulTypedName",
														"src": "6975:4:18",
														"type": ""
													}
												],
												"src": "6827:345:18"
											},
											{
												"body": {
													"nativeSrc": "7278:102:18",
													"nodeType": "YulBlock",
													"src": "7278:102:18",
													"statements": [
														{
															"nativeSrc": "7288:26:18",
															"nodeType": "YulAssignment",
															"src": "7288:26:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7300:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7300:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7311:2:18",
																		"nodeType": "YulLiteral",
																		"src": "7311:2:18",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7296:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "7296:3:18"
																},
																"nativeSrc": "7296:18:18",
																"nodeType": "YulFunctionCall",
																"src": "7296:18:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7288:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "7288:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7330:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7330:9:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "7345:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "7345:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7361:3:18",
																								"nodeType": "YulLiteral",
																								"src": "7361:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7366:1:18",
																								"nodeType": "YulLiteral",
																								"src": "7366:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7357:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "7357:3:18"
																						},
																						"nativeSrc": "7357:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "7357:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7370:1:18",
																						"nodeType": "YulLiteral",
																						"src": "7370:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7353:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "7353:3:18"
																				},
																				"nativeSrc": "7353:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "7353:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7341:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7341:3:18"
																		},
																		"nativeSrc": "7341:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7341:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7323:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7323:6:18"
																},
																"nativeSrc": "7323:51:18",
																"nodeType": "YulFunctionCall",
																"src": "7323:51:18"
															},
															"nativeSrc": "7323:51:18",
															"nodeType": "YulExpressionStatement",
															"src": "7323:51:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "7177:203:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7247:9:18",
														"nodeType": "YulTypedName",
														"src": "7247:9:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7258:6:18",
														"nodeType": "YulTypedName",
														"src": "7258:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7269:4:18",
														"nodeType": "YulTypedName",
														"src": "7269:4:18",
														"type": ""
													}
												],
												"src": "7177:203:18"
											},
											{
												"body": {
													"nativeSrc": "7433:174:18",
													"nodeType": "YulBlock",
													"src": "7433:174:18",
													"statements": [
														{
															"nativeSrc": "7443:16:18",
															"nodeType": "YulAssignment",
															"src": "7443:16:18",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7454:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "7454:1:18"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "7457:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "7457:1:18"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7450:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "7450:3:18"
																},
																"nativeSrc": "7450:9:18",
																"nodeType": "YulFunctionCall",
																"src": "7450:9:18"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "7443:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "7443:3:18"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7490:111:18",
																"nodeType": "YulBlock",
																"src": "7490:111:18",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7511:1:18",
																					"nodeType": "YulLiteral",
																					"src": "7511:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7518:3:18",
																							"nodeType": "YulLiteral",
																							"src": "7518:3:18",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "7523:10:18",
																							"nodeType": "YulLiteral",
																							"src": "7523:10:18",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "7514:3:18",
																						"nodeType": "YulIdentifier",
																						"src": "7514:3:18"
																					},
																					"nativeSrc": "7514:20:18",
																					"nodeType": "YulFunctionCall",
																					"src": "7514:20:18"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7504:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "7504:6:18"
																			},
																			"nativeSrc": "7504:31:18",
																			"nodeType": "YulFunctionCall",
																			"src": "7504:31:18"
																		},
																		"nativeSrc": "7504:31:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "7504:31:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7555:1:18",
																					"nodeType": "YulLiteral",
																					"src": "7555:1:18",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7558:4:18",
																					"nodeType": "YulLiteral",
																					"src": "7558:4:18",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7548:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "7548:6:18"
																			},
																			"nativeSrc": "7548:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "7548:15:18"
																		},
																		"nativeSrc": "7548:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "7548:15:18"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7583:1:18",
																					"nodeType": "YulLiteral",
																					"src": "7583:1:18",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7586:4:18",
																					"nodeType": "YulLiteral",
																					"src": "7586:4:18",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7576:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "7576:6:18"
																			},
																			"nativeSrc": "7576:15:18",
																			"nodeType": "YulFunctionCall",
																			"src": "7576:15:18"
																		},
																		"nativeSrc": "7576:15:18",
																		"nodeType": "YulExpressionStatement",
																		"src": "7576:15:18"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7474:1:18",
																		"nodeType": "YulIdentifier",
																		"src": "7474:1:18"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "7477:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "7477:3:18"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7471:2:18",
																	"nodeType": "YulIdentifier",
																	"src": "7471:2:18"
																},
																"nativeSrc": "7471:10:18",
																"nodeType": "YulFunctionCall",
																"src": "7471:10:18"
															},
															"nativeSrc": "7468:133:18",
															"nodeType": "YulIf",
															"src": "7468:133:18"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "7385:222:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "7416:1:18",
														"nodeType": "YulTypedName",
														"src": "7416:1:18",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "7419:1:18",
														"nodeType": "YulTypedName",
														"src": "7419:1:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "7425:3:18",
														"nodeType": "YulTypedName",
														"src": "7425:3:18",
														"type": ""
													}
												],
												"src": "7385:222:18"
											},
											{
												"body": {
													"nativeSrc": "7825:276:18",
													"nodeType": "YulBlock",
													"src": "7825:276:18",
													"statements": [
														{
															"nativeSrc": "7835:27:18",
															"nodeType": "YulAssignment",
															"src": "7835:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7847:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7847:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7858:3:18",
																		"nodeType": "YulLiteral",
																		"src": "7858:3:18",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7843:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "7843:3:18"
																},
																"nativeSrc": "7843:19:18",
																"nodeType": "YulFunctionCall",
																"src": "7843:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7835:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "7835:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7878:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "7878:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7889:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "7889:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7871:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7871:6:18"
																},
																"nativeSrc": "7871:25:18",
																"nodeType": "YulFunctionCall",
																"src": "7871:25:18"
															},
															"nativeSrc": "7871:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "7871:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7916:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "7916:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7927:2:18",
																				"nodeType": "YulLiteral",
																				"src": "7927:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7912:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7912:3:18"
																		},
																		"nativeSrc": "7912:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7912:18:18"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "7932:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "7932:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7905:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7905:6:18"
																},
																"nativeSrc": "7905:34:18",
																"nodeType": "YulFunctionCall",
																"src": "7905:34:18"
															},
															"nativeSrc": "7905:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "7905:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7959:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "7959:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7970:2:18",
																				"nodeType": "YulLiteral",
																				"src": "7970:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7955:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7955:3:18"
																		},
																		"nativeSrc": "7955:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7955:18:18"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7975:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "7975:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7948:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7948:6:18"
																},
																"nativeSrc": "7948:34:18",
																"nodeType": "YulFunctionCall",
																"src": "7948:34:18"
															},
															"nativeSrc": "7948:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "7948:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8002:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "8002:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8013:2:18",
																				"nodeType": "YulLiteral",
																				"src": "8013:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7998:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "7998:3:18"
																		},
																		"nativeSrc": "7998:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "7998:18:18"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "8018:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "8018:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7991:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7991:6:18"
																},
																"nativeSrc": "7991:34:18",
																"nodeType": "YulFunctionCall",
																"src": "7991:34:18"
															},
															"nativeSrc": "7991:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "7991:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8045:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "8045:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8056:3:18",
																				"nodeType": "YulLiteral",
																				"src": "8056:3:18",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8041:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8041:3:18"
																		},
																		"nativeSrc": "8041:19:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8041:19:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "8066:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "8066:6:18"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "8082:3:18",
																								"nodeType": "YulLiteral",
																								"src": "8082:3:18",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "8087:1:18",
																								"nodeType": "YulLiteral",
																								"src": "8087:1:18",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "8078:3:18",
																							"nodeType": "YulIdentifier",
																							"src": "8078:3:18"
																						},
																						"nativeSrc": "8078:11:18",
																						"nodeType": "YulFunctionCall",
																						"src": "8078:11:18"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "8091:1:18",
																						"nodeType": "YulLiteral",
																						"src": "8091:1:18",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "8074:3:18",
																					"nodeType": "YulIdentifier",
																					"src": "8074:3:18"
																				},
																				"nativeSrc": "8074:19:18",
																				"nodeType": "YulFunctionCall",
																				"src": "8074:19:18"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "8062:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8062:3:18"
																		},
																		"nativeSrc": "8062:32:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8062:32:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8034:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8034:6:18"
																},
																"nativeSrc": "8034:61:18",
																"nodeType": "YulFunctionCall",
																"src": "8034:61:18"
															},
															"nativeSrc": "8034:61:18",
															"nodeType": "YulExpressionStatement",
															"src": "8034:61:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "7612:489:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7762:9:18",
														"nodeType": "YulTypedName",
														"src": "7762:9:18",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7773:6:18",
														"nodeType": "YulTypedName",
														"src": "7773:6:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7781:6:18",
														"nodeType": "YulTypedName",
														"src": "7781:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7789:6:18",
														"nodeType": "YulTypedName",
														"src": "7789:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7797:6:18",
														"nodeType": "YulTypedName",
														"src": "7797:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7805:6:18",
														"nodeType": "YulTypedName",
														"src": "7805:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7816:4:18",
														"nodeType": "YulTypedName",
														"src": "7816:4:18",
														"type": ""
													}
												],
												"src": "7612:489:18"
											},
											{
												"body": {
													"nativeSrc": "8287:217:18",
													"nodeType": "YulBlock",
													"src": "8287:217:18",
													"statements": [
														{
															"nativeSrc": "8297:27:18",
															"nodeType": "YulAssignment",
															"src": "8297:27:18",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8309:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "8309:9:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8320:3:18",
																		"nodeType": "YulLiteral",
																		"src": "8320:3:18",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8305:3:18",
																	"nodeType": "YulIdentifier",
																	"src": "8305:3:18"
																},
																"nativeSrc": "8305:19:18",
																"nodeType": "YulFunctionCall",
																"src": "8305:19:18"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8297:4:18",
																	"nodeType": "YulIdentifier",
																	"src": "8297:4:18"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8340:9:18",
																		"nodeType": "YulIdentifier",
																		"src": "8340:9:18"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "8351:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "8351:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8333:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8333:6:18"
																},
																"nativeSrc": "8333:25:18",
																"nodeType": "YulFunctionCall",
																"src": "8333:25:18"
															},
															"nativeSrc": "8333:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "8333:25:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8378:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "8378:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8389:2:18",
																				"nodeType": "YulLiteral",
																				"src": "8389:2:18",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8374:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8374:3:18"
																		},
																		"nativeSrc": "8374:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8374:18:18"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "8398:6:18",
																				"nodeType": "YulIdentifier",
																				"src": "8398:6:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8406:4:18",
																				"nodeType": "YulLiteral",
																				"src": "8406:4:18",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "8394:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8394:3:18"
																		},
																		"nativeSrc": "8394:17:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8394:17:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8367:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8367:6:18"
																},
																"nativeSrc": "8367:45:18",
																"nodeType": "YulFunctionCall",
																"src": "8367:45:18"
															},
															"nativeSrc": "8367:45:18",
															"nodeType": "YulExpressionStatement",
															"src": "8367:45:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8432:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "8432:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8443:2:18",
																				"nodeType": "YulLiteral",
																				"src": "8443:2:18",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8428:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8428:3:18"
																		},
																		"nativeSrc": "8428:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8428:18:18"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "8448:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "8448:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8421:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8421:6:18"
																},
																"nativeSrc": "8421:34:18",
																"nodeType": "YulFunctionCall",
																"src": "8421:34:18"
															},
															"nativeSrc": "8421:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "8421:34:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8475:9:18",
																				"nodeType": "YulIdentifier",
																				"src": "8475:9:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8486:2:18",
																				"nodeType": "YulLiteral",
																				"src": "8486:2:18",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8471:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8471:3:18"
																		},
																		"nativeSrc": "8471:18:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8471:18:18"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "8491:6:18",
																		"nodeType": "YulIdentifier",
																		"src": "8491:6:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8464:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8464:6:18"
																},
																"nativeSrc": "8464:34:18",
																"nodeType": "YulFunctionCall",
																"src": "8464:34:18"
															},
															"nativeSrc": "8464:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "8464:34:18"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "8106:398:18",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8232:9:18",
														"nodeType": "YulTypedName",
														"src": "8232:9:18",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "8243:6:18",
														"nodeType": "YulTypedName",
														"src": "8243:6:18",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8251:6:18",
														"nodeType": "YulTypedName",
														"src": "8251:6:18",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8259:6:18",
														"nodeType": "YulTypedName",
														"src": "8259:6:18",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8267:6:18",
														"nodeType": "YulTypedName",
														"src": "8267:6:18",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8278:4:18",
														"nodeType": "YulTypedName",
														"src": "8278:4:18",
														"type": ""
													}
												],
												"src": "8106:398:18"
											},
											{
												"body": {
													"nativeSrc": "8541:95:18",
													"nodeType": "YulBlock",
													"src": "8541:95:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8558:1:18",
																		"nodeType": "YulLiteral",
																		"src": "8558:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8565:3:18",
																				"nodeType": "YulLiteral",
																				"src": "8565:3:18",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8570:10:18",
																				"nodeType": "YulLiteral",
																				"src": "8570:10:18",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "8561:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "8561:3:18"
																		},
																		"nativeSrc": "8561:20:18",
																		"nodeType": "YulFunctionCall",
																		"src": "8561:20:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8551:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8551:6:18"
																},
																"nativeSrc": "8551:31:18",
																"nodeType": "YulFunctionCall",
																"src": "8551:31:18"
															},
															"nativeSrc": "8551:31:18",
															"nodeType": "YulExpressionStatement",
															"src": "8551:31:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8598:1:18",
																		"nodeType": "YulLiteral",
																		"src": "8598:1:18",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8601:4:18",
																		"nodeType": "YulLiteral",
																		"src": "8601:4:18",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8591:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8591:6:18"
																},
																"nativeSrc": "8591:15:18",
																"nodeType": "YulFunctionCall",
																"src": "8591:15:18"
															},
															"nativeSrc": "8591:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "8591:15:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8622:1:18",
																		"nodeType": "YulLiteral",
																		"src": "8622:1:18",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8625:4:18",
																		"nodeType": "YulLiteral",
																		"src": "8625:4:18",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8615:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "8615:6:18"
																},
																"nativeSrc": "8615:15:18",
																"nodeType": "YulFunctionCall",
																"src": "8615:15:18"
															},
															"nativeSrc": "8615:15:18",
															"nodeType": "YulExpressionStatement",
															"src": "8615:15:18"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "8509:127:18",
												"nodeType": "YulFunctionDefinition",
												"src": "8509:127:18"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value4 := value\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Only admin can call this functio\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_7ee95a850e265287713312fd6edb847021666b882f6668bb7e21a4764e4399a2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Only market can call this functi\")\n        mstore(add(headStart, 96), \"on\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
									"id": 18,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2019": [
									{
										"length": 32,
										"start": 1847
									}
								],
								"2021": [
									{
										"length": 32,
										"start": 1805
									}
								],
								"2023": [
									{
										"length": 32,
										"start": 1763
									}
								],
								"2025": [
									{
										"length": 32,
										"start": 1928
									}
								],
								"2027": [
									{
										"length": 32,
										"start": 1968
									}
								],
								"2030": [
									{
										"length": 32,
										"start": 2055
									}
								],
								"2033": [
									{
										"length": 32,
										"start": 2100
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806370a0823111610093578063a9059cbb11610063578063a9059cbb146101e4578063b7881eb0146101f7578063d505accf1461020a578063dd62ed3e1461021d575f80fd5b806370a08231146101865780637ecebe00146101ae57806384b0196e146101c157806395d89b41146101dc575f80fd5b806323b872dd116100ce57806323b872dd14610147578063313ce5671461015a5780633644e515146101695780636dcea85f14610171575f80fd5b806306fdde03146100f4578063095ea7b31461011257806318160ddd14610135575b5f80fd5b6100fc610255565b6040516101099190610db2565b60405180910390f35b610125610120366004610de6565b6102e5565b6040519015158152602001610109565b6002545b604051908152602001610109565b610125610155366004610e0e565b6102fe565b60405160128152602001610109565b610139610321565b61018461017f366004610e47565b61032f565b005b610139610194366004610e47565b6001600160a01b03165f9081526020819052604090205490565b6101396101bc366004610e47565b6103ba565b6101c96103d7565b6040516101099796959493929190610e60565b6100fc610419565b6101256101f2366004610de6565b610428565b610139610205366004610e0e565b610435565b610184610218366004610ef7565b6104b7565b61013961022b366004610f64565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461026490610f95565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610f95565b80156102db5780601f106102b2576101008083540402835291602001916102db565b820191905f5260205f20905b8154815290600101906020018083116102be57829003601f168201915b5050505050905090565b5f336102f28185856105ed565b60019150505b92915050565b5f3361030b8582856105ff565b61031685858561067a565b506001949350505050565b5f61032a6106d7565b905090565b6009546001600160a01b031633146103985760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381165f908152600760205260408120546102f8565b5f6060805f805f60606103e8610800565b6103f061082d565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461026490610f95565b5f336102f281858561067a565b6008545f906001600160a01b0316331461049c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206d61726b65742063616e2063616c6c20746869732066756e63746960448201526137b760f11b606482015260840161038f565b6104a6848361085a565b6104b0838361085a565b5092915050565b834211156104db5760405163313c898160e11b81526004810185905260240161038f565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105268c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f61058082610892565b90505f61058f828787876108be565b9050896001600160a01b0316816001600160a01b0316146105d6576040516325c0072360e11b81526001600160a01b0380831660048301528b16602482015260440161038f565b6105e18a8a8a6105ed565b50505050505050505050565b6105fa83838360016108ea565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610674578181101561066657604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161038f565b61067484848484035f6108ea565b50505050565b6001600160a01b0383166106a357604051634b637e8f60e11b81525f600482015260240161038f565b6001600160a01b0382166106cc5760405163ec442f0560e01b81525f600482015260240161038f565b6105fa8383836109bc565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561072f57507f000000000000000000000000000000000000000000000000000000000000000046145b1561075957507f000000000000000000000000000000000000000000000000000000000000000090565b61032a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006005610ae2565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006006610ae2565b6001600160a01b0382166108835760405163ec442f0560e01b81525f600482015260240161038f565b61088e5f83836109bc565b5050565b5f6102f861089e6106d7565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f806108ce88888888610b8b565b9250925092506108de8282610c53565b50909695505050505050565b6001600160a01b0384166109135760405163e602df0560e01b81525f600482015260240161038f565b6001600160a01b03831661093c57604051634a1406b160e11b81525f600482015260240161038f565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561067457826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516109ae91815260200190565b60405180910390a350505050565b6001600160a01b0383166109e6578060025f8282546109db9190610fcd565b90915550610a569050565b6001600160a01b0383165f9081526020819052604090205481811015610a385760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161038f565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610a7257600280548290039055610a90565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ad591815260200190565b60405180910390a3505050565b606060ff8314610afc57610af583610d0b565b90506102f8565b818054610b0890610f95565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3490610f95565b8015610b7f5780601f10610b5657610100808354040283529160200191610b7f565b820191905f5260205f20905b815481529060010190602001808311610b6257829003601f168201915b505050505090506102f8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610bc457505f91506003905082610c49565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c15573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610c4057505f925060019150829050610c49565b92505f91508190505b9450945094915050565b5f826003811115610c6657610c66610fec565b03610c6f575050565b6001826003811115610c8357610c83610fec565b03610ca15760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610cb557610cb5610fec565b03610cd65760405163fce698f760e01b81526004810182905260240161038f565b6003826003811115610cea57610cea610fec565b0361088e576040516335e2f38360e21b81526004810182905260240161038f565b60605f610d1783610d48565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102f857604051632cd44ac360e21b815260040160405180910390fd5b5f81518084525f5b81811015610d9357602081850181015186830182015201610d77565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610dc46020830184610d6f565b9392505050565b80356001600160a01b0381168114610de1575f80fd5b919050565b5f8060408385031215610df7575f80fd5b610e0083610dcb565b946020939093013593505050565b5f805f60608486031215610e20575f80fd5b610e2984610dcb565b9250610e3760208501610dcb565b9150604084013590509250925092565b5f60208284031215610e57575f80fd5b610dc482610dcb565b60ff60f81b881681525f602060e06020840152610e8060e084018a610d6f565b8381036040850152610e92818a610d6f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b81811015610ee557835183529284019291840191600101610ec9565b50909c9b505050505050505050505050565b5f805f805f805f60e0888a031215610f0d575f80fd5b610f1688610dcb565b9650610f2460208901610dcb565b95506040880135945060608801359350608088013560ff81168114610f47575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610f75575f80fd5b610f7e83610dcb565b9150610f8c60208401610dcb565b90509250929050565b600181811c90821680610fa957607f821691505b602082108103610fc757634e487b7160e01b5f52602260045260245ffd5b50919050565b808201808211156102f857634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea2646970667358221220ae5dc479232d5b211f00338d7e9943b28c99cc21d127f1ff4b3e2bc86601b4c364736f6c63430008160033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF0 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xB7881EB0 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x21D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x6DCEA85F EQ PUSH2 0x171 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x135 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP2 SWAP1 PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x321 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x1C9 PUSH2 0x3D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE60 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x419 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0x428 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0E JUMP JUMPDEST PUSH2 0x435 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xEF7 JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x30B DUP6 DUP3 DUP6 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x316 DUP6 DUP6 DUP6 PUSH2 0x67A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x32A PUSH2 0x6D7 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x398 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2F8 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x3E8 PUSH2 0x800 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x82D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xF95 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x67A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x49C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206D61726B65742063616E2063616C6C20746869732066756E637469 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x37B7 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4A6 DUP5 DUP4 PUSH2 0x85A JUMP JUMPDEST PUSH2 0x4B0 DUP4 DUP4 PUSH2 0x85A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x4DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x526 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x580 DUP3 PUSH2 0x892 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x58F DUP3 DUP8 DUP8 DUP8 PUSH2 0x8BE JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x5E1 DUP11 DUP11 DUP11 PUSH2 0x5ED JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5FA DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x8EA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x674 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x666 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x674 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x8EA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6A3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6CC JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x5FA DUP4 DUP4 DUP4 PUSH2 0x9BC JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x72F JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x759 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x32A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x5 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x6 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x883 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH2 0x88E PUSH0 DUP4 DUP4 PUSH2 0x9BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2F8 PUSH2 0x89E PUSH2 0x6D7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x8CE DUP9 DUP9 DUP9 DUP9 PUSH2 0xB8B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x8DE DUP3 DUP3 PUSH2 0xC53 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x913 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x674 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9AE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9E6 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0xFCD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA56 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xA38 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA72 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xAD5 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xAFC JUMPI PUSH2 0xAF5 DUP4 PUSH2 0xD0B JUMP JUMPDEST SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB08 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB34 SWAP1 PUSH2 0xF95 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB7F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB56 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB7F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB62 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xBC4 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xC49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC40 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xC49 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC66 JUMPI PUSH2 0xC66 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xC6F JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH2 0xC83 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCB5 JUMPI PUSH2 0xCB5 PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0xCD6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCEA JUMPI PUSH2 0xCEA PUSH2 0xFEC JUMP JUMPDEST SUB PUSH2 0x88E JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD17 DUP4 PUSH2 0xD48 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD93 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xD77 JUMP JUMPDEST POP PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xDC4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD6F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDE1 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDF7 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE00 DUP4 PUSH2 0xDCB JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE20 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE29 DUP5 PUSH2 0xDCB JUMP JUMPDEST SWAP3 POP PUSH2 0xE37 PUSH1 0x20 DUP6 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE57 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDC4 DUP3 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE80 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0xD6F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xE92 DUP2 DUP11 PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEE5 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEC9 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF0D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF16 DUP9 PUSH2 0xDCB JUMP JUMPDEST SWAP7 POP PUSH2 0xF24 PUSH1 0x20 DUP10 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF47 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF75 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF7E DUP4 PUSH2 0xDCB JUMP JUMPDEST SWAP2 POP PUSH2 0xF8C PUSH1 0x20 DUP5 ADD PUSH2 0xDCB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xFC7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0x5D 0xC4 PUSH26 0x232D5B211F00338D7E9943B28C99CC21D127F1FF4B3E2BC86601 0xB4 0xC3 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "268:733:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2131:91:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4424:190;;;;;;:::i;:::-;;:::i;:::-;;;1269:14:18;;1262:22;1244:41;;1232:2;1217:18;4424:190:2;1104:187:18;3233:99:2;3312:12;;3233:99;;;1442:25:18;;;1430:2;1415:18;3233:99:2;1296:177:18;5192:249:2;;;;;;:::i;:::-;;:::i;3084:84::-;;;3158:2;1953:36:18;;1941:2;1926:18;3084:84:2;1811:184:18;2735:114:4;;;:::i;523:154:17:-;;;;;;:::i;:::-;;:::i;:::-;;3395:118:2;;;;;;:::i;:::-;-1:-1:-1;;;;;3487:18:2;3460:7;3487:18;;;;;;;;;;;;3395:118;2477:145:4;;;;;;:::i;:::-;;:::i;5257:580:13:-;;;:::i;:::-;;;;;;;;;;;;;:::i;2341:95:2:-;;;:::i;3718:182::-;;;;;;:::i;:::-;;:::i;809:189:17:-;;;;;;:::i;:::-;;:::i;1723:695:4:-;;;;;;:::i;:::-;;:::i;3963:142:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4070:18:2;;;4043:7;4070:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3963:142;2131:91;2176:13;2209:5;2202:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2131:91;:::o;4424:190::-;4497:4;752:10:7;4553:31:2;752:10:7;4569:7:2;4578:5;4553:8;:31::i;:::-;4602:4;4595:11;;;4424:190;;;;;:::o;5192:249::-;5279:4;752:10:7;5337:37:2;5353:4;752:10:7;5368:5:2;5337:15;:37::i;:::-;5385:26;5395:4;5401:2;5405:5;5385:9;:26::i;:::-;-1:-1:-1;5429:4:2;;5192:249;-1:-1:-1;;;;5192:249:2:o;2735:114:4:-;2794:7;2821:20;:18;:20::i;:::-;2814:27;;2735:114;:::o;523:154:17:-;599:5;;-1:-1:-1;;;;;599:5:17;587:10;:17;579:63;;;;-1:-1:-1;;;579:63:17;;5187:2:18;579:63:17;;;5169:21:18;5226:2;5206:18;;;5199:30;5265:34;5245:18;;;5238:62;-1:-1:-1;;;5316:18:18;;;5309:31;5357:19;;579:63:17;;;;;;;;;653:6;:16;;-1:-1:-1;;;;;;653:16:17;-1:-1:-1;;;;;653:16:17;;;;;;;;;;523:154::o;2477:145:4:-;-1:-1:-1;;;;;643:14:8;;2568:7:4;643:14:8;;;:7;:14;;;;;;2595:19:4;556:109:8;5257:580:13;5360:13;5388:18;5421:21;5457:15;5487:25;5527:12;5554:27;5662:13;:11;:13::i;:::-;5690:16;:14;:16::i;:::-;5802;;;5785:1;5802:16;;;;;;;;;-1:-1:-1;;;5609:220:13;;;-1:-1:-1;5609:220:13;;-1:-1:-1;5721:13:13;;-1:-1:-1;5757:4:13;;-1:-1:-1;5785:1:13;-1:-1:-1;5802:16:13;-1:-1:-1;5609:220:13;-1:-1:-1;5257:580:13:o;2341:95:2:-;2388:13;2421:7;2414:14;;;;;:::i;3718:182::-;3787:4;752:10:7;3843:27:2;752:10:7;3860:2:2;3864:5;3843:9;:27::i;809:189:17:-;736:6;;897:7;;-1:-1:-1;;;;;736:6:17;724:10;:18;716:65;;;;-1:-1:-1;;;716:65:17;;5721:2:18;716:65:17;;;5703:21:18;5760:2;5740:18;;;5733:30;5799:34;5779:18;;;5772:62;-1:-1:-1;;;5850:18:18;;;5843:32;5892:19;;716:65:17;5519:398:18;716:65:17;916:19:::1;922:5;928:6;916:5;:19::i;:::-;946:20;952:6;959;946:5;:20::i;:::-;-1:-1:-1::0;984:6:17;809:189;-1:-1:-1;;809:189:17:o;1723:695:4:-;1953:8;1935:15;:26;1931:99;;;1985:33;;-1:-1:-1;;;1985:33:4;;;;;1442:25:18;;;1415:18;;1985:33:4;1296:177:18;1931:99:4;2042:18;1043:95;2101:5;2108:7;2117:5;2124:16;2134:5;-1:-1:-1;;;;;1153:14:8;846:7;1153:14;;;:7;:14;;;;;:16;;;;;;;;;786:402;2124:16:4;2073:78;;;;;;6209:25:18;;;;-1:-1:-1;;;;;6308:15:18;;;6288:18;;;6281:43;6360:15;;;;6340:18;;;6333:43;6392:18;;;6385:34;6435:19;;;6428:35;6479:19;;;6472:35;;;6181:19;;2073:78:4;;;;;;;;;;;;2063:89;;;;;;2042:110;;2165:12;2180:28;2197:10;2180:16;:28::i;:::-;2165:43;;2221:14;2238:28;2252:4;2258:1;2261;2264;2238:13;:28::i;:::-;2221:45;;2291:5;-1:-1:-1;;;;;2281:15:4;:6;-1:-1:-1;;;;;2281:15:4;;2277:90;;2320:35;;-1:-1:-1;;;2320:35:4;;-1:-1:-1;;;;;6748:15:18;;;2320:35:4;;;6730:34:18;6800:15;;6780:18;;;6773:43;6665:18;;2320:35:4;6518:304:18;2277:90:4;2379:31;2388:5;2395:7;2404:5;2379:8;:31::i;:::-;1920:498;;;1723:695;;;;;;;:::o;9251:130:2:-;9336:37;9345:5;9352:7;9361:5;9368:4;9336:8;:37::i;:::-;9251:130;;;:::o;10967:487::-;-1:-1:-1;;;;;4070:18:2;;;11067:24;4070:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11134:37:2;;11130:317;;11211:5;11192:16;:24;11188:132;;;11244:60;;-1:-1:-1;;;11244:60:2;;-1:-1:-1;;;;;7047:32:18;;11244:60:2;;;7029:51:18;7096:18;;;7089:34;;;7139:18;;;7132:34;;;7002:18;;11244:60:2;6827:345:18;11188:132:2;11363:57;11372:5;11379:7;11407:5;11388:16;:24;11414:5;11363:8;:57::i;:::-;11056:398;10967:487;;;:::o;5826:308::-;-1:-1:-1;;;;;5910:18:2;;5906:88;;5952:30;;-1:-1:-1;;;5952:30:2;;5979:1;5952:30;;;7323:51:18;7296:18;;5952:30:2;7177:203:18;5906:88:2;-1:-1:-1;;;;;6008:16:2;;6004:88;;6048:32;;-1:-1:-1;;;6048:32:2;;6077:1;6048:32;;;7323:51:18;7296:18;;6048:32:2;7177:203:18;6004:88:2;6102:24;6110:4;6116:2;6120:5;6102:7;:24::i;3924:268:13:-;3977:7;4009:4;-1:-1:-1;;;;;4018:11:13;4001:28;;:63;;;;;4050:14;4033:13;:31;4001:63;3997:188;;;-1:-1:-1;4088:22:13;;3924:268::o;3997:188::-;4150:23;4292:80;;;2116:95;4292:80;;;7871:25:18;4314:11:13;7912:18:18;;;7905:34;;;;4327:14:13;7955:18:18;;;7948:34;4343:13:13;7998:18:18;;;7991:34;4366:4:13;8041:19:18;;;8034:61;4255:7:13;;7843:19:18;;4292:80:13;;;;;;;;;;;;4282:91;;;;;;4275:98;;4200:181;;6166:128;6212:13;6245:41;:5;6272:13;6245:26;:41::i;6629:137::-;6678:13;6711:47;:8;6741:16;6711:29;:47::i;7946:213:2:-;-1:-1:-1;;;;;8017:21:2;;8013:93;;8062:32;;-1:-1:-1;;;8062:32:2;;8091:1;8062:32;;;7323:51:18;7296:18;;8062:32:2;7177:203:18;8013:93:2;8116:35;8132:1;8136:7;8145:5;8116:7;:35::i;:::-;7946:213;;:::o;5023:178:13:-;5100:7;5127:66;5160:20;:18;:20::i;:::-;5182:10;3633:4:14;3627:11;-1:-1:-1;;;3652:23:14;;3705:4;3696:14;;3689:39;;;;3758:4;3749:14;;3742:34;3815:4;3800:20;;;3428:410;6956:264:12;7041:7;7062:17;7081:18;7101:16;7121:25;7132:4;7138:1;7141;7144;7121:10;:25::i;:::-;7061:85;;;;;;7157:28;7169:5;7176:8;7157:11;:28::i;:::-;-1:-1:-1;7203:9:12;;6956:264;-1:-1:-1;;;;;;6956:264:12:o;10232:443:2:-;-1:-1:-1;;;;;10345:19:2;;10341:91;;10388:32;;-1:-1:-1;;;10388:32:2;;10417:1;10388:32;;;7323:51:18;7296:18;;10388:32:2;7177:203:18;10341:91:2;-1:-1:-1;;;;;10446:21:2;;10442:92;;10491:31;;-1:-1:-1;;;10491:31:2;;10519:1;10491:31;;;7323:51:18;7296:18;;10491:31:2;7177:203:18;10442:92:2;-1:-1:-1;;;;;10544:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10590:78;;;;10641:7;-1:-1:-1;;;;;10625:31:2;10634:5;-1:-1:-1;;;;;10625:31:2;;10650:5;10625:31;;;;1442:25:18;;1430:2;1415:18;;1296:177;10625:31:2;;;;;;;;10232:443;;;;:::o;6458:1135::-;-1:-1:-1;;;;;6548:18:2;;6544:552;;6702:5;6686:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6544:552:2;;-1:-1:-1;6544:552:2;;-1:-1:-1;;;;;6762:15:2;;6740:19;6762:15;;;;;;;;;;;6796:19;;;6792:117;;;6843:50;;-1:-1:-1;;;6843:50:2;;-1:-1:-1;;;;;7047:32:18;;6843:50:2;;;7029:51:18;7096:18;;;7089:34;;;7139:18;;;7132:34;;;7002:18;;6843:50:2;6827:345:18;6792:117:2;-1:-1:-1;;;;;7032:15:2;;:9;:15;;;;;;;;;;7050:19;;;;7032:37;;6544:552;-1:-1:-1;;;;;7112:16:2;;7108:435;;7278:12;:21;;;;;;;7108:435;;;-1:-1:-1;;;;;7494:13:2;;:9;:13;;;;;;;;;;:22;;;;;;7108:435;7575:2;-1:-1:-1;;;;;7560:25:2;7569:4;-1:-1:-1;;;;;7560:25:2;;7579:5;7560:25;;;;1442::18;;1430:2;1415:18;;1296:177;7560:25:2;;;;;;;;6458:1135;;;:::o;3485:273:9:-;3579:13;1431:66;3609:46;;3605:146;;3679:15;3688:5;3679:8;:15::i;:::-;3672:22;;;;3605:146;3734:5;3727:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5261:1556:12;5392:7;;;6335:66;6322:79;;6318:166;;;-1:-1:-1;6434:1:12;;-1:-1:-1;6438:30:12;;-1:-1:-1;6470:1:12;6418:54;;6318:166;6598:24;;;6581:14;6598:24;;;;;;;;;8333:25:18;;;8406:4;8394:17;;8374:18;;;8367:45;;;;8428:18;;;8421:34;;;8471:18;;;8464:34;;;6598:24:12;;8305:19:18;;6598:24:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6598:24:12;;-1:-1:-1;;6598:24:12;;;-1:-1:-1;;;;;;;6637:20:12;;6633:115;;-1:-1:-1;6690:1:12;;-1:-1:-1;6694:29:12;;-1:-1:-1;6690:1:12;;-1:-1:-1;6674:62:12;;6633:115;6768:6;-1:-1:-1;6776:20:12;;-1:-1:-1;6776:20:12;;-1:-1:-1;5261:1556:12;;;;;;;;;:::o;7358:542::-;7454:20;7445:5;:29;;;;;;;;:::i;:::-;;7441:452;;7358:542;;:::o;7441:452::-;7552:29;7543:5;:38;;;;;;;;:::i;:::-;;7539:354;;7605:23;;-1:-1:-1;;;7605:23:12;;;;;;;;;;;7539:354;7659:35;7650:5;:44;;;;;;;;:::i;:::-;;7646:247;;7718:46;;-1:-1:-1;;;7718:46:12;;;;;1442:25:18;;;1415:18;;7718:46:12;1296:177:18;7646:247:12;7795:30;7786:5;:39;;;;;;;;:::i;:::-;;7782:111;;7849:32;;-1:-1:-1;;;7849:32:12;;;;;1442:25:18;;;1415:18;;7849:32:12;1296:177:18;2140:415:9;2199:13;2225:11;2239:16;2250:4;2239:10;:16::i;:::-;2365:14;;;2376:2;2365:14;;;;;;;;;2225:30;;-1:-1:-1;2345:17:9;;2365:14;;;;;;;;;-1:-1:-1;;;2458:16:9;;;-1:-1:-1;2504:4:9;2495:14;;2488:28;;;;-1:-1:-1;2458:16:9;2140:415::o;2632:251::-;2693:7;2766:4;2730:40;;2794:2;2785:11;;2781:71;;;2820:20;;-1:-1:-1;;;2820:20:9;;;;;;;;;;;14:423:18;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;160:3;363:1;356:4;347:6;342:3;338:16;334:27;327:38;426:4;419:2;415:7;410:2;402:6;398:15;394:29;389:3;385:39;381:50;374:57;;;14:423;;;;:::o;442:220::-;591:2;580:9;573:21;554:4;611:45;652:2;641:9;637:18;629:6;611:45;:::i;:::-;603:53;442:220;-1:-1:-1;;;442:220:18:o;667:173::-;735:20;;-1:-1:-1;;;;;784:31:18;;774:42;;764:70;;830:1;827;820:12;764:70;667:173;;;:::o;845:254::-;913:6;921;974:2;962:9;953:7;949:23;945:32;942:52;;;990:1;987;980:12;942:52;1013:29;1032:9;1013:29;:::i;:::-;1003:39;1089:2;1074:18;;;;1061:32;;-1:-1:-1;;;845:254:18:o;1478:328::-;1555:6;1563;1571;1624:2;1612:9;1603:7;1599:23;1595:32;1592:52;;;1640:1;1637;1630:12;1592:52;1663:29;1682:9;1663:29;:::i;:::-;1653:39;;1711:38;1745:2;1734:9;1730:18;1711:38;:::i;:::-;1701:48;;1796:2;1785:9;1781:18;1768:32;1758:42;;1478:328;;;;;:::o;2182:186::-;2241:6;2294:2;2282:9;2273:7;2269:23;2265:32;2262:52;;;2310:1;2307;2300:12;2262:52;2333:29;2352:9;2333:29;:::i;2373:1259::-;2779:3;2774;2770:13;2762:6;2758:26;2747:9;2740:45;2721:4;2804:2;2842:3;2837:2;2826:9;2822:18;2815:31;2869:46;2910:3;2899:9;2895:19;2887:6;2869:46;:::i;:::-;2963:9;2955:6;2951:22;2946:2;2935:9;2931:18;2924:50;2997:33;3023:6;3015;2997:33;:::i;:::-;3061:2;3046:18;;3039:34;;;-1:-1:-1;;;;;3110:32:18;;3104:3;3089:19;;3082:61;3130:3;3159:19;;3152:35;;;3224:22;;;3218:3;3203:19;;3196:51;3296:13;;3318:22;;;3368:2;3394:15;;;;-1:-1:-1;3356:15:18;;;;-1:-1:-1;3437:169:18;3451:6;3448:1;3445:13;3437:169;;;3512:13;;3500:26;;3581:15;;;;3546:12;;;;3473:1;3466:9;3437:169;;;-1:-1:-1;3623:3:18;;2373:1259;-1:-1:-1;;;;;;;;;;;;2373:1259:18:o;3637:693::-;3748:6;3756;3764;3772;3780;3788;3796;3849:3;3837:9;3828:7;3824:23;3820:33;3817:53;;;3866:1;3863;3856:12;3817:53;3889:29;3908:9;3889:29;:::i;:::-;3879:39;;3937:38;3971:2;3960:9;3956:18;3937:38;:::i;:::-;3927:48;;4022:2;4011:9;4007:18;3994:32;3984:42;;4073:2;4062:9;4058:18;4045:32;4035:42;;4127:3;4116:9;4112:19;4099:33;4172:4;4165:5;4161:16;4154:5;4151:27;4141:55;;4192:1;4189;4182:12;4141:55;3637:693;;;;-1:-1:-1;3637:693:18;;;;4215:5;4267:3;4252:19;;4239:33;;-1:-1:-1;4319:3:18;4304:19;;;4291:33;;3637:693;-1:-1:-1;;3637:693:18:o;4335:260::-;4403:6;4411;4464:2;4452:9;4443:7;4439:23;4435:32;4432:52;;;4480:1;4477;4470:12;4432:52;4503:29;4522:9;4503:29;:::i;:::-;4493:39;;4551:38;4585:2;4574:9;4570:18;4551:38;:::i;:::-;4541:48;;4335:260;;;;;:::o;4600:380::-;4679:1;4675:12;;;;4722;;;4743:61;;4797:4;4789:6;4785:17;4775:27;;4743:61;4850:2;4842:6;4839:14;4819:18;4816:38;4813:161;;4896:10;4891:3;4887:20;4884:1;4877:31;4931:4;4928:1;4921:15;4959:4;4956:1;4949:15;4813:161;;4600:380;;;:::o;7385:222::-;7450:9;;;7471:10;;;7468:133;;;7523:10;7518:3;7514:20;7511:1;7504:31;7558:4;7555:1;7548:15;7586:4;7583:1;7576:15;8509:127;8570:10;8565:3;8561:20;8558:1;8551:31;8601:4;8598:1;8591:15;8625:4;8622:1;8615:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "830000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"Aware(address,address,uint256)": "infinite",
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24758",
								"balanceOf(address)": "2560",
								"decimals()": "221",
								"eip712Domain()": "infinite",
								"name()": "infinite",
								"nonces(address)": "2613",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"setMarket(address)": "26798",
								"symbol()": "infinite",
								"totalSupply()": "2348",
								"transfer(address,uint256)": "51238",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "160"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "CALLVALUE",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 354,
									"end": 515,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 354,
									"end": 515,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 354,
									"end": 515,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 354,
									"end": 515,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "PUSH",
									"source": 4,
									"value": "5"
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1DD554D115"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "DA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1612,
									"end": 1664,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1651,
									"end": 1655,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3393,
									"end": 3833,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "C"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "15DA5B8B55DA5B881554D115"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1DD554D115"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "DA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1945,
									"end": 2061,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2020,
									"end": 2025,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2017,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2012,
									"end": 2025,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2012,
									"end": 2025,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2036,
									"end": 2043,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2036,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 2046,
									"end": 2053,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2036,
									"end": 2043,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2036,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2036,
									"end": 2053,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2036,
									"end": 2053,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 2036,
									"end": 2053,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3467,
									"end": 3512,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "11"
								},
								{
									"begin": 3467,
									"end": 3512,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3467,
									"end": 3471,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3467,
									"end": 3471,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3498,
									"end": 3511,
									"name": "PUSH",
									"source": 13,
									"value": "5"
								},
								{
									"begin": 3467,
									"end": 3497,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 3467,
									"end": 3512,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3467,
									"end": 3512,
									"name": "tag",
									"source": 13,
									"value": "11"
								},
								{
									"begin": 3467,
									"end": 3512,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3459,
									"end": 3512,
									"name": "PUSH",
									"source": 13,
									"value": "120"
								},
								{
									"begin": 3459,
									"end": 3512,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3534,
									"end": 3585,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 3534,
									"end": 3541,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3568,
									"end": 3584,
									"name": "PUSH",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 3534,
									"end": 3567,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 3534,
									"end": 3585,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3534,
									"end": 3585,
									"name": "tag",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 3534,
									"end": 3585,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3523,
									"end": 3585,
									"name": "PUSH",
									"source": 13,
									"value": "140"
								},
								{
									"begin": 3523,
									"end": 3585,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3610,
									"end": 3632,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3596,
									"end": 3632,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 3596,
									"end": 3632,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3660,
									"end": 3685,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 3643,
									"end": 3685,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 3643,
									"end": 3685,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3715,
									"end": 3728,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 3698,
									"end": 3728,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 3698,
									"end": 3728,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 3764,
									"end": 3787,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 4314,
									"end": 4325,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 4314,
									"end": 4325,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 4327,
									"end": 4341,
									"name": "PUSH",
									"source": 13,
									"value": "100"
								},
								{
									"begin": 4327,
									"end": 4341,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 2116,
									"end": 2211,
									"name": "PUSH",
									"source": 13,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4642,
									"end": 4667,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4676,
									"end": 4710,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 4676,
									"end": 4710,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4676,
									"end": 4710,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 4676,
									"end": 4710,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4726,
									"end": 4744,
									"name": "PUSH",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 4726,
									"end": 4744,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4726,
									"end": 4744,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4719,
									"end": 4753,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4343,
									"end": 4356,
									"name": "CHAINID",
									"source": 13
								},
								{
									"begin": 4769,
									"end": 4787,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 4769,
									"end": 4787,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4769,
									"end": 4787,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4762,
									"end": 4796,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4366,
									"end": 4370,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 4812,
									"end": 4831,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 4812,
									"end": 4831,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4812,
									"end": 4831,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4805,
									"end": 4866,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4255,
									"end": 4262,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 4255,
									"end": 4262,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4614,
									"end": 4633,
									"name": "PUSH",
									"source": 18,
									"value": "C0"
								},
								{
									"begin": 4614,
									"end": 4633,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 4292,
									"end": 4372,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 4282,
									"end": 4373,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 4275,
									"end": 4373,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4275,
									"end": 4373,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 4200,
									"end": 4381,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 4200,
									"end": 4381,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3764,
									"end": 3787,
									"name": "tag",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 3764,
									"end": 3787,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3739,
									"end": 3787,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 3739,
									"end": 3787,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3820,
									"end": 3824,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 3798,
									"end": 3825,
									"name": "PUSH",
									"source": 13,
									"value": "C0"
								},
								{
									"begin": 3798,
									"end": 3825,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 430,
									"end": 479,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 436,
									"end": 446,
									"modifierDepth": 2,
									"name": "CALLER",
									"source": 17
								},
								{
									"begin": 462,
									"end": 478,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 3158,
									"end": 3160,
									"name": "PUSH",
									"source": 2,
									"value": "12"
								},
								{
									"begin": 462,
									"end": 464,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 17,
									"value": "A"
								},
								{
									"begin": 462,
									"end": 478,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 462,
									"end": 478,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 462,
									"end": 478,
									"modifierDepth": 2,
									"name": "tag",
									"source": 17,
									"value": "21"
								},
								{
									"begin": 462,
									"end": 478,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 448,
									"end": 478,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "23"
								},
								{
									"begin": 448,
									"end": 478,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 448,
									"end": 459,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 17,
									"value": "5F5E100"
								},
								{
									"begin": 448,
									"end": 478,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 448,
									"end": 478,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 448,
									"end": 478,
									"modifierDepth": 2,
									"name": "tag",
									"source": 17,
									"value": "23"
								},
								{
									"begin": 448,
									"end": 478,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 430,
									"end": 435,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "25"
								},
								{
									"begin": 430,
									"end": 479,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 430,
									"end": 479,
									"modifierDepth": 2,
									"name": "tag",
									"source": 17,
									"value": "18"
								},
								{
									"begin": 430,
									"end": 479,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 489,
									"end": 494,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 17,
									"value": "9"
								},
								{
									"begin": 489,
									"end": 507,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 489,
									"end": 507,
									"name": "SLOAD",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 489,
									"end": 507,
									"modifierDepth": 2,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 497,
									"end": 507,
									"modifierDepth": 2,
									"name": "CALLER",
									"source": 17
								},
								{
									"begin": 489,
									"end": 507,
									"modifierDepth": 2,
									"name": "OR",
									"source": 17
								},
								{
									"begin": 489,
									"end": 507,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 489,
									"end": 507,
									"name": "SSTORE",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "72"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "tag",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3098,
									"end": 3109,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3148,
									"end": 3150,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3132,
									"end": 3137,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3126,
									"end": 3145,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3126,
									"end": 3150,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3174,
									"end": 3194,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 3188,
									"end": 3193,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3174,
									"end": 3187,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 3174,
									"end": 3194,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3174,
									"end": 3194,
									"name": "tag",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 3174,
									"end": 3194,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3167,
									"end": 3194,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3167,
									"end": 3194,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3167,
									"end": 3194,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 3167,
									"end": 3194,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "tag",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3253,
									"end": 3258,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3227,
									"end": 3273,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 3268,
									"end": 3273,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3253,
									"end": 3258,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3227,
									"end": 3273,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 3227,
									"end": 3273,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3227,
									"end": 3273,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 3227,
									"end": 3273,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1431,
									"end": 1497,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 1431,
									"end": 1497,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "tag",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 3122,
									"end": 3342,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3002,
									"end": 3349,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3002,
									"end": 3349,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 7946,
									"end": 8159,
									"name": "tag",
									"source": 2,
									"value": "25"
								},
								{
									"begin": 7946,
									"end": 8159,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8017,
									"end": 8038,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 8017,
									"end": 8038,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 8013,
									"end": 8106,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8013,
									"end": 8106,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EC442F05"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 8091,
									"end": 8092,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 5023,
									"end": 5074,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4996,
									"end": 5014,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 4996,
									"end": 5014,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "tag",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 8062,
									"end": 8094,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 8013,
									"end": 8106,
									"name": "tag",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8013,
									"end": 8106,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 8116,
									"end": 8151,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "43"
								},
								{
									"begin": 8132,
									"end": 8133,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 8136,
									"end": 8143,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 8145,
									"end": 8150,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 8116,
									"end": 8123,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 8116,
									"end": 8151,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 8116,
									"end": 8151,
									"name": "tag",
									"source": 2,
									"value": "43"
								},
								{
									"begin": 8116,
									"end": 8151,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7946,
									"end": 8159,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7946,
									"end": 8159,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7946,
									"end": 8159,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1759,
									"end": 2051,
									"name": "tag",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 1759,
									"end": 2051,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1824,
									"end": 1835,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1848,
									"end": 1865,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1874,
									"end": 1877,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1848,
									"end": 1878,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1848,
									"end": 1878,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1907,
									"end": 1909,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1893,
									"end": 1897,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1893,
									"end": 1904,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1893,
									"end": 1909,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1889,
									"end": 1963,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1889,
									"end": 1963,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 1889,
									"end": 1963,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1947,
									"end": 1950,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "305A27A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1933,
									"end": 1951,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 1933,
									"end": 1951,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1889,
									"end": 1963,
									"name": "tag",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 1889,
									"end": 1963,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2030,
									"end": 2041,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2030,
									"end": 2041,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2013,
									"end": 2026,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 2030,
									"end": 2034,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2013,
									"end": 2026,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "50"
								},
								{
									"begin": 2013,
									"end": 2026,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2013,
									"end": 2026,
									"name": "tag",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 2013,
									"end": 2026,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2005,
									"end": 2041,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 2005,
									"end": 2041,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1759,
									"end": 2051,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1759,
									"end": 2051,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6458,
									"end": 7593,
									"name": "tag",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 6458,
									"end": 7593,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6548,
									"end": 6566,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6548,
									"end": 6566,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "53"
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6702,
									"end": 6707,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6698,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 6686,
									"end": 6698,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 6686,
									"end": 6707,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "tag",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6686,
									"end": 6707,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "tag",
									"source": 2,
									"value": "53"
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 6740,
									"end": 6759,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 6762,
									"end": 6777,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 6796,
									"end": 6815,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6796,
									"end": 6815,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6796,
									"end": 6815,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 6792,
									"end": 6909,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 6792,
									"end": 6909,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 6792,
									"end": 6909,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "391434E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6290,
									"end": 6322,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 6290,
									"end": 6322,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 6272,
									"end": 6323,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 6339,
									"end": 6357,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 6339,
									"end": 6357,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 6339,
									"end": 6357,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 6332,
									"end": 6366,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 6332,
									"end": 6366,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 6332,
									"end": 6366,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 6382,
									"end": 6400,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 6382,
									"end": 6400,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 6382,
									"end": 6400,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 6375,
									"end": 6409,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 6375,
									"end": 6409,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 6375,
									"end": 6409,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 6245,
									"end": 6263,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 6245,
									"end": 6263,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 6843,
									"end": 6893,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 6070,
									"end": 6415,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 6792,
									"end": 6909,
									"name": "tag",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 6792,
									"end": 6909,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7041,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7047,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 7050,
									"end": 7069,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7050,
									"end": 7069,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7050,
									"end": 7069,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7050,
									"end": 7069,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7069,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7032,
									"end": 7069,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "tag",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 6544,
									"end": 7096,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7112,
									"end": 7128,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7112,
									"end": 7128,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7290,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7278,
									"end": 7299,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "61"
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "tag",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7503,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7507,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7494,
									"end": 7516,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "tag",
									"source": 2,
									"value": "61"
								},
								{
									"begin": 7108,
									"end": 7543,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7575,
									"end": 7577,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7569,
									"end": 7573,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "PUSH",
									"source": 2,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7579,
									"end": 7584,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "62"
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 6566,
									"end": 6591,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 6566,
									"end": 6591,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 6554,
									"end": 6556,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 6539,
									"end": 6557,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 6539,
									"end": 6557,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 6420,
									"end": 6597,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "tag",
									"source": 2,
									"value": "62"
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7560,
									"end": 7585,
									"name": "LOG3",
									"source": 2
								},
								{
									"begin": 6458,
									"end": 7593,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6458,
									"end": 7593,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6458,
									"end": 7593,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 6458,
									"end": 7593,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 146,
									"end": 526,
									"name": "tag",
									"source": 18,
									"value": "65"
								},
								{
									"begin": 146,
									"end": 526,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 225,
									"end": 226,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 268,
									"end": 280,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 289,
									"end": 350,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "75"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 343,
									"end": 347,
									"name": "PUSH",
									"source": 18,
									"value": "7F"
								},
								{
									"begin": 335,
									"end": 341,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 331,
									"end": 348,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 321,
									"end": 348,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 321,
									"end": 348,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 289,
									"end": 350,
									"name": "tag",
									"source": 18,
									"value": "75"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 396,
									"end": 398,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 394,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 385,
									"end": 399,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 365,
									"end": 383,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 362,
									"end": 400,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 359,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "76"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 442,
									"end": 452,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 437,
									"end": 440,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 433,
									"end": 453,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 430,
									"end": 431,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 454,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 477,
									"end": 481,
									"name": "PUSH",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 474,
									"end": 475,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 482,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 505,
									"end": 509,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 502,
									"end": 503,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 495,
									"end": 510,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 359,
									"end": 520,
									"name": "tag",
									"source": 18,
									"value": "76"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 359,
									"end": 520,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 146,
									"end": 526,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 146,
									"end": 526,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "tag",
									"source": 18,
									"value": "67"
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 759,
									"end": 761,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 754,
									"end": 757,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 751,
									"end": 762,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "79"
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 795,
									"end": 800,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 792,
									"end": 793,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 785,
									"end": 801,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 839,
									"end": 843,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 836,
									"end": 837,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 826,
									"end": 844,
									"name": "KECCAK256",
									"source": 18
								},
								{
									"begin": 909,
									"end": 911,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 897,
									"end": 907,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 893,
									"end": 912,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 890,
									"end": 891,
									"name": "PUSH",
									"source": 18,
									"value": "5"
								},
								{
									"begin": 886,
									"end": 913,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 880,
									"end": 884,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 876,
									"end": 914,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 945,
									"end": 949,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 933,
									"end": 943,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 930,
									"end": 950,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 927,
									"end": 974,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 927,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 927,
									"end": 974,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 968,
									"end": 972,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 927,
									"end": 974,
									"name": "tag",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 927,
									"end": 974,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1023,
									"end": 1025,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 1018,
									"end": 1021,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 1014,
									"end": 1026,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1011,
									"end": 1012,
									"name": "PUSH",
									"source": 18,
									"value": "5"
								},
								{
									"begin": 1007,
									"end": 1027,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 1001,
									"end": 1005,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 997,
									"end": 1028,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 987,
									"end": 1028,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 987,
									"end": 1028,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "tag",
									"source": 18,
									"value": "81"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1096,
									"end": 1098,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1089,
									"end": 1094,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1086,
									"end": 1099,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "83"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1155,
									"end": 1156,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 1122,
									"end": 1123,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1111,
									"end": 1124,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "81"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "tag",
									"source": 18,
									"value": "83"
								},
								{
									"begin": 1078,
									"end": 1159,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1082,
									"end": 1085,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1082,
									"end": 1085,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "tag",
									"source": 18,
									"value": "79"
								},
								{
									"begin": 748,
									"end": 1169,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 657,
									"end": 1175,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 657,
									"end": 1175,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1351,
									"end": 2696,
									"name": "tag",
									"source": 18,
									"value": "8"
								},
								{
									"begin": 1351,
									"end": 2696,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1471,
									"end": 1481,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1471,
									"end": 1481,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1493,
									"end": 1523,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1493,
									"end": 1523,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "87"
								},
								{
									"begin": 1490,
									"end": 1546,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "87"
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 1526,
									"end": 1544,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "tag",
									"source": 18,
									"value": "87"
								},
								{
									"begin": 1526,
									"end": 1544,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "88"
								},
								{
									"begin": 1645,
									"end": 1651,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "89"
								},
								{
									"begin": 1637,
									"end": 1641,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 1631,
									"end": 1642,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "65"
								},
								{
									"begin": 1605,
									"end": 1643,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "tag",
									"source": 18,
									"value": "89"
								},
								{
									"begin": 1605,
									"end": 1643,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1599,
									"end": 1603,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "67"
								},
								{
									"begin": 1555,
									"end": 1652,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "tag",
									"source": 18,
									"value": "88"
								},
								{
									"begin": 1555,
									"end": 1652,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1707,
									"end": 1711,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 1707,
									"end": 1711,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1764,
									"end": 1766,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 1753,
									"end": 1767,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 1753,
									"end": 1767,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 1781,
									"end": 1782,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "91"
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2500,
									"end": 2506,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 2497,
									"end": 2586,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2497,
									"end": 2586,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "92"
								},
								{
									"begin": 2497,
									"end": 2586,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2552,
									"end": 2571,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2552,
									"end": 2571,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 2552,
									"end": 2571,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2546,
									"end": 2572,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 2497,
									"end": 2586,
									"name": "tag",
									"source": 18,
									"value": "92"
								},
								{
									"begin": 2497,
									"end": 2586,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1308,
									"end": 1309,
									"name": "PUSH",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1304,
									"end": 1315,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 1300,
									"end": 1324,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 1296,
									"end": 1325,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 1286,
									"end": 1326,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1332,
									"end": 1333,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1328,
									"end": 1339,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 1283,
									"end": 1340,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 2599,
									"end": 2680,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2599,
									"end": 2680,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "90"
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "tag",
									"source": 18,
									"value": "91"
								},
								{
									"begin": 1776,
									"end": 2439,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 604,
									"end": 605,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 597,
									"end": 611,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 641,
									"end": 645,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 646,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 628,
									"end": 646,
									"name": "KECCAK256",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "tag",
									"source": 18,
									"value": "95"
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1944,
									"end": 1951,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 1941,
									"end": 1942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 1938,
									"end": 1952,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "97"
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2033,
									"end": 2052,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 2033,
									"end": 2052,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 2033,
									"end": 2052,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2027,
									"end": 2053,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 2012,
									"end": 2054,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2012,
									"end": 2054,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 2125,
									"end": 2152,
									"name": "SWAP5",
									"source": 18
								},
								{
									"begin": 2125,
									"end": 2152,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 2125,
									"end": 2152,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2125,
									"end": 2152,
									"name": "SWAP5",
									"source": 18
								},
								{
									"begin": 2093,
									"end": 2094,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 2081,
									"end": 2095,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2081,
									"end": 2095,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 2081,
									"end": 2095,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2081,
									"end": 2095,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 1960,
									"end": 1979,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 1960,
									"end": 1979,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "95"
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "tag",
									"source": 18,
									"value": "97"
								},
								{
									"begin": 1930,
									"end": 2166,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1934,
									"end": 1937,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2194,
									"end": 2200,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2185,
									"end": 2192,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2182,
									"end": 2201,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "98"
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 2255,
									"end": 2274,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 2255,
									"end": 2274,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2255,
									"end": 2274,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2249,
									"end": 2275,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2338,
									"end": 2339,
									"name": "PUSH",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 2334,
									"end": 2348,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 2334,
									"end": 2348,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2334,
									"end": 2348,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 2350,
									"end": 2353,
									"name": "PUSH",
									"source": 18,
									"value": "F8"
								},
								{
									"begin": 2330,
									"end": 2354,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2326,
									"end": 2363,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 2322,
									"end": 2364,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 2307,
									"end": 2365,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2292,
									"end": 2366,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2292,
									"end": 2366,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "tag",
									"source": 18,
									"value": "98"
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2179,
									"end": 2380,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2426,
									"end": 2427,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 2417,
									"end": 2423,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 2414,
									"end": 2415,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 2410,
									"end": 2424,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 2406,
									"end": 2428,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 2400,
									"end": 2404,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2393,
									"end": 2429,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "tag",
									"source": 18,
									"value": "90"
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1746,
									"end": 2690,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1351,
									"end": 2696,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1351,
									"end": 2696,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 1351,
									"end": 2696,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 2701,
									"end": 2828,
									"name": "tag",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 2701,
									"end": 2828,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2762,
									"end": 2772,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 2757,
									"end": 2760,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 2753,
									"end": 2773,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 2750,
									"end": 2751,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2743,
									"end": 2774,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2793,
									"end": 2797,
									"name": "PUSH",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 2790,
									"end": 2791,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 2783,
									"end": 2798,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2817,
									"end": 2821,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 2814,
									"end": 2815,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 2807,
									"end": 2822,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "tag",
									"source": 18,
									"value": "70"
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2922,
									"end": 2923,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 2959,
									"end": 2964,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2922,
									"end": 2923,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "tag",
									"source": 18,
									"value": "101"
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2994,
									"end": 3001,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 2984,
									"end": 2992,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 2981,
									"end": 3002,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "103"
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3053,
									"end": 3057,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3049,
									"end": 3050,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3045,
									"end": 3051,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 3041,
									"end": 3058,
									"name": "DIV",
									"source": 18
								},
								{
									"begin": 3035,
									"end": 3039,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3032,
									"end": 3059,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 3029,
									"end": 3082,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 3029,
									"end": 3082,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "105"
								},
								{
									"begin": 3029,
									"end": 3082,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3062,
									"end": 3080,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "105"
								},
								{
									"begin": 3062,
									"end": 3080,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 3062,
									"end": 3080,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3062,
									"end": 3080,
									"name": "tag",
									"source": 18,
									"value": "105"
								},
								{
									"begin": 3062,
									"end": 3080,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3112,
									"end": 3119,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3102,
									"end": 3110,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 3098,
									"end": 3120,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3095,
									"end": 3150,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 3095,
									"end": 3150,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "106"
								},
								{
									"begin": 3095,
									"end": 3150,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3132,
									"end": 3148,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3132,
									"end": 3148,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3132,
									"end": 3148,
									"name": "MUL",
									"source": 18
								},
								{
									"begin": 3132,
									"end": 3148,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3095,
									"end": 3150,
									"name": "tag",
									"source": 18,
									"value": "106"
								},
								{
									"begin": 3095,
									"end": 3150,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3211,
									"end": 3233,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 3211,
									"end": 3233,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 3211,
									"end": 3233,
									"name": "SHR",
									"source": 18
								},
								{
									"begin": 3211,
									"end": 3233,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 3171,
									"end": 3186,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3171,
									"end": 3186,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3171,
									"end": 3186,
									"name": "MUL",
									"source": 18
								},
								{
									"begin": 3171,
									"end": 3186,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "101"
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "tag",
									"source": 18,
									"value": "103"
								},
								{
									"begin": 2973,
									"end": 3243,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 2977,
									"end": 2980,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 2833,
									"end": 3249,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3254,
									"end": 4060,
									"name": "tag",
									"source": 18,
									"value": "71"
								},
								{
									"begin": 3254,
									"end": 4060,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3303,
									"end": 3308,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3333,
									"end": 3341,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3323,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "108"
								},
								{
									"begin": 3323,
									"end": 3403,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3374,
									"end": 3375,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3388,
									"end": 3393,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 3388,
									"end": 3393,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3323,
									"end": 3403,
									"name": "tag",
									"source": 18,
									"value": "108"
								},
								{
									"begin": 3323,
									"end": 3403,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3422,
									"end": 3426,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3412,
									"end": 3488,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "109"
								},
								{
									"begin": 3412,
									"end": 3488,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3459,
									"end": 3460,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3473,
									"end": 3478,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 3473,
									"end": 3478,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3412,
									"end": 3488,
									"name": "tag",
									"source": 18,
									"value": "109"
								},
								{
									"begin": 3412,
									"end": 3488,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3504,
									"end": 3508,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3522,
									"end": 3523,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "111"
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3590,
									"end": 3591,
									"name": "PUSH",
									"source": 18,
									"value": "2"
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "112"
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3497,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "110"
								},
								{
									"begin": 3497,
									"end": 3715,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "tag",
									"source": 18,
									"value": "111"
								},
								{
									"begin": 3517,
									"end": 3576,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3547,
									"end": 3548,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3538,
									"end": 3548,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3538,
									"end": 3548,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3561,
									"end": 3566,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3561,
									"end": 3566,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 3561,
									"end": 3566,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "tag",
									"source": 18,
									"value": "112"
								},
								{
									"begin": 3585,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3622,
									"end": 3625,
									"name": "PUSH",
									"source": 18,
									"value": "FF"
								},
								{
									"begin": 3612,
									"end": 3620,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 3609,
									"end": 3626,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 3606,
									"end": 3649,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 3606,
									"end": 3649,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "114"
								},
								{
									"begin": 3606,
									"end": 3649,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3629,
									"end": 3647,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "114"
								},
								{
									"begin": 3629,
									"end": 3647,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 3629,
									"end": 3647,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3629,
									"end": 3647,
									"name": "tag",
									"source": 18,
									"value": "114"
								},
								{
									"begin": 3629,
									"end": 3647,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3685,
									"end": 3686,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3671,
									"end": 3687,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3671,
									"end": 3687,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 3700,
									"end": 3705,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 3700,
									"end": 3705,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3497,
									"end": 3715,
									"name": "tag",
									"source": 18,
									"value": "110"
								},
								{
									"begin": 3497,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3497,
									"end": 3715,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 3799,
									"end": 3801,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3789,
									"end": 3797,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 3786,
									"end": 3802,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 3780,
									"end": 3783,
									"name": "PUSH",
									"source": 18,
									"value": "133"
								},
								{
									"begin": 3774,
									"end": 3778,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 3771,
									"end": 3784,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 3767,
									"end": 3803,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3761,
									"end": 3763,
									"name": "PUSH",
									"source": 18,
									"value": "4E"
								},
								{
									"begin": 3751,
									"end": 3759,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 3748,
									"end": 3764,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 3743,
									"end": 3745,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 3737,
									"end": 3741,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 3734,
									"end": 3746,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 3730,
									"end": 3765,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3727,
									"end": 3804,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 3724,
									"end": 3883,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 3724,
									"end": 3883,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "115"
								},
								{
									"begin": 3724,
									"end": 3883,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3836,
									"end": 3855,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3836,
									"end": 3855,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3836,
									"end": 3855,
									"name": "EXP",
									"source": 18
								},
								{
									"begin": 3868,
									"end": 3873,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 3868,
									"end": 3873,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3724,
									"end": 3883,
									"name": "tag",
									"source": 18,
									"value": "115"
								},
								{
									"begin": 3724,
									"end": 3883,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3915,
									"end": 3949,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "116"
								},
								{
									"begin": 3940,
									"end": 3948,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 3934,
									"end": 3938,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 3915,
									"end": 3949,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "70"
								},
								{
									"begin": 3915,
									"end": 3949,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3915,
									"end": 3949,
									"name": "tag",
									"source": 18,
									"value": "116"
								},
								{
									"begin": 3915,
									"end": 3949,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3985,
									"end": 3991,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3981,
									"end": 3982,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 3977,
									"end": 3983,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 3973,
									"end": 3992,
									"name": "DIV",
									"source": 18
								},
								{
									"begin": 3964,
									"end": 3971,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3961,
									"end": 3993,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 3958,
									"end": 4016,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 3958,
									"end": 4016,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "118"
								},
								{
									"begin": 3958,
									"end": 4016,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3996,
									"end": 4014,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "118"
								},
								{
									"begin": 3996,
									"end": 4014,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 3996,
									"end": 4014,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3996,
									"end": 4014,
									"name": "tag",
									"source": 18,
									"value": "118"
								},
								{
									"begin": 3996,
									"end": 4014,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 4034,
									"end": 4054,
									"name": "MUL",
									"source": 18
								},
								{
									"begin": 4034,
									"end": 4054,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 3254,
									"end": 4060,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3254,
									"end": 4060,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 4065,
									"end": 4205,
									"name": "tag",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 4065,
									"end": 4205,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 4123,
									"end": 4128,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 4152,
									"end": 4199,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 4193,
									"end": 4197,
									"name": "PUSH",
									"source": 18,
									"value": "FF"
								},
								{
									"begin": 4183,
									"end": 4191,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 4179,
									"end": 4198,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 4173,
									"end": 4177,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 4152,
									"end": 4199,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "71"
								},
								{
									"begin": 4152,
									"end": 4199,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 4152,
									"end": 4199,
									"name": "tag",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 4152,
									"end": 4199,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 4143,
									"end": 4199,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 4065,
									"end": 4205,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4065,
									"end": 4205,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 4210,
									"end": 4378,
									"name": "tag",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 4210,
									"end": 4378,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 4283,
									"end": 4292,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 4283,
									"end": 4292,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4283,
									"end": 4292,
									"name": "MUL",
									"source": 18
								},
								{
									"begin": 4314,
									"end": 4323,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 4314,
									"end": 4323,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 4331,
									"end": 4346,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4331,
									"end": 4346,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4331,
									"end": 4346,
									"name": "DIV",
									"source": 18
								},
								{
									"begin": 4325,
									"end": 4347,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 4325,
									"end": 4347,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 4311,
									"end": 4348,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 4301,
									"end": 4372,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 4301,
									"end": 4372,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 4352,
									"end": 4370,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 4352,
									"end": 4370,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 4352,
									"end": 4370,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "tag",
									"source": 18,
									"value": "48"
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 5197,
									"end": 5201,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 5226,
									"end": 5228,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 5255,
									"end": 5257,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 5244,
									"end": 5253,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 5237,
									"end": 5258,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 5287,
									"end": 5293,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 5281,
									"end": 5294,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 5330,
									"end": 5336,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 5325,
									"end": 5327,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 5314,
									"end": 5323,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 5310,
									"end": 5328,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5303,
									"end": 5337,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 5355,
									"end": 5356,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "tag",
									"source": 18,
									"value": "127"
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 5379,
									"end": 5385,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 5376,
									"end": 5377,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 5373,
									"end": 5386,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "129"
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 5474,
									"end": 5488,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 5474,
									"end": 5488,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 5474,
									"end": 5488,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5470,
									"end": 5493,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 5470,
									"end": 5493,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5464,
									"end": 5494,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 5440,
									"end": 5457,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 5440,
									"end": 5457,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 5440,
									"end": 5457,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5459,
									"end": 5461,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 5436,
									"end": 5462,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5429,
									"end": 5495,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 5394,
									"end": 5404,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 5394,
									"end": 5404,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "127"
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "tag",
									"source": 18,
									"value": "129"
								},
								{
									"begin": 5365,
									"end": 5505,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 5369,
									"end": 5372,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5554,
									"end": 5555,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 5549,
									"end": 5551,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 5540,
									"end": 5546,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 5529,
									"end": 5538,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 5525,
									"end": 5547,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5521,
									"end": 5552,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5514,
									"end": 5556,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 5624,
									"end": 5626,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 5617,
									"end": 5619,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 5613,
									"end": 5620,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 5608,
									"end": 5610,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 5600,
									"end": 5606,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 5596,
									"end": 5611,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5592,
									"end": 5621,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 5581,
									"end": 5590,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 5577,
									"end": 5622,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5573,
									"end": 5627,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5565,
									"end": 5627,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 5565,
									"end": 5627,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5565,
									"end": 5627,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5565,
									"end": 5627,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 5085,
									"end": 5633,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 5638,
									"end": 5935,
									"name": "tag",
									"source": 18,
									"value": "50"
								},
								{
									"begin": 5638,
									"end": 5935,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 5756,
									"end": 5768,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 5756,
									"end": 5768,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 5803,
									"end": 5807,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 5792,
									"end": 5808,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 5792,
									"end": 5808,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 5792,
									"end": 5808,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 5786,
									"end": 5809,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 5786,
									"end": 5809,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 5756,
									"end": 5768,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 5821,
									"end": 5837,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 5821,
									"end": 5837,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 5818,
									"end": 5929,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 5818,
									"end": 5929,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "76"
								},
								{
									"begin": 5818,
									"end": 5929,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 5895,
									"end": 5899,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 5891,
									"end": 5908,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 5891,
									"end": 5908,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 5891,
									"end": 5908,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 5891,
									"end": 5908,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 5888,
									"end": 5889,
									"name": "PUSH",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 5884,
									"end": 5909,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 5880,
									"end": 5918,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 5869,
									"end": 5919,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 5869,
									"end": 5919,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 5638,
									"end": 5935,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5638,
									"end": 5935,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 5940,
									"end": 6065,
									"name": "tag",
									"source": 18,
									"value": "55"
								},
								{
									"begin": 5940,
									"end": 6065,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 6005,
									"end": 6014,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 6005,
									"end": 6014,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 6005,
									"end": 6014,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 6026,
									"end": 6036,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 6026,
									"end": 6036,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 6026,
									"end": 6036,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 6023,
									"end": 6059,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 6023,
									"end": 6059,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 6023,
									"end": 6059,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 6039,
									"end": 6057,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "31"
								},
								{
									"begin": 6039,
									"end": 6057,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "69"
								},
								{
									"begin": 6039,
									"end": 6057,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 6420,
									"end": 6597,
									"name": "tag",
									"source": 18,
									"value": "72"
								},
								{
									"begin": 6420,
									"end": 6597,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "A0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "C0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "120"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "140"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2033"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2030"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2027"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2025"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2023"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2021"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "ASSIGNIMMUTABLE",
									"source": 17,
									"value": "2019"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 1001,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ae5dc479232d5b211f00338d7e9943b28c99cc21d127f1ff4b3e2bc86601b4c364736f6c63430008160033",
									".code": [
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "tag",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "A9059CBB"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "14"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "B7881EB0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "D505ACCF"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "DD62ED3E"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "tag",
											"source": 17,
											"value": "19"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "70A08231"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "10"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "7ECEBE00"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "11"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "84B0196E"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "12"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "95D89B41"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "13"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "tag",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "23B872DD"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "313CE567"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "3644E515"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "6DCEA85F"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "tag",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "6FDDE03"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "95EA7B3"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "18160DDD"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "5"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "tag",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 268,
											"end": 1001,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2131,
											"end": 2222,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2131,
											"end": 2222,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 4424,
											"end": 4614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4424,
											"end": 4614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1269,
											"end": 1283,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1269,
											"end": 1283,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1262,
											"end": 1284,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1244,
											"end": 1285,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1244,
											"end": 1285,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1232,
											"end": 1234,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1217,
											"end": 1235,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1104,
											"end": 1291,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3312,
											"end": 3324,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3312,
											"end": 3324,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1430,
											"end": 1432,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3233,
											"end": 3332,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 5192,
											"end": 5441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5192,
											"end": 5441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3084,
											"end": 3168,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3084,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3084,
											"end": 3168,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3084,
											"end": 3168,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3158,
											"end": 3160,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1953,
											"end": 1989,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1953,
											"end": 1989,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1941,
											"end": 1943,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1926,
											"end": 1944,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3084,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1811,
											"end": 1995,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 2735,
											"end": 2849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 523,
											"end": 677,
											"name": "tag",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "48"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "49"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "50"
										},
										{
											"begin": 523,
											"end": 677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "tag",
											"source": 17,
											"value": "49"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "51"
										},
										{
											"begin": 523,
											"end": 677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "tag",
											"source": 17,
											"value": "48"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"name": "STOP",
											"source": 17
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 3395,
											"end": 3513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3460,
											"end": 3467,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3487,
											"end": 3505,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3395,
											"end": 3513,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2477,
											"end": 2622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "tag",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "58"
										},
										{
											"begin": 2477,
											"end": 2622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 5257,
											"end": 5837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "tag",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 5257,
											"end": 5837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2341,
											"end": 2436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 3718,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3718,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 809,
											"end": 998,
											"name": "tag",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 809,
											"end": 998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "72"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 809,
											"end": 998,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "37"
										},
										{
											"begin": 809,
											"end": 998,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 809,
											"end": 998,
											"name": "tag",
											"source": 17,
											"value": "72"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 809,
											"end": 998,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "73"
										},
										{
											"begin": 809,
											"end": 998,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 1723,
											"end": 2418,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "tag",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1723,
											"end": 2418,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 3963,
											"end": 4105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4043,
											"end": 4050,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4081,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3963,
											"end": 4105,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2176,
											"end": 2189,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2209,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2202,
											"end": 2214,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2202,
											"end": 2214,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2214,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2131,
											"end": 2222,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4497,
											"end": 4501,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4553,
											"end": 4584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4569,
											"end": 4576,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4578,
											"end": 4583,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 4553,
											"end": 4584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4584,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 4553,
											"end": 4584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4602,
											"end": 4606,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4595,
											"end": 4606,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4595,
											"end": 4606,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4595,
											"end": 4606,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4424,
											"end": 4614,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5279,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 5337,
											"end": 5374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5353,
											"end": 5357,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 752,
											"end": 762,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5368,
											"end": 5373,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5337,
											"end": 5352,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5337,
											"end": 5374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5337,
											"end": 5374,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5337,
											"end": 5374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5385,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 5395,
											"end": 5399,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5401,
											"end": 5403,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5405,
											"end": 5410,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5385,
											"end": 5394,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 5385,
											"end": 5411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5385,
											"end": 5411,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 5385,
											"end": 5411,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5429,
											"end": 5433,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5429,
											"end": 5433,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5441,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5192,
											"end": 5441,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2794,
											"end": 2801,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 2821,
											"end": 2841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2821,
											"end": 2841,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2821,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2814,
											"end": 2841,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2814,
											"end": 2841,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2735,
											"end": 2849,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2735,
											"end": 2849,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 523,
											"end": 677,
											"name": "tag",
											"source": 17,
											"value": "51"
										},
										{
											"begin": 523,
											"end": 677,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 599,
											"end": 604,
											"name": "PUSH",
											"source": 17,
											"value": "9"
										},
										{
											"begin": 599,
											"end": 604,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 599,
											"end": 604,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 587,
											"end": 597,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 587,
											"end": 604,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 579,
											"end": 642,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5187,
											"end": 5189,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5169,
											"end": 5190,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5226,
											"end": 5228,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5199,
											"end": 5229,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5265,
											"end": 5299,
											"name": "PUSH",
											"source": 18,
											"value": "4F6E6C792061646D696E2063616E2063616C6C20746869732066756E6374696F"
										},
										{
											"begin": 5245,
											"end": 5263,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5245,
											"end": 5263,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5245,
											"end": 5263,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5238,
											"end": 5300,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5316,
											"end": 5334,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5316,
											"end": 5334,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5316,
											"end": 5334,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5309,
											"end": 5340,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5357,
											"end": 5376,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5357,
											"end": 5376,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 579,
											"end": 642,
											"name": "tag",
											"source": 17,
											"value": "109"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 579,
											"end": 642,
											"name": "tag",
											"source": 17,
											"value": "108"
										},
										{
											"begin": 579,
											"end": 642,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 653,
											"end": 659,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 653,
											"end": 669,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 653,
											"end": 669,
											"name": "AND",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "OR",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 653,
											"end": 669,
											"name": "SSTORE",
											"source": 17
										},
										{
											"begin": 523,
											"end": 677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "tag",
											"source": 4,
											"value": "58"
										},
										{
											"begin": 2477,
											"end": 2622,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 643,
											"end": 657,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 643,
											"end": 657,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 643,
											"end": 650,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 643,
											"end": 657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 643,
											"end": 657,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 643,
											"end": 657,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 643,
											"end": 657,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2595,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 556,
											"end": 665,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 5257,
											"end": 5837,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5360,
											"end": 5373,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5388,
											"end": 5406,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5421,
											"end": 5442,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5457,
											"end": 5472,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5512,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5527,
											"end": 5539,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5554,
											"end": 5581,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 5662,
											"end": 5675,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "116"
										},
										{
											"begin": 5662,
											"end": 5673,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 5662,
											"end": 5675,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5662,
											"end": 5675,
											"name": "tag",
											"source": 13,
											"value": "116"
										},
										{
											"begin": 5662,
											"end": 5675,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5690,
											"end": 5706,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 5690,
											"end": 5704,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 5690,
											"end": 5706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5690,
											"end": 5706,
											"name": "tag",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 5690,
											"end": 5706,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 5785,
											"end": 5786,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP12",
											"source": 13
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP11",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP9",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5721,
											"end": 5734,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 5721,
											"end": 5734,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5757,
											"end": 5761,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 5757,
											"end": 5761,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5785,
											"end": 5786,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5802,
											"end": 5818,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5609,
											"end": 5829,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5257,
											"end": 5837,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2341,
											"end": 2436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2388,
											"end": 2401,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2421,
											"end": 2428,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 2414,
											"end": 2428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 3718,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3787,
											"end": 3791,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3860,
											"end": 3862,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3864,
											"end": 3869,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3843,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 3843,
											"end": 3870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 809,
											"end": 998,
											"name": "tag",
											"source": 17,
											"value": "73"
										},
										{
											"begin": 809,
											"end": 998,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 736,
											"end": 742,
											"name": "PUSH",
											"source": 17,
											"value": "8"
										},
										{
											"begin": 736,
											"end": 742,
											"name": "SLOAD",
											"source": 17
										},
										{
											"begin": 897,
											"end": 904,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 897,
											"end": 904,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 736,
											"end": 742,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 724,
											"end": 734,
											"name": "CALLER",
											"source": 17
										},
										{
											"begin": 724,
											"end": 742,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 716,
											"end": 781,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "134"
										},
										{
											"begin": 716,
											"end": 781,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 716,
											"end": 781,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 716,
											"end": 781,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 716,
											"end": 781,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 716,
											"end": 781,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5721,
											"end": 5723,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 716,
											"end": 781,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 716,
											"end": 781,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 716,
											"end": 781,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5703,
											"end": 5724,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5760,
											"end": 5762,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 5740,
											"end": 5758,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 5740,
											"end": 5758,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5740,
											"end": 5758,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5733,
											"end": 5763,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5799,
											"end": 5833,
											"name": "PUSH",
											"source": 18,
											"value": "4F6E6C79206D61726B65742063616E2063616C6C20746869732066756E637469"
										},
										{
											"begin": 5779,
											"end": 5797,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 5779,
											"end": 5797,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5779,
											"end": 5797,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5772,
											"end": 5834,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5850,
											"end": 5868,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5850,
											"end": 5868,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5850,
											"end": 5868,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5843,
											"end": 5875,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5892,
											"end": 5911,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5892,
											"end": 5911,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 716,
											"end": 781,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "109"
										},
										{
											"begin": 5519,
											"end": 5917,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 716,
											"end": 781,
											"name": "tag",
											"source": 17,
											"value": "134"
										},
										{
											"begin": 716,
											"end": 781,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 916,
											"end": 935,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 922,
											"end": 927,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 928,
											"end": 934,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 916,
											"end": 921,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 916,
											"end": 935,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 916,
											"end": 935,
											"modifierDepth": 1,
											"name": "tag",
											"source": 17,
											"value": "138"
										},
										{
											"begin": 916,
											"end": 935,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 946,
											"end": 966,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 952,
											"end": 958,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 959,
											"end": 965,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 946,
											"end": 951,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "139"
										},
										{
											"begin": 946,
											"end": 966,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 946,
											"end": 966,
											"modifierDepth": 1,
											"name": "tag",
											"source": 17,
											"value": "140"
										},
										{
											"begin": 946,
											"end": 966,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 984,
											"end": 990,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 809,
											"end": 998,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 809,
											"end": 998,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1953,
											"end": 1961,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1935,
											"end": 1950,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 1935,
											"end": 1961,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1931,
											"end": 2030,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1931,
											"end": 2030,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1931,
											"end": 2030,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313C8981"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1985,
											"end": 2018,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1931,
											"end": 2030,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1931,
											"end": 2030,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2042,
											"end": 2060,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1043,
											"end": 1138,
											"name": "PUSH",
											"source": 4,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2101,
											"end": 2106,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 2108,
											"end": 2115,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 2117,
											"end": 2122,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 2124,
											"end": 2140,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 2134,
											"end": 2139,
											"name": "DUP13",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 846,
											"end": 853,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1160,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1167,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1153,
											"end": 1169,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 786,
											"end": 1188,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2124,
											"end": 2140,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 2124,
											"end": 2140,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6209,
											"end": 6234,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 6209,
											"end": 6234,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6209,
											"end": 6234,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 6209,
											"end": 6234,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6308,
											"end": 6323,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 6308,
											"end": 6323,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 6308,
											"end": 6323,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6288,
											"end": 6306,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6288,
											"end": 6306,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 6288,
											"end": 6306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6281,
											"end": 6324,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6360,
											"end": 6375,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 6360,
											"end": 6375,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6360,
											"end": 6375,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 6360,
											"end": 6375,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6340,
											"end": 6358,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 6340,
											"end": 6358,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 6340,
											"end": 6358,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6333,
											"end": 6376,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6392,
											"end": 6410,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 6392,
											"end": 6410,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6392,
											"end": 6410,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6385,
											"end": 6419,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6435,
											"end": 6454,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 6435,
											"end": 6454,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6435,
											"end": 6454,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6428,
											"end": 6463,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6479,
											"end": 6498,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 6479,
											"end": 6498,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 6479,
											"end": 6498,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6472,
											"end": 6507,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 6472,
											"end": 6507,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 6472,
											"end": 6507,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6181,
											"end": 6200,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 6181,
											"end": 6200,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2073,
											"end": 2151,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2063,
											"end": 2152,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2042,
											"end": 2152,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2042,
											"end": 2152,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2165,
											"end": 2177,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2180,
											"end": 2208,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 2197,
											"end": 2207,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2180,
											"end": 2196,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 2180,
											"end": 2208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2180,
											"end": 2208,
											"name": "tag",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 2180,
											"end": 2208,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2165,
											"end": 2208,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2165,
											"end": 2208,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2221,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2238,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 2252,
											"end": 2256,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2258,
											"end": 2259,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 2261,
											"end": 2262,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 2264,
											"end": 2265,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 2238,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 2238,
											"end": 2266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2238,
											"end": 2266,
											"name": "tag",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 2238,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2221,
											"end": 2266,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2221,
											"end": 2266,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2291,
											"end": 2296,
											"name": "DUP10",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2296,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2281,
											"end": 2287,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2296,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2281,
											"end": 2296,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2277,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 2277,
											"end": 2367,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "25C00723"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6748,
											"end": 6763,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 6748,
											"end": 6763,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 6748,
											"end": 6763,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6730,
											"end": 6764,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6800,
											"end": 6815,
											"name": "DUP12",
											"source": 18
										},
										{
											"begin": 6800,
											"end": 6815,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6780,
											"end": 6798,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 6780,
											"end": 6798,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 6780,
											"end": 6798,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6773,
											"end": 6816,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6665,
											"end": 6683,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 6665,
											"end": 6683,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2320,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 6518,
											"end": 6822,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2277,
											"end": 2367,
											"name": "tag",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 2277,
											"end": 2367,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2379,
											"end": 2410,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 2388,
											"end": 2393,
											"name": "DUP11",
											"source": 4
										},
										{
											"begin": 2395,
											"end": 2402,
											"name": "DUP11",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "DUP11",
											"source": 4
										},
										{
											"begin": 2379,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 2379,
											"end": 2410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2379,
											"end": 2410,
											"name": "tag",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 2379,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1920,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1920,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1920,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1723,
											"end": 2418,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9251,
											"end": 9381,
											"name": "tag",
											"source": 2,
											"value": "95"
										},
										{
											"begin": 9251,
											"end": 9381,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 9345,
											"end": 9350,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9352,
											"end": 9359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9361,
											"end": 9366,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9368,
											"end": 9372,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9336,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 9336,
											"end": 9373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9251,
											"end": 9381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9251,
											"end": 9381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9251,
											"end": 9381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9251,
											"end": 9381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 11454,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10967,
											"end": 11454,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11067,
											"end": 11091,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4081,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4088,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4070,
											"end": 4097,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11134,
											"end": 11171,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11134,
											"end": 11171,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11130,
											"end": 11447,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 11130,
											"end": 11447,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11211,
											"end": 11216,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11192,
											"end": 11208,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11192,
											"end": 11216,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11188,
											"end": 11320,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11188,
											"end": 11320,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 11188,
											"end": 11320,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7047,
											"end": 7079,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 7047,
											"end": 7079,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7029,
											"end": 7080,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7002,
											"end": 7020,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7002,
											"end": 7020,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 11244,
											"end": 11304,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 6827,
											"end": 7172,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 11188,
											"end": 11320,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 11188,
											"end": 11320,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11363,
											"end": 11420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 11372,
											"end": 11377,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11379,
											"end": 11386,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11407,
											"end": 11412,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11388,
											"end": 11404,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11388,
											"end": 11412,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11414,
											"end": 11419,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11363,
											"end": 11371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 11363,
											"end": 11420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11363,
											"end": 11420,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 11363,
											"end": 11420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11056,
											"end": 11454,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 11454,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 11454,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 11454,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10967,
											"end": 11454,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5826,
											"end": 6134,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 5826,
											"end": 6134,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5910,
											"end": 5928,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5910,
											"end": 5928,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5906,
											"end": 5994,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 5906,
											"end": 5994,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5979,
											"end": 5980,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7323,
											"end": 7374,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5952,
											"end": 5982,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 7177,
											"end": 7380,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5906,
											"end": 5994,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 5906,
											"end": 5994,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6008,
											"end": 6024,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6008,
											"end": 6024,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6004,
											"end": 6092,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 6004,
											"end": 6092,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6077,
											"end": 6078,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7323,
											"end": 7374,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6048,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 7177,
											"end": 7380,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6004,
											"end": 6092,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 6004,
											"end": 6092,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6102,
											"end": 6126,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 6110,
											"end": 6114,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6116,
											"end": 6118,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6120,
											"end": 6125,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6102,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 6102,
											"end": 6126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3924,
											"end": 4192,
											"name": "tag",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 3924,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3977,
											"end": 3984,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4009,
											"end": 4013,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4018,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2023"
										},
										{
											"begin": 4001,
											"end": 4029,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4029,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4050,
											"end": 4064,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2021"
										},
										{
											"begin": 4033,
											"end": 4046,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 4033,
											"end": 4064,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "tag",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 4001,
											"end": 4064,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3997,
											"end": 4185,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3997,
											"end": 4185,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "178"
										},
										{
											"begin": 3997,
											"end": 4185,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4088,
											"end": 4110,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2019"
										},
										{
											"begin": 4088,
											"end": 4110,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3924,
											"end": 4192,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3997,
											"end": 4185,
											"name": "tag",
											"source": 13,
											"value": "178"
										},
										{
											"begin": 3997,
											"end": 4185,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4150,
											"end": 4173,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2116,
											"end": 2211,
											"name": "PUSH",
											"source": 13,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7871,
											"end": 7896,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4314,
											"end": 4325,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2025"
										},
										{
											"begin": 7912,
											"end": 7930,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 7912,
											"end": 7930,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 7912,
											"end": 7930,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7905,
											"end": 7939,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 7905,
											"end": 7939,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7905,
											"end": 7939,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 7905,
											"end": 7939,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4327,
											"end": 4341,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2027"
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7955,
											"end": 7973,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7948,
											"end": 7982,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4343,
											"end": 4356,
											"name": "CHAINID",
											"source": 13
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7998,
											"end": 8016,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7991,
											"end": 8025,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 8041,
											"end": 8060,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 8041,
											"end": 8060,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8041,
											"end": 8060,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8034,
											"end": 8095,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4255,
											"end": 4262,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4255,
											"end": 4262,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7843,
											"end": 7862,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 7843,
											"end": 7862,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4292,
											"end": 4372,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4373,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 4275,
											"end": 4373,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4275,
											"end": 4373,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4200,
											"end": 4381,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4200,
											"end": 4381,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6166,
											"end": 6294,
											"name": "tag",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 6166,
											"end": 6294,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6212,
											"end": 6225,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6245,
											"end": 6286,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 6245,
											"end": 6250,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2030"
										},
										{
											"begin": 6272,
											"end": 6285,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 6245,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "185"
										},
										{
											"begin": 6245,
											"end": 6286,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6629,
											"end": 6766,
											"name": "tag",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 6629,
											"end": 6766,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6678,
											"end": 6691,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 6711,
											"end": 6758,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 6711,
											"end": 6719,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "2033"
										},
										{
											"begin": 6741,
											"end": 6757,
											"name": "PUSH",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 6711,
											"end": 6740,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "185"
										},
										{
											"begin": 6711,
											"end": 6758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7946,
											"end": 8159,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 7946,
											"end": 8159,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8017,
											"end": 8038,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8017,
											"end": 8038,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8013,
											"end": 8106,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 8013,
											"end": 8106,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8091,
											"end": 8092,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7323,
											"end": 7374,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8062,
											"end": 8094,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 7177,
											"end": 7380,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8013,
											"end": 8106,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 8013,
											"end": 8106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8116,
											"end": 8151,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 8132,
											"end": 8133,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8136,
											"end": 8143,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8145,
											"end": 8150,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8116,
											"end": 8123,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 8116,
											"end": 8151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8116,
											"end": 8151,
											"name": "tag",
											"source": 2,
											"value": "191"
										},
										{
											"begin": 8116,
											"end": 8151,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 8159,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 8159,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 8159,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5023,
											"end": 5201,
											"name": "tag",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 5023,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5100,
											"end": 5107,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5127,
											"end": 5193,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "91"
										},
										{
											"begin": 5160,
											"end": 5180,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 5160,
											"end": 5178,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 5160,
											"end": 5180,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5160,
											"end": 5180,
											"name": "tag",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 5160,
											"end": 5180,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5182,
											"end": 5192,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3633,
											"end": 3637,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3627,
											"end": 3638,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3652,
											"end": 3675,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3652,
											"end": 3675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3705,
											"end": 3709,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 3696,
											"end": 3710,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3696,
											"end": 3710,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3689,
											"end": 3728,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3689,
											"end": 3728,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3689,
											"end": 3728,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3689,
											"end": 3728,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3758,
											"end": 3762,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 3749,
											"end": 3763,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3749,
											"end": 3763,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3742,
											"end": 3776,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3815,
											"end": 3819,
											"name": "PUSH",
											"source": 14,
											"value": "42"
										},
										{
											"begin": 3800,
											"end": 3820,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3800,
											"end": 3820,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 3800,
											"end": 3820,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3428,
											"end": 3838,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6956,
											"end": 7220,
											"name": "tag",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 6956,
											"end": 7220,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7041,
											"end": 7048,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7062,
											"end": 7079,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7081,
											"end": 7099,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7101,
											"end": 7117,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7121,
											"end": 7146,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 7132,
											"end": 7136,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7138,
											"end": 7139,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7141,
											"end": 7142,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7144,
											"end": 7145,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7121,
											"end": 7131,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 7121,
											"end": 7146,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7121,
											"end": 7146,
											"name": "tag",
											"source": 12,
											"value": "198"
										},
										{
											"begin": 7121,
											"end": 7146,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7061,
											"end": 7146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7157,
											"end": 7185,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "200"
										},
										{
											"begin": 7169,
											"end": 7174,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7176,
											"end": 7184,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7157,
											"end": 7168,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 7157,
											"end": 7185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7157,
											"end": 7185,
											"name": "tag",
											"source": 12,
											"value": "200"
										},
										{
											"begin": 7157,
											"end": 7185,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7203,
											"end": 7212,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7203,
											"end": 7212,
											"name": "SWAP7",
											"source": 12
										},
										{
											"begin": 6956,
											"end": 7220,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6956,
											"end": 7220,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10345,
											"end": 10364,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10345,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10341,
											"end": 10432,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 10341,
											"end": 10432,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10417,
											"end": 10418,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7323,
											"end": 7374,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10388,
											"end": 10420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 7177,
											"end": 7380,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10341,
											"end": 10432,
											"name": "tag",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 10341,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10446,
											"end": 10467,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10446,
											"end": 10467,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10442,
											"end": 10534,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 10442,
											"end": 10534,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10519,
											"end": 10520,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7323,
											"end": 7374,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7296,
											"end": 7314,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10491,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 7177,
											"end": 7380,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10442,
											"end": 10534,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 10442,
											"end": 10534,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10555,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10571,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10579,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10579,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10544,
											"end": 10579,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10590,
											"end": 10668,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10590,
											"end": 10668,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10590,
											"end": 10668,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 10590,
											"end": 10668,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10641,
											"end": 10648,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10634,
											"end": 10639,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10650,
											"end": 10655,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1430,
											"end": 1432,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10625,
											"end": 10656,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10232,
											"end": 10675,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10232,
											"end": 10675,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6458,
											"end": 7593,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 6458,
											"end": 7593,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6548,
											"end": 6566,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6566,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6702,
											"end": 6707,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6698,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6686,
											"end": 6698,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 6686,
											"end": 6707,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6686,
											"end": 6707,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6740,
											"end": 6759,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6762,
											"end": 6777,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6796,
											"end": 6815,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6796,
											"end": 6815,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6796,
											"end": 6815,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6909,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6792,
											"end": 6909,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 6792,
											"end": 6909,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7047,
											"end": 7079,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 7047,
											"end": 7079,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7029,
											"end": 7080,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 7096,
											"end": 7114,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7089,
											"end": 7123,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 7139,
											"end": 7157,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 7132,
											"end": 7166,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7002,
											"end": 7020,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 7002,
											"end": 7020,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6843,
											"end": 6893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 6827,
											"end": 7172,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6792,
											"end": 6909,
											"name": "tag",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 6792,
											"end": 6909,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7041,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7047,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7050,
											"end": 7069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7050,
											"end": 7069,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7050,
											"end": 7069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7050,
											"end": 7069,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7069,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7032,
											"end": 7069,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "tag",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 6544,
											"end": 7096,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7112,
											"end": 7128,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7112,
											"end": 7128,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7290,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7278,
											"end": 7299,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7503,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7507,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7494,
											"end": 7516,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "tag",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 7108,
											"end": 7543,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7575,
											"end": 7577,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7569,
											"end": 7573,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7579,
											"end": 7584,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1430,
											"end": 1432,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7560,
											"end": 7585,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 6458,
											"end": 7593,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6458,
											"end": 7593,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6458,
											"end": 7593,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6458,
											"end": 7593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3485,
											"end": 3758,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 3485,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3579,
											"end": 3592,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1431,
											"end": 1497,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3609,
											"end": 3655,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3609,
											"end": 3655,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3605,
											"end": 3751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 3605,
											"end": 3751,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3694,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 3688,
											"end": 3693,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 3679,
											"end": 3694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3679,
											"end": 3694,
											"name": "tag",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 3679,
											"end": 3694,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3694,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3694,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3694,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3672,
											"end": 3694,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3605,
											"end": 3751,
											"name": "tag",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 3605,
											"end": 3751,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3734,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3727,
											"end": 3739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3727,
											"end": 3739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "tag",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "tag",
											"source": 9,
											"value": "230"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3727,
											"end": 3739,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "tag",
											"source": 12,
											"value": "199"
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5392,
											"end": 5399,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5392,
											"end": 5399,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5392,
											"end": 5399,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6335,
											"end": 6401,
											"name": "PUSH",
											"source": 12,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6322,
											"end": 6401,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6322,
											"end": 6401,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 6318,
											"end": 6484,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6318,
											"end": 6484,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 6318,
											"end": 6484,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6434,
											"end": 6435,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6434,
											"end": 6435,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6438,
											"end": 6468,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 6438,
											"end": 6468,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6470,
											"end": 6471,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6418,
											"end": 6472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6418,
											"end": 6472,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6318,
											"end": 6484,
											"name": "tag",
											"source": 12,
											"value": "234"
										},
										{
											"begin": 6318,
											"end": 6484,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6581,
											"end": 6595,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8333,
											"end": 8358,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 8333,
											"end": 8358,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 8333,
											"end": 8358,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8406,
											"end": 8410,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 8394,
											"end": 8411,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 8394,
											"end": 8411,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 8374,
											"end": 8392,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 8374,
											"end": 8392,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 8374,
											"end": 8392,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8367,
											"end": 8412,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 8367,
											"end": 8412,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 8367,
											"end": 8412,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 8367,
											"end": 8412,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8428,
											"end": 8446,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 8428,
											"end": 8446,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 8428,
											"end": 8446,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8421,
											"end": 8455,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 8421,
											"end": 8455,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 8421,
											"end": 8455,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 8471,
											"end": 8489,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 8464,
											"end": 8498,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 8464,
											"end": 8498,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 8464,
											"end": 8498,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8305,
											"end": 8324,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 8305,
											"end": 8324,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "tag",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6598,
											"end": 6622,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6637,
											"end": 6657,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6637,
											"end": 6657,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6633,
											"end": 6748,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 6633,
											"end": 6748,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6690,
											"end": 6691,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6690,
											"end": 6691,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6694,
											"end": 6723,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 6694,
											"end": 6723,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6690,
											"end": 6691,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6690,
											"end": 6691,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6674,
											"end": 6736,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6674,
											"end": 6736,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6633,
											"end": 6748,
											"name": "tag",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 6633,
											"end": 6748,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6768,
											"end": 6774,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6776,
											"end": 6796,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6776,
											"end": 6796,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6776,
											"end": 6796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6776,
											"end": 6796,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "tag",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5261,
											"end": 6817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7358,
											"end": 7900,
											"name": "tag",
											"source": 12,
											"value": "201"
										},
										{
											"begin": 7358,
											"end": 7900,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7454,
											"end": 7474,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7445,
											"end": 7450,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 7445,
											"end": 7474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "tag",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7445,
											"end": 7474,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7441,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 7441,
											"end": 7893,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7358,
											"end": 7900,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7358,
											"end": 7900,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7358,
											"end": 7900,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7441,
											"end": 7893,
											"name": "tag",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 7441,
											"end": 7893,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7552,
											"end": 7581,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 7543,
											"end": 7548,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 7543,
											"end": 7581,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "tag",
											"source": 12,
											"value": "251"
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7543,
											"end": 7581,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7539,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "252"
										},
										{
											"begin": 7539,
											"end": 7893,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F645EEDF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7605,
											"end": 7628,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7539,
											"end": 7893,
											"name": "tag",
											"source": 12,
											"value": "252"
										},
										{
											"begin": 7539,
											"end": 7893,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7659,
											"end": 7694,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 7650,
											"end": 7655,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 7650,
											"end": 7694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "tag",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7650,
											"end": 7694,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7646,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 7646,
											"end": 7893,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FCE698F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7718,
											"end": 7764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7646,
											"end": 7893,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 7646,
											"end": 7893,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7795,
											"end": 7825,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7786,
											"end": 7791,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 7786,
											"end": 7825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7786,
											"end": 7825,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7782,
											"end": 7893,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "191"
										},
										{
											"begin": 7782,
											"end": 7893,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "35E2F383"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1442,
											"end": 1467,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7849,
											"end": 7881,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 1296,
											"end": 1473,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2555,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 2140,
											"end": 2555,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2225,
											"end": 2236,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2239,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 2250,
											"end": 2254,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2239,
											"end": 2249,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 2239,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2239,
											"end": 2255,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 2239,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2376,
											"end": 2378,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2225,
											"end": 2255,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2225,
											"end": 2255,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2345,
											"end": 2362,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2345,
											"end": 2362,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2365,
											"end": 2379,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2458,
											"end": 2474,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2458,
											"end": 2474,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2458,
											"end": 2474,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2504,
											"end": 2508,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2495,
											"end": 2509,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2495,
											"end": 2509,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2488,
											"end": 2516,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2488,
											"end": 2516,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2488,
											"end": 2516,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2488,
											"end": 2516,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2458,
											"end": 2474,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2140,
											"end": 2555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2632,
											"end": 2883,
											"name": "tag",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 2632,
											"end": 2883,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2693,
											"end": 2700,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2766,
											"end": 2770,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 2730,
											"end": 2770,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2730,
											"end": 2770,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2794,
											"end": 2796,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 2785,
											"end": 2796,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2785,
											"end": 2796,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2781,
											"end": 2852,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2781,
											"end": 2852,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 2781,
											"end": 2852,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2820,
											"end": 2840,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 14,
											"end": 437,
											"name": "tag",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 14,
											"end": 437,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 56,
											"end": 59,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 94,
											"end": 99,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 88,
											"end": 100,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 121,
											"end": 127,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 116,
											"end": 119,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 109,
											"end": 128,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 146,
											"end": 147,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 318,
											"name": "tag",
											"source": 18,
											"value": "279"
										},
										{
											"begin": 156,
											"end": 318,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 170,
											"end": 176,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 167,
											"end": 168,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 164,
											"end": 177,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 156,
											"end": 318,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 156,
											"end": 318,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "281"
										},
										{
											"begin": 156,
											"end": 318,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 232,
											"end": 236,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 288,
											"end": 301,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 288,
											"end": 301,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 288,
											"end": 301,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 284,
											"end": 306,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 284,
											"end": 306,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 278,
											"end": 307,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 260,
											"end": 271,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 260,
											"end": 271,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 260,
											"end": 271,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 256,
											"end": 276,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 256,
											"end": 276,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 249,
											"end": 308,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 185,
											"end": 197,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 156,
											"end": 318,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "279"
										},
										{
											"begin": 156,
											"end": 318,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 156,
											"end": 318,
											"name": "tag",
											"source": 18,
											"value": "281"
										},
										{
											"begin": 156,
											"end": 318,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 160,
											"end": 163,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 363,
											"end": 364,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 360,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 347,
											"end": 353,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 342,
											"end": 345,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 338,
											"end": 354,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 334,
											"end": 361,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 327,
											"end": 365,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 426,
											"end": 430,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 419,
											"end": 421,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 415,
											"end": 422,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 410,
											"end": 412,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 402,
											"end": 408,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 398,
											"end": 413,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 394,
											"end": 423,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 389,
											"end": 392,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 385,
											"end": 424,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 381,
											"end": 431,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 374,
											"end": 431,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 374,
											"end": 431,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 374,
											"end": 431,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 14,
											"end": 437,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 14,
											"end": 437,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 14,
											"end": 437,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 14,
											"end": 437,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 14,
											"end": 437,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 442,
											"end": 662,
											"name": "tag",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 442,
											"end": 662,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 591,
											"end": 593,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 580,
											"end": 589,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 573,
											"end": 594,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 554,
											"end": 558,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 611,
											"end": 656,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "283"
										},
										{
											"begin": 652,
											"end": 654,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 641,
											"end": 650,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 637,
											"end": 655,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 629,
											"end": 635,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 611,
											"end": 656,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 611,
											"end": 656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 611,
											"end": 656,
											"name": "tag",
											"source": 18,
											"value": "283"
										},
										{
											"begin": 611,
											"end": 656,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 603,
											"end": 656,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 442,
											"end": 662,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 442,
											"end": 662,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 667,
											"end": 840,
											"name": "tag",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 667,
											"end": 840,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 735,
											"end": 755,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 735,
											"end": 755,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 784,
											"end": 815,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 784,
											"end": 815,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 774,
											"end": 816,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 774,
											"end": 816,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 764,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "285"
										},
										{
											"begin": 764,
											"end": 834,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 830,
											"end": 831,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 828,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 820,
											"end": 832,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 764,
											"end": 834,
											"name": "tag",
											"source": 18,
											"value": "285"
										},
										{
											"begin": 764,
											"end": 834,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 667,
											"end": 840,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 667,
											"end": 840,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 667,
											"end": 840,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 667,
											"end": 840,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 845,
											"end": 1099,
											"name": "tag",
											"source": 18,
											"value": "27"
										},
										{
											"begin": 845,
											"end": 1099,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 913,
											"end": 919,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 921,
											"end": 927,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 974,
											"end": 976,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 962,
											"end": 971,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 953,
											"end": 960,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 949,
											"end": 972,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 945,
											"end": 977,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 942,
											"end": 994,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 942,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "287"
										},
										{
											"begin": 942,
											"end": 994,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 990,
											"end": 991,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 987,
											"end": 988,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 980,
											"end": 992,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 942,
											"end": 994,
											"name": "tag",
											"source": 18,
											"value": "287"
										},
										{
											"begin": 942,
											"end": 994,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1013,
											"end": 1042,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "288"
										},
										{
											"begin": 1032,
											"end": 1041,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1013,
											"end": 1042,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 1013,
											"end": 1042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1013,
											"end": 1042,
											"name": "tag",
											"source": 18,
											"value": "288"
										},
										{
											"begin": 1013,
											"end": 1042,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1003,
											"end": 1042,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1089,
											"end": 1091,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1074,
											"end": 1092,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1074,
											"end": 1092,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1074,
											"end": 1092,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1074,
											"end": 1092,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1061,
											"end": 1093,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1061,
											"end": 1093,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 845,
											"end": 1099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "tag",
											"source": 18,
											"value": "37"
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1555,
											"end": 1561,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1563,
											"end": 1569,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1571,
											"end": 1577,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1624,
											"end": 1626,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 1612,
											"end": 1621,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1603,
											"end": 1610,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 1599,
											"end": 1622,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1595,
											"end": 1627,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 1592,
											"end": 1644,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1592,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "292"
										},
										{
											"begin": 1592,
											"end": 1644,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1640,
											"end": 1641,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1637,
											"end": 1638,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1630,
											"end": 1642,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1592,
											"end": 1644,
											"name": "tag",
											"source": 18,
											"value": "292"
										},
										{
											"begin": 1592,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1663,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "293"
										},
										{
											"begin": 1682,
											"end": 1691,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1663,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 1663,
											"end": 1692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1663,
											"end": 1692,
											"name": "tag",
											"source": 18,
											"value": "293"
										},
										{
											"begin": 1663,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1653,
											"end": 1692,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1653,
											"end": 1692,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1711,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "294"
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1711,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 1711,
											"end": 1749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1711,
											"end": 1749,
											"name": "tag",
											"source": 18,
											"value": "294"
										},
										{
											"begin": 1711,
											"end": 1749,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1701,
											"end": 1749,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1701,
											"end": 1749,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1796,
											"end": 1798,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1785,
											"end": 1794,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1781,
											"end": 1799,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1768,
											"end": 1800,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1758,
											"end": 1800,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1758,
											"end": 1800,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1478,
											"end": 1806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2182,
											"end": 2368,
											"name": "tag",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 2182,
											"end": 2368,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2241,
											"end": 2247,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2294,
											"end": 2296,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2282,
											"end": 2291,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2273,
											"end": 2280,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2269,
											"end": 2292,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2265,
											"end": 2297,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 2262,
											"end": 2314,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 2262,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "298"
										},
										{
											"begin": 2262,
											"end": 2314,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2310,
											"end": 2311,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2307,
											"end": 2308,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 2300,
											"end": 2312,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2262,
											"end": 2314,
											"name": "tag",
											"source": 18,
											"value": "298"
										},
										{
											"begin": 2262,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "283"
										},
										{
											"begin": 2352,
											"end": 2361,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 2333,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 2333,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2373,
											"end": 3632,
											"name": "tag",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 2373,
											"end": 3632,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2779,
											"end": 2782,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 2774,
											"end": 2777,
											"name": "PUSH",
											"source": 18,
											"value": "F8"
										},
										{
											"begin": 2770,
											"end": 2783,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 2762,
											"end": 2768,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 2758,
											"end": 2784,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 2747,
											"end": 2756,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2740,
											"end": 2785,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2721,
											"end": 2725,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 2804,
											"end": 2806,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2842,
											"end": 2845,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2837,
											"end": 2839,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 2826,
											"end": 2835,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2822,
											"end": 2840,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2815,
											"end": 2846,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2869,
											"end": 2915,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "301"
										},
										{
											"begin": 2910,
											"end": 2913,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 2899,
											"end": 2908,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 2895,
											"end": 2914,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2887,
											"end": 2893,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 2869,
											"end": 2915,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 2869,
											"end": 2915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2869,
											"end": 2915,
											"name": "tag",
											"source": 18,
											"value": "301"
										},
										{
											"begin": 2869,
											"end": 2915,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 2963,
											"end": 2972,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 2951,
											"end": 2973,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 2946,
											"end": 2948,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 2935,
											"end": 2944,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 2931,
											"end": 2949,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2924,
											"end": 2974,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 2997,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "302"
										},
										{
											"begin": 3023,
											"end": 3029,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3015,
											"end": 3021,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 2997,
											"end": 3030,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 2997,
											"end": 3030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2997,
											"end": 3030,
											"name": "tag",
											"source": 18,
											"value": "302"
										},
										{
											"begin": 2997,
											"end": 3030,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3061,
											"end": 3063,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 3046,
											"end": 3064,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3046,
											"end": 3064,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3039,
											"end": 3073,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 3039,
											"end": 3073,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3039,
											"end": 3073,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3110,
											"end": 3142,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 3110,
											"end": 3142,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3104,
											"end": 3107,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 3089,
											"end": 3108,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3089,
											"end": 3108,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3082,
											"end": 3143,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3130,
											"end": 3133,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 3159,
											"end": 3178,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3159,
											"end": 3178,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3152,
											"end": 3187,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 3152,
											"end": 3187,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3152,
											"end": 3187,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3224,
											"end": 3246,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3224,
											"end": 3246,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3224,
											"end": 3246,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3218,
											"end": 3221,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 3203,
											"end": 3222,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3203,
											"end": 3222,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3196,
											"end": 3247,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3296,
											"end": 3309,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3296,
											"end": 3309,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3318,
											"end": 3340,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3318,
											"end": 3340,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3318,
											"end": 3340,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3368,
											"end": 3370,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3394,
											"end": 3409,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3394,
											"end": 3409,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 3394,
											"end": 3409,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3394,
											"end": 3409,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3356,
											"end": 3371,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3356,
											"end": 3371,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3356,
											"end": 3371,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3356,
											"end": 3371,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "tag",
											"source": 18,
											"value": "303"
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3451,
											"end": 3457,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3448,
											"end": 3449,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3445,
											"end": 3458,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "305"
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3512,
											"end": 3525,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3512,
											"end": 3525,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3500,
											"end": 3526,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3500,
											"end": 3526,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3546,
											"end": 3558,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3546,
											"end": 3558,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 3546,
											"end": 3558,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3546,
											"end": 3558,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3473,
											"end": 3474,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 3466,
											"end": 3475,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "303"
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "tag",
											"source": 18,
											"value": "305"
										},
										{
											"begin": 3437,
											"end": 3606,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3623,
											"end": 3626,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3623,
											"end": 3626,
											"name": "SWAP13",
											"source": 18
										},
										{
											"begin": 2373,
											"end": 3632,
											"name": "SWAP12",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2373,
											"end": 3632,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "tag",
											"source": 18,
											"value": "77"
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3748,
											"end": 3754,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3756,
											"end": 3762,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3764,
											"end": 3770,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3772,
											"end": 3778,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3780,
											"end": 3786,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3788,
											"end": 3794,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3796,
											"end": 3802,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3849,
											"end": 3852,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 3837,
											"end": 3846,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 3828,
											"end": 3835,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 3824,
											"end": 3847,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 3820,
											"end": 3853,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 3817,
											"end": 3870,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3817,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "307"
										},
										{
											"begin": 3817,
											"end": 3870,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3866,
											"end": 3867,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3863,
											"end": 3864,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3856,
											"end": 3868,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3817,
											"end": 3870,
											"name": "tag",
											"source": 18,
											"value": "307"
										},
										{
											"begin": 3817,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3889,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "308"
										},
										{
											"begin": 3908,
											"end": 3917,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 3889,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 3889,
											"end": 3918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3889,
											"end": 3918,
											"name": "tag",
											"source": 18,
											"value": "308"
										},
										{
											"begin": 3889,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3879,
											"end": 3918,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 3879,
											"end": 3918,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3937,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "309"
										},
										{
											"begin": 3971,
											"end": 3973,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3960,
											"end": 3969,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3937,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 3937,
											"end": 3975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3937,
											"end": 3975,
											"name": "tag",
											"source": 18,
											"value": "309"
										},
										{
											"begin": 3937,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3927,
											"end": 3975,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 3927,
											"end": 3975,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4022,
											"end": 4024,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4011,
											"end": 4020,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 4007,
											"end": 4025,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3994,
											"end": 4026,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 3984,
											"end": 4026,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 3984,
											"end": 4026,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4073,
											"end": 4075,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 4062,
											"end": 4071,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 4058,
											"end": 4076,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4045,
											"end": 4077,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4035,
											"end": 4077,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 4035,
											"end": 4077,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4127,
											"end": 4130,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 4116,
											"end": 4125,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 4112,
											"end": 4131,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4099,
											"end": 4132,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4172,
											"end": 4176,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 4165,
											"end": 4170,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4161,
											"end": 4177,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4154,
											"end": 4159,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4151,
											"end": 4178,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 4141,
											"end": 4196,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "310"
										},
										{
											"begin": 4141,
											"end": 4196,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4192,
											"end": 4193,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4189,
											"end": 4190,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4182,
											"end": 4194,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4141,
											"end": 4196,
											"name": "tag",
											"source": 18,
											"value": "310"
										},
										{
											"begin": 4141,
											"end": 4196,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP10",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP9",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 4215,
											"end": 4220,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 4267,
											"end": 4270,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 4252,
											"end": 4271,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4252,
											"end": 4271,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4239,
											"end": 4272,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4239,
											"end": 4272,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4319,
											"end": 4322,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 4304,
											"end": 4323,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4304,
											"end": 4323,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 4304,
											"end": 4323,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4291,
											"end": 4324,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4291,
											"end": 4324,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3637,
											"end": 4330,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3637,
											"end": 4330,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "tag",
											"source": 18,
											"value": "81"
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4403,
											"end": 4409,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4411,
											"end": 4417,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4464,
											"end": 4466,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4452,
											"end": 4461,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4443,
											"end": 4450,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 4439,
											"end": 4462,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4435,
											"end": 4467,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 4432,
											"end": 4484,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4432,
											"end": 4484,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "312"
										},
										{
											"begin": 4432,
											"end": 4484,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4480,
											"end": 4481,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4477,
											"end": 4478,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4470,
											"end": 4482,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4432,
											"end": 4484,
											"name": "tag",
											"source": 18,
											"value": "312"
										},
										{
											"begin": 4432,
											"end": 4484,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4503,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "313"
										},
										{
											"begin": 4522,
											"end": 4531,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4503,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 4503,
											"end": 4532,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4503,
											"end": 4532,
											"name": "tag",
											"source": 18,
											"value": "313"
										},
										{
											"begin": 4503,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4493,
											"end": 4532,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4493,
											"end": 4532,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4551,
											"end": 4589,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "314"
										},
										{
											"begin": 4585,
											"end": 4587,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4574,
											"end": 4583,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4570,
											"end": 4588,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4551,
											"end": 4589,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 4551,
											"end": 4589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4551,
											"end": 4589,
											"name": "tag",
											"source": 18,
											"value": "314"
										},
										{
											"begin": 4551,
											"end": 4589,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4541,
											"end": 4589,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4541,
											"end": 4589,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4335,
											"end": 4595,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4600,
											"end": 4980,
											"name": "tag",
											"source": 18,
											"value": "86"
										},
										{
											"begin": 4600,
											"end": 4980,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4679,
											"end": 4680,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 4675,
											"end": 4687,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4675,
											"end": 4687,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4675,
											"end": 4687,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 4675,
											"end": 4687,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4722,
											"end": 4734,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4722,
											"end": 4734,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4722,
											"end": 4734,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4743,
											"end": 4804,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "316"
										},
										{
											"begin": 4743,
											"end": 4804,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4797,
											"end": 4801,
											"name": "PUSH",
											"source": 18,
											"value": "7F"
										},
										{
											"begin": 4789,
											"end": 4795,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4785,
											"end": 4802,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4775,
											"end": 4802,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4775,
											"end": 4802,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4743,
											"end": 4804,
											"name": "tag",
											"source": 18,
											"value": "316"
										},
										{
											"begin": 4743,
											"end": 4804,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4850,
											"end": 4852,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4848,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4839,
											"end": 4853,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 4819,
											"end": 4837,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4816,
											"end": 4854,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4974,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "317"
										},
										{
											"begin": 4813,
											"end": 4974,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4896,
											"end": 4906,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 4891,
											"end": 4894,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4884,
											"end": 4885,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4877,
											"end": 4908,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4931,
											"end": 4935,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 4928,
											"end": 4929,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 4921,
											"end": 4936,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4959,
											"end": 4963,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 4956,
											"end": 4957,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4949,
											"end": 4964,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4974,
											"name": "tag",
											"source": 18,
											"value": "317"
										},
										{
											"begin": 4813,
											"end": 4974,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4813,
											"end": 4974,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4600,
											"end": 4980,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4600,
											"end": 4980,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4600,
											"end": 4980,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4600,
											"end": 4980,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7385,
											"end": 7607,
											"name": "tag",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 7385,
											"end": 7607,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 7450,
											"end": 7459,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 7450,
											"end": 7459,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7450,
											"end": 7459,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 7471,
											"end": 7481,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 7471,
											"end": 7481,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 7471,
											"end": 7481,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 7468,
											"end": 7601,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 7468,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "91"
										},
										{
											"begin": 7468,
											"end": 7601,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 7523,
											"end": 7533,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 7518,
											"end": 7521,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 7514,
											"end": 7534,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 7511,
											"end": 7512,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7558,
											"end": 7562,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 7555,
											"end": 7556,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 7548,
											"end": 7563,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 7586,
											"end": 7590,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 7583,
											"end": 7584,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 7576,
											"end": 7591,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 8509,
											"end": 8636,
											"name": "tag",
											"source": 18,
											"value": "243"
										},
										{
											"begin": 8509,
											"end": 8636,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 8570,
											"end": 8580,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 8565,
											"end": 8568,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 8561,
											"end": 8581,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 8558,
											"end": 8559,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 8551,
											"end": 8582,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8601,
											"end": 8605,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 8598,
											"end": 8599,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 8591,
											"end": 8606,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 8625,
											"end": 8629,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 8622,
											"end": 8623,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 8615,
											"end": 8630,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"app/back-end/contract/src/erc20-usdt.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"Aware(address,address,uint256)": "b7881eb0",
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"setMarket(address)": "6dcea85f",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Aware\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Market\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"app/back-end/contract/src/erc20-usdt.sol\":\"wUSDT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x28b2a1f629338ad9bfe7bdab27a478f3d04001bbde67aefb48f473e01589a05a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b13fe921b3a4db8194370374451c3243045d4852e6e27c00fe161acc3eff59ee\",\"dweb:/ipfs/QmfNmkXJsDj9x2et6BTibrbonVGhcP8bRDkRTiXuqhevvR\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x198433113545cc855ffb34ec844854dd59e1b8420a97a876ce67eae3b3929c50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d26179570c319b970030e366c034a27921c6de0e78bbe32ea34a1b30c08d24af\",\"dweb:/ipfs/QmTKRYXntXit6U2gwMhwKojhwpfhXkzWSLS1cy6DVEi6F9\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x1c15854d415493331ff06ef9b0899f81dc6960189fa86cfd1b29c4374cc336a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb41bc9b9e1f5617d8e826c07fb21ecf986f70b4b5b395d6ecf9c5eb9f1a204\",\"dweb:/ipfs/QmNvJhvpJE8b3nyz7RaMCSPhfbmzj1TLuL3a7NkS9AHkGJ\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x3b4a7848523d3c3bf86fbb898f8f0a7f785bfe52c3400af1a08b99fc4c725da3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d075fc42b2a76046ec3f473fa1be4e40e002fc71b5591a849058ce9ba1578d4\",\"dweb:/ipfs/QmV1yZTLoRhyUjupvfUyVqi7N9fhKiRNTGwnfvNQ2vq1dk\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8edf51e08ea403df2542380d8fba4a3fc63aa07c571ee75cf55e18d1e353645b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5878fafb7c542c7b0d3f9d34447177b54a7ffa5a388a23c4da78116655b7fba6\",\"dweb:/ipfs/Qmb8VVEhtoUAEGsDRKmo9ER23eQfAEynDxvEDTeVWfG1Wm\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x36560926db8fa096a799a54143e48ff23002e115d4a8380e31def8f8aab0efd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c289d6f0ededdbf5cf5f885adf2d41b76d6fe602946273cab10830f64906af9f\",\"dweb:/ipfs/Qmd81LQLGNmfs3rxwGLHUSJ2d3w5Z4aooxtRkCe7XDDEc8\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83fa9b15077fd2f33f6c175d694e2f7ae9c9a289c7feaca40aa7d6feb8d87c26\",\"dweb:/ipfs/QmQLfKCJ7mjiEeCGN1sHgWT8wjAMbAmBqcBVoQQyUZa5ws\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0xb2ac469a92e3980b87267eacabd4e470df6cf278858efa230f69c723316c138d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ce61d28f35bf80f21d884b285b4061c938e400a0d90d7a8176e2cacf29b5eaf\",\"dweb:/ipfs/Qmar9FHYkwMVvQYtDoeJFETryVwBPTPs1dxhvKG1AMah1c\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xee8d332ccb6fde868e14d766aeff6e1c139b23942e456867f8541740d53608ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108e2f859cce1ce6f28615199cf951e87022c78fd161a55da353e51615930564\",\"dweb:/ipfs/QmWvGG7mue3WNYrham6cNRhBNY3bEzdFutMEkLBEDNougg\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xaf4f1cc7a79833f62322e257c405bcc1f5d76bd0d9eba10ab17d890ce2e4ec4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8c7891489c7dc56f84a8b8d9b5507b893bf45de931be6a501be22dfade66aff\",\"dweb:/ipfs/QmYwu2yuP3GrcvT9eM1gd8M65RpUsRaRoyLsWcVLDbeQcG\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x2d8207531ade88bd3e1c0dc264c1c8c1a46a62d3f79d6b0ddad7743d886f2eef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf6c34e642d31633434efc3381aeab02876928da15386459d9158e070ed5b27a\",\"dweb:/ipfs/QmQp6H9WZ93V5byxvYQbcFjRtiHTj8RbqadMWmivMLx5B8\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x969cdd93cf4321ba534d61127d7127da83bb807be4b3b84f029b0aa1e41b5851\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57b66f3ca0fc32ad41d02463de1566f2c4fe007a03ea50d3ebbfe3c58d76eff3\",\"dweb:/ipfs/QmTRCri2AtWnhm1Dj4uzuE7Jr1utpP82oRuwq3sxRRtfaW\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x481eac0573c56cb92c225e3d7c3a8509db8ce6f907a2af44fdfef486740bb3eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d341e11ae851c1356a3c1570fac620c19c6b4e1269f7eaee9a1f1583c1c83891\",\"dweb:/ipfs/QmaRVN9TFLpVvVJfjwiLx9fttDhr5C83NoJmyXgriKXS4T\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]},\"app/back-end/contract/src/erc20-usdt.sol\":{\"keccak256\":\"0xbd30e7db7b69a66d88c17221fffa2145f0af9b28d7c52abfef690a6cf57425ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f18afa1e9a8fa4569d700811c863ce238cb170f48310e23c1237a4d000fa32a\",\"dweb:/ipfs/QmYWJ7ZRbHPtLJvsBxC5uR5tfqntppTN19yae1T7i3B3eC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 184,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 190,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 192,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 194,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 196,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2035,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2037,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1014,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 3468,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "Market",
								"offset": 0,
								"slot": "8",
								"type": "t_address"
							},
							{
								"astId": 3470,
								"contract": "app/back-end/contract/src/erc20-usdt.sol:wUSDT",
								"label": "admin",
								"offset": 0,
								"slot": "9",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							24
						]
					},
					"id": 25,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "110:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "IERC5267",
							"nameLocation": "148:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "164:86:0",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 4,
									"name": "EIP712DomainChanged",
									"nameLocation": "262:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:0"
									},
									"src": "256:28:0"
								},
								{
									"documentation": {
										"id": 5,
										"nodeType": "StructuredDocumentation",
										"src": "292:143:0",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 23,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "450:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "462:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "536:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "529:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 7,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "529:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "571:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "557:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 9,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "557:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "604:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "590:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 11,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "590:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "634:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "626:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "664:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "656:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "704:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "696:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 17,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "696:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "740:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "723:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 19,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "723:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 20,
													"nodeType": "ArrayTypeName",
													"src": "723:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "514:247:0"
									},
									"scope": 24,
									"src": "441:321:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 25,
							"src": "138:627:0",
							"usedErrors": [],
							"usedEvents": [
								4
							]
						}
					],
					"src": "110:657:0"
				},
				"id": 0
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							161
						],
						"IERC20Errors": [
							66
						],
						"IERC721Errors": [
							114
						]
					},
					"id": 162,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 26,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "114:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 27,
								"nodeType": "StructuredDocumentation",
								"src": "142:142:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 66,
							"linearizedBaseContracts": [
								66
							],
							"name": "IERC20Errors",
							"nameLocation": "296:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "316:314:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 36,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "642:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "675:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "667:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "691:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "683:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "708:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "700:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 33,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "700:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:49:1"
									},
									"src": "636:80:1"
								},
								{
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "724:155:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 41,
									"name": "ERC20InvalidSender",
									"nameLocation": "891:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "918:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "910:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "909:16:1"
									},
									"src": "885:41:1"
								},
								{
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "934:162:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 46,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1108:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1137:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1129:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1128:18:1"
									},
									"src": "1102:45:1"
								},
								{
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1155:350:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 55,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1517:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1552:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "1544:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1544:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1569:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "1561:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1561:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1588:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "1580:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1580:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1543:52:1"
									},
									"src": "1511:85:1"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "1604:177:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 60,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1793:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1822:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1814:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1814:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1813:18:1"
									},
									"src": "1787:45:1"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1840:198:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 65,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2050:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2078:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2070:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2070:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2069:17:1"
									},
									"src": "2044:43:1"
								}
							],
							"scope": 162,
							"src": "286:1804:1",
							"usedErrors": [
								36,
								41,
								46,
								55,
								60,
								65
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 67,
								"nodeType": "StructuredDocumentation",
								"src": "2094:144:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 114,
							"linearizedBaseContracts": [
								114
							],
							"name": "IERC721Errors",
							"nameLocation": "2250:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "2271:223:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 72,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2506:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2533:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "2525:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2525:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:15:1"
									},
									"src": "2500:40:1"
								},
								{
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "2548:135:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 77,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2695:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2726:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "2718:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 74,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:17:1"
									},
									"src": "2689:46:1"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "2743:294:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 86,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "3049:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3078:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3070:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3094:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3086:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3086:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3111:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3103:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 83,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:48:1"
									},
									"src": "3043:75:1"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "3126:155:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 91,
									"name": "ERC721InvalidSender",
									"nameLocation": "3293:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3321:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "3313:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3313:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3312:16:1"
									},
									"src": "3287:42:1"
								},
								{
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "3337:162:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 96,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3511:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3541:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "3533:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3533:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3532:18:1"
									},
									"src": "3505:46:1"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "3559:251:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 103,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3822:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "3849:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3875:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "3867:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3867:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:35:1"
									},
									"src": "3816:68:1"
								},
								{
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "3892:177:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 108,
									"name": "ERC721InvalidApprover",
									"nameLocation": "4081:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4111:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "4103:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4102:18:1"
									},
									"src": "4075:46:1"
								},
								{
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "4129:200:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 113,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4341:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4371:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "4363:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4363:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4362:18:1"
									},
									"src": "4335:46:1"
								}
							],
							"scope": 162,
							"src": "2240:2144:1",
							"usedErrors": [
								72,
								77,
								86,
								91,
								96,
								103,
								108,
								113
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "4388:146:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 161,
							"linearizedBaseContracts": [
								161
							],
							"name": "IERC1155Errors",
							"nameLocation": "4546:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "4568:367:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 126,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4947:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4982:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "4974:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4974:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4998:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "4990:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4990:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "5015:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "5007:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5007:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "5023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5023:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4973:66:1"
									},
									"src": "4941:99:1"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "5048:155:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 131,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5215:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5244:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "5236:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5236:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5235:16:1"
									},
									"src": "5209:43:1"
								},
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "5260:162:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 136,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5434:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5465:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 136,
												"src": "5457:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5457:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5456:18:1"
									},
									"src": "5428:47:1"
								},
								{
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "5483:260:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 143,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5755:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5792:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "5784:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5784:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5810:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "5802:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5802:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5783:33:1"
									},
									"src": "5749:68:1"
								},
								{
									"documentation": {
										"id": 144,
										"nodeType": "StructuredDocumentation",
										"src": "5825:177:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 148,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "6014:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "6045:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "6037:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6037:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6036:18:1"
									},
									"src": "6008:47:1"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "6063:200:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 153,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6275:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6306:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "6298:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6298:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6297:18:1"
									},
									"src": "6269:47:1"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "6324:285:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 160,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6621:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6655:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "6647:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6647:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6674:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "6666:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6646:41:1"
									},
									"src": "6615:73:1"
								}
							],
							"scope": 162,
							"src": "4536:2155:1",
							"usedErrors": [
								126,
								131,
								136,
								143,
								148,
								153,
								160
							],
							"usedEvents": []
						}
					],
					"src": "114:6579:1"
				},
				"id": 1
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1000
						],
						"ERC20": [
							676
						],
						"IERC20": [
							754
						],
						"IERC20Errors": [
							66
						],
						"IERC20Metadata": [
							934
						]
					},
					"id": 677,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 163,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:2"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 165,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 677,
							"sourceUnit": 755,
							"src": "136:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 164,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 754,
										"src": "144:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 167,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 677,
							"sourceUnit": 935,
							"src": "174:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 166,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 934,
										"src": "182:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 169,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 677,
							"sourceUnit": 1001,
							"src": "239:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 168,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1000,
										"src": "247:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 677,
							"sourceUnit": 162,
							"src": "289:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 170,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 66,
										"src": "297:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 173,
										"name": "Context",
										"nameLocations": [
											"1461:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1000,
										"src": "1461:7:2"
									},
									"id": 174,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:7:2"
								},
								{
									"baseName": {
										"id": 175,
										"name": "IERC20",
										"nameLocations": [
											"1470:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 754,
										"src": "1470:6:2"
									},
									"id": 176,
									"nodeType": "InheritanceSpecifier",
									"src": "1470:6:2"
								},
								{
									"baseName": {
										"id": 177,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1478:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 934,
										"src": "1478:14:2"
									},
									"id": 178,
									"nodeType": "InheritanceSpecifier",
									"src": "1478:14:2"
								},
								{
									"baseName": {
										"id": 179,
										"name": "IERC20Errors",
										"nameLocations": [
											"1494:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 66,
										"src": "1494:12:2"
									},
									"id": 180,
									"nodeType": "InheritanceSpecifier",
									"src": "1494:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "358:1074:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 676,
							"linearizedBaseContracts": [
								676,
								66,
								934,
								754,
								1000
							],
							"name": "ERC20",
							"nameLocation": "1452:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 184,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1558:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 676,
									"src": "1514:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 183,
										"keyName": "account",
										"keyNameLocation": "1530:7:2",
										"keyType": {
											"id": 181,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1522:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1514:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 182,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1541:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 190,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1648:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 676,
									"src": "1576:83:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 189,
										"keyName": "account",
										"keyNameLocation": "1592:7:2",
										"keyType": {
											"id": 185,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1584:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1576:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 188,
											"keyName": "spender",
											"keyNameLocation": "1619:7:2",
											"keyType": {
												"id": 186,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1611:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1603:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 187,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1630:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 192,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1684:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 676,
									"src": "1668:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 191,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1668:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 194,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1720:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 676,
									"src": "1705:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 193,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1705:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 196,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1747:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 676,
									"src": "1732:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 195,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1732:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "2001:60:2",
										"statements": [
											{
												"expression": {
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 204,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2012:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 205,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "2020:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2012:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 207,
												"nodeType": "ExpressionStatement",
												"src": "2012:13:2"
											},
											{
												"expression": {
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 208,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "2036:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 209,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 201,
														"src": "2046:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2036:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "2036:17:2"
											}
										]
									},
									"documentation": {
										"id": 197,
										"nodeType": "StructuredDocumentation",
										"src": "1763:176:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 213,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1971:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1957:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 198,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1957:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1992:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "1978:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 200,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1978:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1956:44:2"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2001:0:2"
									},
									"scope": 676,
									"src": "1945:116:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										921
									],
									"body": {
										"id": 221,
										"nodeType": "Block",
										"src": "2191:31:2",
										"statements": [
											{
												"expression": {
													"id": 219,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 194,
													"src": "2209:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 218,
												"id": 220,
												"nodeType": "Return",
												"src": "2202:12:2"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "2069:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2140:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2144:2:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "2176:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2176:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2175:15:2"
									},
									"scope": 676,
									"src": "2131:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										927
									],
									"body": {
										"id": 230,
										"nodeType": "Block",
										"src": "2403:33:2",
										"statements": [
											{
												"expression": {
													"id": 228,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 196,
													"src": "2421:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 227,
												"id": 229,
												"nodeType": "Return",
												"src": "2414:14:2"
											}
										]
									},
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "2230:105:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2350:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2356:2:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2388:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 225,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2388:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2387:15:2"
									},
									"scope": 676,
									"src": "2341:95:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										933
									],
									"body": {
										"id": 239,
										"nodeType": "Block",
										"src": "3140:28:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 237,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3158:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 236,
												"id": 238,
												"nodeType": "Return",
												"src": "3151:9:2"
											}
										]
									},
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "2444:634:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3093:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3101:2:2"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "3133:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 234,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3133:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3132:7:2"
									},
									"scope": 676,
									"src": "3084:84:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										703
									],
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "3294:38:2",
										"statements": [
											{
												"expression": {
													"id": 246,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 192,
													"src": "3312:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 245,
												"id": 247,
												"nodeType": "Return",
												"src": "3305:19:2"
											}
										]
									},
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "3176:51:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 249,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3242:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3253:2:2"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3285:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3285:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3284:9:2"
									},
									"scope": 676,
									"src": "3233:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										711
									],
									"body": {
										"id": 261,
										"nodeType": "Block",
										"src": "3469:44:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 257,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "3487:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 259,
													"indexExpression": {
														"id": 258,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "3497:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3487:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 256,
												"id": 260,
												"nodeType": "Return",
												"src": "3480:25:2"
											}
										]
									},
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "3340:49:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 262,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3404:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3422:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "3414:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3414:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3413:17:2"
									},
									"returnParameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "3460:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3460:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3459:9:2"
									},
									"scope": 676,
									"src": "3395:118:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										721
									],
									"body": {
										"id": 285,
										"nodeType": "Block",
										"src": "3793:107:2",
										"statements": [
											{
												"assignments": [
													273
												],
												"declarations": [
													{
														"constant": false,
														"id": 273,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3812:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 285,
														"src": "3804:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 272,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3804:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 276,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 274,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "3820:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3820:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3804:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 278,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 273,
															"src": "3853:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 279,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 265,
															"src": "3860:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 280,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 267,
															"src": "3864:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 277,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "3843:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3843:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "3843:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 283,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3888:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 271,
												"id": 284,
												"nodeType": "Return",
												"src": "3881:11:2"
											}
										]
									},
									"documentation": {
										"id": 263,
										"nodeType": "StructuredDocumentation",
										"src": "3521:191:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3727:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3744:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "3736:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3756:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "3748:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3748:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3735:27:2"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "3787:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 269,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3787:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:6:2"
									},
									"scope": 676,
									"src": "3718:182:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										731
									],
									"body": {
										"id": 302,
										"nodeType": "Block",
										"src": "4052:53:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 296,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 190,
															"src": "4070:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 298,
														"indexExpression": {
															"id": 297,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "4082:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4070:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 300,
													"indexExpression": {
														"id": 299,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 291,
														"src": "4089:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4070:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 295,
												"id": 301,
												"nodeType": "Return",
												"src": "4063:34:2"
											}
										]
									},
									"documentation": {
										"id": 287,
										"nodeType": "StructuredDocumentation",
										"src": "3908:49:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3972:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3990:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3982:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3982:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4005:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3997:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3997:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3981:32:2"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "4043:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4043:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4042:9:2"
									},
									"scope": 676,
									"src": "3963:142:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										741
									],
									"body": {
										"id": 326,
										"nodeType": "Block",
										"src": "4503:111:2",
										"statements": [
											{
												"assignments": [
													314
												],
												"declarations": [
													{
														"constant": false,
														"id": 314,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4522:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 326,
														"src": "4514:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 313,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4514:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 317,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 315,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "4530:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4530:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4514:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 319,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "4562:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 320,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "4569:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 308,
															"src": "4578:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 318,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															567,
															627
														],
														"referencedDeclaration": 567,
														"src": "4553:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4553:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "4553:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4602:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 312,
												"id": 325,
												"nodeType": "Return",
												"src": "4595:11:2"
											}
										]
									},
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "4113:305:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4433:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4449:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4441:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4441:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4466:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4458:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4458:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4440:32:2"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "4497:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 310,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4497:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4496:6:2"
									},
									"scope": 676,
									"src": "4424:190:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										753
									],
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "5285:156:2",
										"statements": [
											{
												"assignments": [
													340
												],
												"declarations": [
													{
														"constant": false,
														"id": 340,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5304:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "5296:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 339,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5296:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 343,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 341,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "5314:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5314:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5296:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 345,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "5353:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 346,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "5359:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 347,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "5368:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 344,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 675,
														"src": "5337:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5337:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 349,
												"nodeType": "ExpressionStatement",
												"src": "5337:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 351,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "5395:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 352,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 332,
															"src": "5401:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 353,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "5405:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 350,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "5385:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5385:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "5385:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5429:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 338,
												"id": 357,
												"nodeType": "Return",
												"src": "5422:11:2"
											}
										]
									},
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "4622:564:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5201:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5222:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "5214:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5214:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5236:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "5228:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5228:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5248:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "5240:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:41:2"
									},
									"returnParameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "5279:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 336,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5279:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5278:6:2"
									},
									"scope": 676,
									"src": "5192:249:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 405,
										"nodeType": "Block",
										"src": "5895:239:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 369,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 362,
														"src": "5910:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5926:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 371,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5918:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 370,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5918:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 373,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5918:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5910:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 383,
												"nodeType": "IfStatement",
												"src": "5906:88:2",
												"trueBody": {
													"id": 382,
													"nodeType": "Block",
													"src": "5930:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 378,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5979:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 377,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5971:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 376,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5971:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5971:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 375,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 41,
																	"src": "5952:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5952:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 381,
															"nodeType": "RevertStatement",
															"src": "5945:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 384,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 364,
														"src": "6008:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 387,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6022:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6014:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 385,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6014:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 388,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6014:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6008:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 398,
												"nodeType": "IfStatement",
												"src": "6004:88:2",
												"trueBody": {
													"id": 397,
													"nodeType": "Block",
													"src": "6026:66:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 393,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6077:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6069:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 391,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6069:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 394,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6069:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 390,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 46,
																	"src": "6048:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6048:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 396,
															"nodeType": "RevertStatement",
															"src": "6041:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 400,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "6110:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 401,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "6116:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 402,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "6120:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 399,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 483,
														"src": "6102:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6102:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 404,
												"nodeType": "ExpressionStatement",
												"src": "6102:24:2"
											}
										]
									},
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "5449:371:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5835:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5853:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5845:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5845:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5867:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5859:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5859:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5879:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "5871:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5871:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5844:41:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5895:0:2"
									},
									"scope": 676,
									"src": "5826:308:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 482,
										"nodeType": "Block",
										"src": "6533:1060:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 416,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "6548:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6564:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6556:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 417,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6556:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 420,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6556:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6548:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 453,
													"nodeType": "Block",
													"src": "6725:371:2",
													"statements": [
														{
															"assignments": [
																428
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 428,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6748:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 453,
																	"src": "6740:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 427,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6740:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 432,
															"initialValue": {
																"baseExpression": {
																	"id": 429,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 184,
																	"src": "6762:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 431,
																"indexExpression": {
																	"id": 430,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "6772:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6762:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6740:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 435,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 433,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 428,
																	"src": "6796:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 434,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 413,
																	"src": "6810:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6796:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 443,
															"nodeType": "IfStatement",
															"src": "6792:117:2",
															"trueBody": {
																"id": 442,
																"nodeType": "Block",
																"src": "6817:92:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 437,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 409,
																					"src": "6868:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 438,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 428,
																					"src": "6874:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 439,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 413,
																					"src": "6887:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 436,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 36,
																				"src": "6843:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 440,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6843:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 441,
																		"nodeType": "RevertStatement",
																		"src": "6836:57:2"
																	}
																]
															}
														},
														{
															"id": 452,
															"nodeType": "UncheckedBlock",
															"src": "6923:162:2",
															"statements": [
																{
																	"expression": {
																		"id": 450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 444,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "7032:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 446,
																			"indexExpression": {
																				"id": 445,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 409,
																				"src": "7042:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7032:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 449,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 447,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 428,
																				"src": "7050:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 448,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 413,
																				"src": "7064:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7050:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7032:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 451,
																	"nodeType": "ExpressionStatement",
																	"src": "7032:37:2"
																}
															]
														}
													]
												},
												"id": 454,
												"nodeType": "IfStatement",
												"src": "6544:552:2",
												"trueBody": {
													"id": 426,
													"nodeType": "Block",
													"src": "6568:151:2",
													"statements": [
														{
															"expression": {
																"id": 424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 422,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 192,
																	"src": "6686:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 423,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 413,
																	"src": "6702:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6686:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 425,
															"nodeType": "ExpressionStatement",
															"src": "6686:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 455,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 411,
														"src": "7112:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7126:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7118:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 456,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7118:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7118:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7112:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 474,
													"nodeType": "Block",
													"src": "7332:211:2",
													"statements": [
														{
															"id": 473,
															"nodeType": "UncheckedBlock",
															"src": "7347:185:2",
															"statements": [
																{
																	"expression": {
																		"id": 471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 467,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "7494:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 469,
																			"indexExpression": {
																				"id": 468,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 411,
																				"src": "7504:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7494:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 470,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 413,
																			"src": "7511:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7494:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 472,
																	"nodeType": "ExpressionStatement",
																	"src": "7494:22:2"
																}
															]
														}
													]
												},
												"id": 475,
												"nodeType": "IfStatement",
												"src": "7108:435:2",
												"trueBody": {
													"id": 466,
													"nodeType": "Block",
													"src": "7130:196:2",
													"statements": [
														{
															"id": 465,
															"nodeType": "UncheckedBlock",
															"src": "7145:170:2",
															"statements": [
																{
																	"expression": {
																		"id": 463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 461,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 192,
																			"src": "7278:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 462,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 413,
																			"src": "7294:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7278:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 464,
																	"nodeType": "ExpressionStatement",
																	"src": "7278:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 477,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "7569:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 478,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "7575:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 479,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "7579:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 476,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "7560:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7560:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 481,
												"nodeType": "EmitStatement",
												"src": "7555:30:2"
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "6142:310:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6467:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6483:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "6475:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6475:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6497:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "6489:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6489:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6509:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "6501:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6501:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6474:41:2"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6533:0:2"
									},
									"scope": 676,
									"src": "6458:1135:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "8002:157:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 491,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 486,
														"src": "8017:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 494,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8036:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 493,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8028:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 492,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8028:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8028:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8017:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 505,
												"nodeType": "IfStatement",
												"src": "8013:93:2",
												"trueBody": {
													"id": 504,
													"nodeType": "Block",
													"src": "8040:66:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 500,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8091:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 499,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8083:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 498,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8083:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 501,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8083:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 497,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 46,
																	"src": "8062:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8062:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 503,
															"nodeType": "RevertStatement",
															"src": "8055:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 509,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8132:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8124:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 507,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8124:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8124:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 511,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "8136:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 512,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "8145:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 506,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 483,
														"src": "8116:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8116:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 514,
												"nodeType": "ExpressionStatement",
												"src": "8116:35:2"
											}
										]
									},
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "7601:339:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7955:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7969:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "7961:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7961:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7986:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "7978:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7978:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7960:32:2"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8002:0:2"
									},
									"scope": 676,
									"src": "7946:213:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "8543:155:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 524,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "8558:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 527,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8577:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8569:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 525,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8569:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 528,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8569:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8558:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 538,
												"nodeType": "IfStatement",
												"src": "8554:91:2",
												"trueBody": {
													"id": 537,
													"nodeType": "Block",
													"src": "8581:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 533,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8630:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 532,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8622:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 531,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8622:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8622:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 530,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 41,
																	"src": "8603:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8603:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 536,
															"nodeType": "RevertStatement",
															"src": "8596:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 540,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "8663:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8680:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8672:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 541,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8672:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 544,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8672:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 545,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "8684:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 539,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 483,
														"src": "8655:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8655:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 547,
												"nodeType": "ExpressionStatement",
												"src": "8655:35:2"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "8167:314:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8496:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8510:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "8502:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8502:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "8519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8501:32:2"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8543:0:2"
									},
									"scope": 676,
									"src": "8487:211:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "9325:56:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 560,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "9345:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 561,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "9352:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 562,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "9361:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9368:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 559,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															567,
															627
														],
														"referencedDeclaration": 627,
														"src": "9336:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9336:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "9336:37:2"
											}
										]
									},
									"documentation": {
										"id": 550,
										"nodeType": "StructuredDocumentation",
										"src": "8706:539:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9260:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9277:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "9269:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9269:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9292:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "9284:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9284:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9309:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "9301:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9301:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9268:47:2"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9325:0:2"
									},
									"scope": 676,
									"src": "9251:130:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 626,
										"nodeType": "Block",
										"src": "10330:345:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 579,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 570,
														"src": "10345:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10362:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 581,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10354:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 580,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10354:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 583,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10354:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10345:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 593,
												"nodeType": "IfStatement",
												"src": "10341:91:2",
												"trueBody": {
													"id": 592,
													"nodeType": "Block",
													"src": "10366:66:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 588,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10417:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 587,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10409:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 586,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10409:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10409:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 585,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 60,
																	"src": "10388:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10388:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 591,
															"nodeType": "RevertStatement",
															"src": "10381:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 594,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 572,
														"src": "10446:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10465:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10457:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 595,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10457:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 598,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10457:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10446:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 608,
												"nodeType": "IfStatement",
												"src": "10442:92:2",
												"trueBody": {
													"id": 607,
													"nodeType": "Block",
													"src": "10469:65:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 603,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10519:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10511:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 601,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10511:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10511:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 600,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "10491:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10491:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 606,
															"nodeType": "RevertStatement",
															"src": "10484:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 609,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "10544:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 612,
															"indexExpression": {
																"id": 610,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 570,
																"src": "10556:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10544:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 613,
														"indexExpression": {
															"id": 611,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "10563:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10544:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 614,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "10574:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10544:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "10544:35:2"
											},
											{
												"condition": {
													"id": 617,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 576,
													"src": "10594:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 625,
												"nodeType": "IfStatement",
												"src": "10590:78:2",
												"trueBody": {
													"id": 624,
													"nodeType": "Block",
													"src": "10605:63:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 619,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 570,
																		"src": "10634:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 620,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 572,
																		"src": "10641:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 621,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 574,
																		"src": "10650:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 618,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 697,
																	"src": "10625:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10625:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 623,
															"nodeType": "EmitStatement",
															"src": "10620:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "9389:837:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 627,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10241:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10258:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "10250:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10250:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10273:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "10265:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 571,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10265:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10290:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "10282:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10282:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10302:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 627,
												"src": "10297:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 575,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10297:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10249:63:2"
									},
									"returnParameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10330:0:2"
									},
									"scope": 676,
									"src": "10232:443:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "11056:398:2",
										"statements": [
											{
												"assignments": [
													638
												],
												"declarations": [
													{
														"constant": false,
														"id": 638,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11075:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 674,
														"src": "11067:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 637,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11067:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 643,
												"initialValue": {
													"arguments": [
														{
															"id": 640,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 630,
															"src": "11104:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 641,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "11111:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 639,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 303,
														"src": "11094:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11094:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11067:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 644,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 638,
														"src": "11134:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11159:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11159:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 645,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11154:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11154:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 649,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11168:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11154:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11134:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 673,
												"nodeType": "IfStatement",
												"src": "11130:317:2",
												"trueBody": {
													"id": 672,
													"nodeType": "Block",
													"src": "11173:274:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 653,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 651,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 638,
																	"src": "11192:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 652,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "11211:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11192:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 661,
															"nodeType": "IfStatement",
															"src": "11188:132:2",
															"trueBody": {
																"id": 660,
																"nodeType": "Block",
																"src": "11218:102:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 655,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 632,
																					"src": "11271:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 656,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 638,
																					"src": "11280:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 657,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 634,
																					"src": "11298:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 654,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 55,
																				"src": "11244:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 658,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11244:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 659,
																		"nodeType": "RevertStatement",
																		"src": "11237:67:2"
																	}
																]
															}
														},
														{
															"id": 671,
															"nodeType": "UncheckedBlock",
															"src": "11334:102:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 663,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 630,
																				"src": "11372:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 664,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 632,
																				"src": "11379:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 667,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 665,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 638,
																					"src": "11388:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 666,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 634,
																					"src": "11407:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11388:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 668,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11414:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 662,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				567,
																				627
																			],
																			"referencedDeclaration": 627,
																			"src": "11363:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11363:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 670,
																	"nodeType": "ExpressionStatement",
																	"src": "11363:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 628,
										"nodeType": "StructuredDocumentation",
										"src": "10683:278:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 675,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10976:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11000:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "10992:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10992:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11015:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "11007:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11007:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11032:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 675,
												"src": "11024:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11024:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10991:47:2"
									},
									"returnParameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11056:0:2"
									},
									"scope": 676,
									"src": "10967:487:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 677,
							"src": "1434:10023:2",
							"usedErrors": [
								36,
								41,
								46,
								55,
								60,
								65
							],
							"usedEvents": [
								688,
								697
							]
						}
					],
					"src": "108:11351:2"
				},
				"id": 2
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							754
						]
					},
					"id": 755,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 678,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 679,
								"nodeType": "StructuredDocumentation",
								"src": "137:72:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 754,
							"linearizedBaseContracts": [
								754
							],
							"name": "IERC20",
							"nameLocation": "221:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "235:163:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 688,
									"name": "Transfer",
									"nameLocation": "410:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "435:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "419:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "419:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "457:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "441:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "441:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "469:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "461:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "461:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "418:57:3"
									},
									"src": "404:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 689,
										"nodeType": "StructuredDocumentation",
										"src": "484:151:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 697,
									"name": "Approval",
									"nameLocation": "647:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "672:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "656:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 690,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 693,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "695:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "679:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "679:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "712:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "704:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "655:63:3"
									},
									"src": "641:78:3"
								},
								{
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "727:67:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 703,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "809:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "820:2:3"
									},
									"returnParameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "846:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:3"
									},
									"scope": 754,
									"src": "800:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 704,
										"nodeType": "StructuredDocumentation",
										"src": "863:73:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 711,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "951:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "969:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "961:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 705,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "961:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "960:17:3"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "1001:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1001:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1000:9:3"
									},
									"scope": 754,
									"src": "942:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "1018:219:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 721,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1252:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1269:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "1261:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1281:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "1273:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1273:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:27:3"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 721,
												"src": "1306:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 718,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1306:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1305:6:3"
									},
									"scope": 754,
									"src": "1243:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 722,
										"nodeType": "StructuredDocumentation",
										"src": "1320:270:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 731,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1605:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1623:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "1615:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1615:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1638:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "1630:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1614:32:3"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "1670:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1670:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1669:9:3"
									},
									"scope": 754,
									"src": "1596:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 732,
										"nodeType": "StructuredDocumentation",
										"src": "1687:681:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 741,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2383:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2399:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2391:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2391:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2416:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2408:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2408:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:32:3"
									},
									"returnParameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "2441:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 738,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2441:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2440:6:3"
									},
									"scope": 754,
									"src": "2374:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "2455:305:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2775:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2796:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "2788:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 743,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2810:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "2802:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2822:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "2814:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2814:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2787:41:3"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "2847:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 750,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2847:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2846:6:3"
									},
									"scope": 754,
									"src": "2766:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 755,
							"src": "211:2645:3",
							"usedErrors": [],
							"usedEvents": [
								688,
								697
							]
						}
					],
					"src": "109:2749:3"
				},
				"id": 3
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							1998
						],
						"EIP712": [
							2225
						],
						"ERC20": [
							676
						],
						"ERC20Permit": [
							908
						],
						"IERC20Permit": [
							970
						],
						"Nonces": [
							1068
						]
					},
					"id": 909,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 756,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:4"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 758,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 909,
							"sourceUnit": 971,
							"src": "153:48:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 757,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 970,
										"src": "161:12:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 760,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 909,
							"sourceUnit": 677,
							"src": "203:35:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 759,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 676,
										"src": "211:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 762,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 909,
							"sourceUnit": 1999,
							"src": "240:60:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 761,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1998,
										"src": "248:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 764,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 909,
							"sourceUnit": 2226,
							"src": "302:62:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 763,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2225,
										"src": "310:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 909,
							"sourceUnit": 1069,
							"src": "366:49:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 765,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1068,
										"src": "374:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 768,
										"name": "ERC20",
										"nameLocations": [
											"948:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 676,
										"src": "948:5:4"
									},
									"id": 769,
									"nodeType": "InheritanceSpecifier",
									"src": "948:5:4"
								},
								{
									"baseName": {
										"id": 770,
										"name": "IERC20Permit",
										"nameLocations": [
											"955:12:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 970,
										"src": "955:12:4"
									},
									"id": 771,
									"nodeType": "InheritanceSpecifier",
									"src": "955:12:4"
								},
								{
									"baseName": {
										"id": 772,
										"name": "EIP712",
										"nameLocations": [
											"969:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2225,
										"src": "969:6:4"
									},
									"id": 773,
									"nodeType": "InheritanceSpecifier",
									"src": "969:6:4"
								},
								{
									"baseName": {
										"id": 774,
										"name": "Nonces",
										"nameLocations": [
											"977:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1068,
										"src": "977:6:4"
									},
									"id": 775,
									"nodeType": "InheritanceSpecifier",
									"src": "977:6:4"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 767,
								"nodeType": "StructuredDocumentation",
								"src": "419:494:4",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 908,
							"linearizedBaseContracts": [
								908,
								1068,
								2225,
								24,
								970,
								676,
								66,
								934,
								754,
								1000
							],
							"name": "ERC20Permit",
							"nameLocation": "933:11:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 780,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "1016:15:4",
									"nodeType": "VariableDeclaration",
									"scope": 908,
									"src": "991:147:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 776,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "991:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 778,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1053:84:4",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 777,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1043:9:4",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 779,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1043:95:4",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "1147:54:4",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 785,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1213:23:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1245:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "1237:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:18:4"
									},
									"src": "1207:48:4"
								},
								{
									"documentation": {
										"id": 786,
										"nodeType": "StructuredDocumentation",
										"src": "1263:47:4",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 792,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1322:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1351:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "1343:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 787,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1343:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1367:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "1359:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1359:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1342:31:4"
									},
									"src": "1316:58:4"
								},
								{
									"body": {
										"id": 802,
										"nodeType": "Block",
										"src": "1662:2:4",
										"statements": []
									},
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "1382:224:4",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 803,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 798,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 795,
													"src": "1651:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1657:3:4",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 800,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 797,
												"name": "EIP712",
												"nameLocations": [
													"1644:6:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2225,
												"src": "1644:6:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1644:17:4"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1638:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "1624:18:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 794,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1624:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1623:20:4"
									},
									"returnParameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1662:0:4"
									},
									"scope": 908,
									"src": "1612:52:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										955
									],
									"body": {
										"id": 879,
										"nodeType": "Block",
										"src": "1920:498:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 821,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1935:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 822,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1941:9:4",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1935:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 823,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "1953:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1935:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 830,
												"nodeType": "IfStatement",
												"src": "1931:99:4",
												"trueBody": {
													"id": 829,
													"nodeType": "Block",
													"src": "1963:67:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 826,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 812,
																		"src": "2009:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 825,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 785,
																	"src": "1985:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 827,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1985:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 828,
															"nodeType": "RevertStatement",
															"src": "1978:40:4"
														}
													]
												}
											},
											{
												"assignments": [
													832
												],
												"declarations": [
													{
														"constant": false,
														"id": 832,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2050:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 879,
														"src": "2042:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 831,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2042:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 846,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 836,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "2084:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 837,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 806,
																	"src": "2101:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 838,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "2108:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 839,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 810,
																	"src": "2117:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 841,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 806,
																			"src": "2134:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 840,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1042,
																		"src": "2124:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2124:16:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 843,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 812,
																	"src": "2142:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 834,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2073:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2077:6:4",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2073:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 844,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2073:78:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 833,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2063:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2063:89:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2042:110:4"
											},
											{
												"assignments": [
													848
												],
												"declarations": [
													{
														"constant": false,
														"id": 848,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2173:4:4",
														"nodeType": "VariableDeclaration",
														"scope": 879,
														"src": "2165:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 847,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2165:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 852,
												"initialValue": {
													"arguments": [
														{
															"id": 850,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "2197:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 849,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2158,
														"src": "2180:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2180:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2165:43:4"
											},
											{
												"assignments": [
													854
												],
												"declarations": [
													{
														"constant": false,
														"id": 854,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2229:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 879,
														"src": "2221:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 853,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2221:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 862,
												"initialValue": {
													"arguments": [
														{
															"id": 857,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "2252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 858,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "2258:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 859,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "2261:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 860,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "2264:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 855,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1998,
															"src": "2238:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1998_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2244:7:4",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1948,
														"src": "2238:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2238:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2221:45:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 863,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 854,
														"src": "2281:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 864,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 806,
														"src": "2291:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2281:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 872,
												"nodeType": "IfStatement",
												"src": "2277:90:4",
												"trueBody": {
													"id": 871,
													"nodeType": "Block",
													"src": "2298:69:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 867,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 854,
																		"src": "2341:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 868,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 806,
																		"src": "2349:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 866,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 792,
																	"src": "2320:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (address,address) pure"
																	}
																},
																"id": 869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2320:35:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 870,
															"nodeType": "RevertStatement",
															"src": "2313:42:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 874,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "2388:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 875,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "2395:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 876,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 810,
															"src": "2404:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 873,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															567,
															627
														],
														"referencedDeclaration": 567,
														"src": "2379:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2379:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 878,
												"nodeType": "ExpressionStatement",
												"src": "2379:31:4"
											}
										]
									},
									"documentation": {
										"id": 804,
										"nodeType": "StructuredDocumentation",
										"src": "1672:45:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 880,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1732:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1757:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1749:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1781:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1773:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 807,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1807:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1799:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1831:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1823:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1823:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1856:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1850:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 813,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1850:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1876:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1868:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 815,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1868:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1896:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1888:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 817,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1888:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1738:166:4"
									},
									"returnParameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1920:0:4"
									},
									"scope": 908,
									"src": "1723:695:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										963,
										1027
									],
									"body": {
										"id": 896,
										"nodeType": "Block",
										"src": "2577:45:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 883,
															"src": "2608:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 891,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2595:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$908_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 892,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2601:6:4",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1027,
														"src": "2595:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2595:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 890,
												"id": 895,
												"nodeType": "Return",
												"src": "2588:26:4"
											}
										]
									},
									"documentation": {
										"id": 881,
										"nodeType": "StructuredDocumentation",
										"src": "2426:45:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 897,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2486:6:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 887,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 885,
												"name": "IERC20Permit",
												"nameLocations": [
													"2537:12:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 970,
												"src": "2537:12:4"
											},
											{
												"id": 886,
												"name": "Nonces",
												"nameLocations": [
													"2551:6:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1068,
												"src": "2551:6:4"
											}
										],
										"src": "2528:30:4"
									},
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2501:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "2493:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 882,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2493:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2492:15:4"
									},
									"returnParameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "2568:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2567:9:4"
									},
									"scope": 908,
									"src": "2477:145:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										969
									],
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "2803:46:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 903,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2121,
														"src": "2821:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2821:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 902,
												"id": 905,
												"nodeType": "Return",
												"src": "2814:27:4"
											}
										]
									},
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "2630:45:4",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2744:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2760:2:4"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "2794:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 900,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2794:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2793:9:4"
									},
									"scope": 908,
									"src": "2735:114:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 909,
							"src": "915:1937:4",
							"usedErrors": [
								36,
								41,
								46,
								55,
								60,
								65,
								785,
								792,
								1010,
								1082,
								1084,
								1661,
								1666,
								1671
							],
							"usedEvents": [
								4,
								688,
								697
							]
						}
					],
					"src": "125:2729:4"
				},
				"id": 4
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							754
						],
						"IERC20Metadata": [
							934
						]
					},
					"id": 935,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 910,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "128:24:5"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 912,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 935,
							"sourceUnit": 755,
							"src": "156:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 911,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 754,
										"src": "164:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 914,
										"name": "IERC20",
										"nameLocations": [
											"315:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 754,
										"src": "315:6:5"
									},
									"id": 915,
									"nodeType": "InheritanceSpecifier",
									"src": "315:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 913,
								"nodeType": "StructuredDocumentation",
								"src": "197:88:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 934,
							"linearizedBaseContracts": [
								934,
								754
							],
							"name": "IERC20Metadata",
							"nameLocation": "297:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "329:56:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "400:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "404:2:5"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "430:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 918,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "430:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "429:15:5"
									},
									"scope": 934,
									"src": "391:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "453:58:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 927,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "526:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "532:2:5"
									},
									"returnParameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 927,
												"src": "558:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 924,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "558:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "557:15:5"
									},
									"scope": 934,
									"src": "517:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 928,
										"nodeType": "StructuredDocumentation",
										"src": "581:67:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 933,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "663:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "671:2:5"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "697:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 930,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "697:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "696:7:5"
									},
									"scope": 934,
									"src": "654:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 935,
							"src": "287:420:5",
							"usedErrors": [],
							"usedEvents": [
								688,
								697
							]
						}
					],
					"src": "128:581:5"
				},
				"id": 5
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							970
						]
					},
					"id": 971,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 936,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 937,
								"nodeType": "StructuredDocumentation",
								"src": "154:1998:6",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 970,
							"linearizedBaseContracts": [
								970
							],
							"name": "IERC20Permit",
							"nameLocation": "2164:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "2184:872:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 955,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3071:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3096:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3088:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3088:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3120:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3112:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3112:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3146:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3138:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3170:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3162:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3162:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3195:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3189:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 947,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3189:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3215:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3207:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 949,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3207:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3235:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "3227:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 951,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3227:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3077:166:6"
									},
									"returnParameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3252:0:6"
									},
									"scope": 970,
									"src": "3062:191:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 956,
										"nodeType": "StructuredDocumentation",
										"src": "3261:300:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 963,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3576:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3591:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "3583:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:15:6"
									},
									"returnParameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "3621:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3621:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3620:9:6"
									},
									"scope": 970,
									"src": "3567:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 964,
										"nodeType": "StructuredDocumentation",
										"src": "3638:130:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 969,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3837:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3853:2:6"
									},
									"returnParameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 969,
												"src": "3879:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 966,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3879:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3878:9:6"
									},
									"scope": 970,
									"src": "3828:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 971,
							"src": "2154:1737:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "126:3767:6"
				},
				"id": 6
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1000
						]
					},
					"id": 1001,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 972,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 973,
								"nodeType": "StructuredDocumentation",
								"src": "132:505:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1000,
							"linearizedBaseContracts": [
								1000
							],
							"name": "Context",
							"nameLocation": "657:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "734:36:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 978,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "752:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "756:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "752:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 977,
												"id": 980,
												"nodeType": "Return",
												"src": "745:17:7"
											}
										]
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "681:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:7"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "725:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "725:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "724:9:7"
									},
									"scope": 1000,
									"src": "672:98:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 990,
										"nodeType": "Block",
										"src": "845:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 987,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "863:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "867:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "863:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 986,
												"id": 989,
												"nodeType": "Return",
												"src": "856:15:7"
											}
										]
									},
									"id": 991,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "787:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:7"
									},
									"returnParameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "829:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 984,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "829:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:16:7"
									},
									"scope": 1000,
									"src": "778:101:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 998,
										"nodeType": "Block",
										"src": "959:27:7",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "977:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 995,
												"id": 997,
												"nodeType": "Return",
												"src": "970:8:7"
											}
										]
									},
									"id": 999,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "896:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "916:2:7"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "950:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "950:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "949:9:7"
									},
									"scope": 1000,
									"src": "887:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1001,
							"src": "639:350:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "104:887:7"
				},
				"id": 7
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1068
						]
					},
					"id": 1069,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1002,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1003,
								"nodeType": "StructuredDocumentation",
								"src": "129:85:8",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1068,
							"linearizedBaseContracts": [
								1068
							],
							"name": "Nonces",
							"nameLocation": "234:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "248:92:8",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1010,
									"name": "InvalidAccountNonce",
									"nameLocation": "352:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "380:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1010,
												"src": "372:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "397:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1010,
												"src": "389:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1007,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "389:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:39:8"
									},
									"src": "346:65:8"
								},
								{
									"constant": false,
									"id": 1014,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "463:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 1068,
									"src": "419:51:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1013,
										"keyName": "account",
										"keyNameLocation": "435:7:8",
										"keyType": {
											"id": 1011,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "427:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "419:35:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1012,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "446:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1026,
										"nodeType": "Block",
										"src": "625:40:8",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1022,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1014,
														"src": "643:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1024,
													"indexExpression": {
														"id": 1023,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1017,
														"src": "651:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "643:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1021,
												"id": 1025,
												"nodeType": "Return",
												"src": "636:21:8"
											}
										]
									},
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "479:71:8",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "565:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "580:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "572:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1016,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "572:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:8"
									},
									"returnParameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "616:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "616:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "615:9:8"
									},
									"scope": 1068,
									"src": "556:109:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1041,
										"nodeType": "Block",
										"src": "855:333:8",
										"statements": [
											{
												"id": 1040,
												"nodeType": "UncheckedBlock",
												"src": "1061:120:8",
												"statements": [
													{
														"expression": {
															"id": 1038,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1153:16:8",
															"subExpression": {
																"baseExpression": {
																	"id": 1035,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1014,
																	"src": "1153:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1037,
																"indexExpression": {
																	"id": 1036,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1030,
																	"src": "1161:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1153:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1034,
														"id": 1039,
														"nodeType": "Return",
														"src": "1146:23:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "673:107:8",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1042,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "795:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "813:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "805:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "804:15:8"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "846:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:8"
									},
									"scope": 1068,
									"src": "786:402:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "1377:154:8",
										"statements": [
											{
												"assignments": [
													1051
												],
												"declarations": [
													{
														"constant": false,
														"id": 1051,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1396:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1066,
														"src": "1388:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1050,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1388:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1055,
												"initialValue": {
													"arguments": [
														{
															"id": 1053,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "1416:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1052,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "1406:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1054,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1406:16:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1388:34:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1056,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1047,
														"src": "1437:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1057,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1051,
														"src": "1446:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1437:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1065,
												"nodeType": "IfStatement",
												"src": "1433:91:8",
												"trueBody": {
													"id": 1064,
													"nodeType": "Block",
													"src": "1455:69:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1060,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1045,
																		"src": "1497:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1061,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1051,
																		"src": "1504:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1059,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1010,
																	"src": "1477:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256) pure"
																	}
																},
																"id": 1062,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1477:35:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1063,
															"nodeType": "RevertStatement",
															"src": "1470:42:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "1196:102:8",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1313:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1338:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "1330:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1330:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1353:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "1345:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1329:30:8"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:0:8"
									},
									"scope": 1068,
									"src": "1304:227:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1069,
							"src": "216:1318:8",
							"usedErrors": [
								1010
							],
							"usedEvents": []
						}
					],
					"src": "101:1435:8"
				},
				"id": 8
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1074
						],
						"ShortStrings": [
							1285
						],
						"StorageSlot": [
							1395
						]
					},
					"id": 1286,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1070,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:9"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1072,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1286,
							"sourceUnit": 1396,
							"src": "137:46:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1071,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1395,
										"src": "145:11:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1074,
							"name": "ShortString",
							"nameLocation": "362:11:9",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "357:28:9",
							"underlyingType": {
								"id": 1073,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "377:7:9",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1075,
								"nodeType": "StructuredDocumentation",
								"src": "389:903:9",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1285,
							"linearizedBaseContracts": [
								1285
							],
							"name": "ShortStrings",
							"nameLocation": "1302:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1078,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1411:17:9",
									"nodeType": "VariableDeclaration",
									"scope": 1285,
									"src": "1386:111:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1076,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1386:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1077,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1431:66:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1082,
									"name": "StringTooLong",
									"nameLocation": "1512:13:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1533:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 1082,
												"src": "1526:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1079,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1526:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1525:12:9"
									},
									"src": "1506:32:9"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1084,
									"name": "InvalidShortString",
									"nameLocation": "1550:18:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1568:2:9"
									},
									"src": "1544:27:9"
								},
								{
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "1837:214:9",
										"statements": [
											{
												"assignments": [
													1094
												],
												"declarations": [
													{
														"constant": false,
														"id": 1094,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1861:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1127,
														"src": "1848:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1093,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1848:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1099,
												"initialValue": {
													"arguments": [
														{
															"id": 1097,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "1874:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1868:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1095,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1868:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 1098,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1868:10:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1848:30:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1100,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "1893:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1898:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1893:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1907:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1893:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1109,
												"nodeType": "IfStatement",
												"src": "1889:74:9",
												"trueBody": {
													"id": 1108,
													"nodeType": "Block",
													"src": "1911:52:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1105,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1087,
																		"src": "1947:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1104,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1082,
																	"src": "1933:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1933:18:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1107,
															"nodeType": "RevertStatement",
															"src": "1926:25:9"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1123,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1118,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1094,
																						"src": "2021:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1117,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2013:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1116,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "2013:7:9",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1119,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2013:13:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2005:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1114,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "2005:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2005:22:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1121,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1094,
																			"src": "2030:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2035:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "2030:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2005:36:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1113,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1997:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1112,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1997:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1997:45:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1110,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "1980:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1074_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1111,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1992:4:9",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1980:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1074_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1980:63:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1092,
												"id": 1126,
												"nodeType": "Return",
												"src": "1973:70:9"
											}
										]
									},
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "1579:174:9",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1768:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1796:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "1782:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1086,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1782:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1781:19:9"
									},
									"returnParameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "1824:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1090,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1089,
														"name": "ShortString",
														"nameLocations": [
															"1824:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "1824:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "1824:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:13:9"
									},
									"scope": 1285,
									"src": "1759:292:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1153,
										"nodeType": "Block",
										"src": "2214:341:9",
										"statements": [
											{
												"assignments": [
													1138
												],
												"declarations": [
													{
														"constant": false,
														"id": 1138,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2233:3:9",
														"nodeType": "VariableDeclaration",
														"scope": 1153,
														"src": "2225:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1137,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2225:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1142,
												"initialValue": {
													"arguments": [
														{
															"id": 1140,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1132,
															"src": "2250:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																"typeString": "ShortString"
															}
														],
														"id": 1139,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "2239:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2239:16:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2225:30:9"
											},
											{
												"assignments": [
													1144
												],
												"declarations": [
													{
														"constant": false,
														"id": 1144,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2359:3:9",
														"nodeType": "VariableDeclaration",
														"scope": 1153,
														"src": "2345:17:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1143,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2345:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1149,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2376:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2365:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1145,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2369:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2365:14:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2345:34:9"
											},
											{
												"AST": {
													"nativeSrc": "2443:84:9",
													"nodeType": "YulBlock",
													"src": "2443:84:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2465:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "2465:3:9"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2470:3:9",
																		"nodeType": "YulIdentifier",
																		"src": "2470:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2458:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2458:6:9"
																},
																"nativeSrc": "2458:16:9",
																"nodeType": "YulFunctionCall",
																"src": "2458:16:9"
															},
															"nativeSrc": "2458:16:9",
															"nodeType": "YulExpressionStatement",
															"src": "2458:16:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2499:3:9",
																				"nodeType": "YulIdentifier",
																				"src": "2499:3:9"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2504:4:9",
																				"nodeType": "YulLiteral",
																				"src": "2504:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2495:3:9",
																			"nodeType": "YulIdentifier",
																			"src": "2495:3:9"
																		},
																		"nativeSrc": "2495:14:9",
																		"nodeType": "YulFunctionCall",
																		"src": "2495:14:9"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2511:4:9",
																		"nodeType": "YulIdentifier",
																		"src": "2511:4:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2488:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "2488:6:9"
																},
																"nativeSrc": "2488:28:9",
																"nodeType": "YulFunctionCall",
																"src": "2488:28:9"
															},
															"nativeSrc": "2488:28:9",
															"nodeType": "YulExpressionStatement",
															"src": "2488:28:9"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1138,
														"isOffset": false,
														"isSlot": false,
														"src": "2470:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1132,
														"isOffset": false,
														"isSlot": false,
														"src": "2511:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1144,
														"isOffset": false,
														"isSlot": false,
														"src": "2465:3:9",
														"valueSize": 1
													},
													{
														"declaration": 1144,
														"isOffset": false,
														"isSlot": false,
														"src": "2499:3:9",
														"valueSize": 1
													}
												],
												"id": 1150,
												"nodeType": "InlineAssembly",
												"src": "2434:93:9"
											},
											{
												"expression": {
													"id": 1151,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1144,
													"src": "2544:3:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1136,
												"id": 1152,
												"nodeType": "Return",
												"src": "2537:10:9"
											}
										]
									},
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "2059:75:9",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2149:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2170:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "2158:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1131,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1130,
														"name": "ShortString",
														"nameLocations": [
															"2158:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "2158:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "2158:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2157:18:9"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "2199:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1134,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2199:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:15:9"
									},
									"scope": 1285,
									"src": "2140:415:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "2702:181:9",
										"statements": [
											{
												"assignments": [
													1164
												],
												"declarations": [
													{
														"constant": false,
														"id": 1164,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2721:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1185,
														"src": "2713:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1163,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2713:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1174,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1169,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1158,
																		"src": "2757:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1167,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "2738:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1074_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1168,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2750:6:9",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2738:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2730:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1165,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2730:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2730:33:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2766:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2730:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2713:57:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1175,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1164,
														"src": "2785:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2794:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2785:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1182,
												"nodeType": "IfStatement",
												"src": "2781:71:9",
												"trueBody": {
													"id": 1181,
													"nodeType": "Block",
													"src": "2798:54:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1178,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1084,
																	"src": "2820:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1179,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2820:20:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1180,
															"nodeType": "RevertStatement",
															"src": "2813:27:9"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1183,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1164,
													"src": "2869:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1162,
												"id": 1184,
												"nodeType": "Return",
												"src": "2862:13:9"
											}
										]
									},
									"documentation": {
										"id": 1155,
										"nodeType": "StructuredDocumentation",
										"src": "2563:63:9",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2641:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2664:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "2652:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1157,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1156,
														"name": "ShortString",
														"nameLocations": [
															"2652:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "2652:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "2652:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:18:9"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1186,
												"src": "2693:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2692:9:9"
									},
									"scope": 1285,
									"src": "2632:251:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "3111:238:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1199,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1189,
																	"src": "3132:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3126:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1197,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3126:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3126:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3139:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3126:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1202,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3148:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3126:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1223,
													"nodeType": "Block",
													"src": "3212:130:9",
													"statements": [
														{
															"expression": {
																"id": 1216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1212,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1191,
																				"src": "3253:5:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1209,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1395,
																				"src": "3227:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1395_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3239:13:9",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1372,
																			"src": "3227:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1303_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3227:32:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1303_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1214,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3260:5:9",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1302,
																	"src": "3227:38:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1215,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1189,
																	"src": "3268:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3227:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1217,
															"nodeType": "ExpressionStatement",
															"src": "3227:46:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1220,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1078,
																		"src": "3312:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1218,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "3295:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1074_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3307:4:9",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3295:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1074_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1221,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3295:35:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1196,
															"id": 1222,
															"nodeType": "Return",
															"src": "3288:42:9"
														}
													]
												},
												"id": 1224,
												"nodeType": "IfStatement",
												"src": "3122:220:9",
												"trueBody": {
													"id": 1208,
													"nodeType": "Block",
													"src": "3152:54:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1205,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1189,
																		"src": "3188:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1204,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1128,
																	"src": "3174:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1074_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1206,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3174:20:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1196,
															"id": 1207,
															"nodeType": "Return",
															"src": "3167:27:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "2891:105:9",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "3011:25:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3051:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "3037:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1188,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3037:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3073:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "3058:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1190,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3058:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3036:43:9"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "3098:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1194,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1193,
														"name": "ShortString",
														"nameLocations": [
															"3098:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "3098:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "3098:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3097:13:9"
									},
									"scope": 1285,
									"src": "3002:347:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1252,
										"nodeType": "Block",
										"src": "3594:164:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1239,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1230,
																"src": "3628:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1237,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "3609:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1074_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1238,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3621:6:9",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3609:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3609:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1241,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "3638:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3609:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1250,
													"nodeType": "Block",
													"src": "3712:39:9",
													"statements": [
														{
															"expression": {
																"id": 1248,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "3734:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1236,
															"id": 1249,
															"nodeType": "Return",
															"src": "3727:12:9"
														}
													]
												},
												"id": 1251,
												"nodeType": "IfStatement",
												"src": "3605:146:9",
												"trueBody": {
													"id": 1247,
													"nodeType": "Block",
													"src": "3657:49:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1244,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1230,
																		"src": "3688:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1243,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1154,
																	"src": "3679:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3679:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1236,
															"id": 1246,
															"nodeType": "Return",
															"src": "3672:22:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1227,
										"nodeType": "StructuredDocumentation",
										"src": "3357:122:9",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3494:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3527:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "3515:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1229,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1228,
														"name": "ShortString",
														"nameLocations": [
															"3515:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "3515:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "3515:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3549:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "3534:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1231,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3534:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3514:41:9"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "3579:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3579:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3578:15:9"
									},
									"scope": 1285,
									"src": "3485:273:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1283,
										"nodeType": "Block",
										"src": "4247:180:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1266,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1257,
																"src": "4281:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1264,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "4262:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1074_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4274:6:9",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4262:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4262:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1268,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "4291:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4262:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1281,
													"nodeType": "Block",
													"src": "4367:53:9",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1277,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "4395:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4389:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1275,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4389:5:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4389:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4402:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4389:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1263,
															"id": 1280,
															"nodeType": "Return",
															"src": "4382:26:9"
														}
													]
												},
												"id": 1282,
												"nodeType": "IfStatement",
												"src": "4258:162:9",
												"trueBody": {
													"id": 1274,
													"nodeType": "Block",
													"src": "4310:51:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1271,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1257,
																		"src": "4343:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1270,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1186,
																	"src": "4332:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1074_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4332:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1263,
															"id": 1273,
															"nodeType": "Return",
															"src": "4325:24:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1254,
										"nodeType": "StructuredDocumentation",
										"src": "3766:370:9",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4151:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4186:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "4174:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1256,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1255,
														"name": "ShortString",
														"nameLocations": [
															"4174:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1074,
														"src": "4174:11:9"
													},
													"referencedDeclaration": 1074,
													"src": "4174:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4208:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "4193:20:9",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1258,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4193:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4173:41:9"
									},
									"returnParameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "4238:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4238:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4237:9:9"
									},
									"scope": 1285,
									"src": "4142:285:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1286,
							"src": "1294:3136:9",
							"usedErrors": [
								1082,
								1084
							],
							"usedEvents": []
						}
					],
					"src": "109:4323:9"
				},
				"id": 9
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1395
						]
					},
					"id": 1396,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1287,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "197:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1288,
								"nodeType": "StructuredDocumentation",
								"src": "225:1048:10",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1395,
							"linearizedBaseContracts": [
								1395
							],
							"name": "StorageSlot",
							"nameLocation": "1283:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1291,
									"members": [
										{
											"constant": false,
											"id": 1290,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1340:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1291,
											"src": "1332:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1289,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1332:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1309:11:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1302:51:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1294,
									"members": [
										{
											"constant": false,
											"id": 1293,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1396:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1294,
											"src": "1391:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1292,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1391:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1368:11:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1361:48:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1297,
									"members": [
										{
											"constant": false,
											"id": 1296,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1455:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1297,
											"src": "1447:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1295,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1447:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1424:11:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1417:51:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1300,
									"members": [
										{
											"constant": false,
											"id": 1299,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1514:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1300,
											"src": "1506:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1298,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1506:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1483:11:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1476:51:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1303,
									"members": [
										{
											"constant": false,
											"id": 1302,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1571:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1303,
											"src": "1564:12:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1301,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1564:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1542:10:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1535:49:10",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1306,
									"members": [
										{
											"constant": false,
											"id": 1305,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1626:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1306,
											"src": "1620:11:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1304,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1620:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1599:9:10",
									"nodeType": "StructDefinition",
									"scope": 1395,
									"src": "1592:47:10",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1316,
										"nodeType": "Block",
										"src": "1826:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1890:40:10",
													"nodeType": "YulBlock",
													"src": "1890:40:10",
													"statements": [
														{
															"nativeSrc": "1905:14:10",
															"nodeType": "YulAssignment",
															"src": "1905:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "1915:4:10",
																"nodeType": "YulIdentifier",
																"src": "1915:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "1905:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1905:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1313,
														"isOffset": false,
														"isSlot": true,
														"src": "1905:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1309,
														"isOffset": false,
														"isSlot": false,
														"src": "1915:4:10",
														"valueSize": 1
													}
												],
												"id": 1315,
												"nodeType": "InlineAssembly",
												"src": "1881:49:10"
											}
										]
									},
									"documentation": {
										"id": 1307,
										"nodeType": "StructuredDocumentation",
										"src": "1647:89:10",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1751:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1774:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1766:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1308,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1766:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1765:14:10"
									},
									"returnParameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1823:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1803:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1291_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1312,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1311,
														"name": "AddressSlot",
														"nameLocations": [
															"1803:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1291,
														"src": "1803:11:10"
													},
													"referencedDeclaration": 1291,
													"src": "1803:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1291_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1802:23:10"
									},
									"scope": 1395,
									"src": "1742:195:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1327,
										"nodeType": "Block",
										"src": "2124:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2188:40:10",
													"nodeType": "YulBlock",
													"src": "2188:40:10",
													"statements": [
														{
															"nativeSrc": "2203:14:10",
															"nodeType": "YulAssignment",
															"src": "2203:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "2213:4:10",
																"nodeType": "YulIdentifier",
																"src": "2213:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2203:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2203:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1324,
														"isOffset": false,
														"isSlot": true,
														"src": "2203:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1320,
														"isOffset": false,
														"isSlot": false,
														"src": "2213:4:10",
														"valueSize": 1
													}
												],
												"id": 1326,
												"nodeType": "InlineAssembly",
												"src": "2179:49:10"
											}
										]
									},
									"documentation": {
										"id": 1318,
										"nodeType": "StructuredDocumentation",
										"src": "1945:89:10",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "2049:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2072:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "2064:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1319,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2064:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2063:14:10"
									},
									"returnParameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2121:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "2101:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1294_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1323,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1322,
														"name": "BooleanSlot",
														"nameLocations": [
															"2101:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1294,
														"src": "2101:11:10"
													},
													"referencedDeclaration": 1294,
													"src": "2101:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1294_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:23:10"
									},
									"scope": 1395,
									"src": "2040:195:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1338,
										"nodeType": "Block",
										"src": "2422:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2486:40:10",
													"nodeType": "YulBlock",
													"src": "2486:40:10",
													"statements": [
														{
															"nativeSrc": "2501:14:10",
															"nodeType": "YulAssignment",
															"src": "2501:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "2511:4:10",
																"nodeType": "YulIdentifier",
																"src": "2511:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2501:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2501:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1335,
														"isOffset": false,
														"isSlot": true,
														"src": "2501:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1331,
														"isOffset": false,
														"isSlot": false,
														"src": "2511:4:10",
														"valueSize": 1
													}
												],
												"id": 1337,
												"nodeType": "InlineAssembly",
												"src": "2477:49:10"
											}
										]
									},
									"documentation": {
										"id": 1329,
										"nodeType": "StructuredDocumentation",
										"src": "2243:89:10",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2347:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2370:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2362:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1330,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2362:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2361:14:10"
									},
									"returnParameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1335,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2419:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2399:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1297_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1334,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1333,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2399:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1297,
														"src": "2399:11:10"
													},
													"referencedDeclaration": 1297,
													"src": "2399:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1297_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2398:23:10"
									},
									"scope": 1395,
									"src": "2338:195:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1349,
										"nodeType": "Block",
										"src": "2720:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2784:40:10",
													"nodeType": "YulBlock",
													"src": "2784:40:10",
													"statements": [
														{
															"nativeSrc": "2799:14:10",
															"nodeType": "YulAssignment",
															"src": "2799:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "2809:4:10",
																"nodeType": "YulIdentifier",
																"src": "2809:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2799:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2799:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1346,
														"isOffset": false,
														"isSlot": true,
														"src": "2799:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1342,
														"isOffset": false,
														"isSlot": false,
														"src": "2809:4:10",
														"valueSize": 1
													}
												],
												"id": 1348,
												"nodeType": "InlineAssembly",
												"src": "2775:49:10"
											}
										]
									},
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "2541:89:10",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2645:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2668:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "2660:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1341,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2660:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2659:14:10"
									},
									"returnParameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2717:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "2697:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1300_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1345,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1344,
														"name": "Uint256Slot",
														"nameLocations": [
															"2697:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1300,
														"src": "2697:11:10"
													},
													"referencedDeclaration": 1300,
													"src": "2697:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1300_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2696:23:10"
									},
									"scope": 1395,
									"src": "2636:195:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "3015:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3079:40:10",
													"nodeType": "YulBlock",
													"src": "3079:40:10",
													"statements": [
														{
															"nativeSrc": "3094:14:10",
															"nodeType": "YulAssignment",
															"src": "3094:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "3104:4:10",
																"nodeType": "YulIdentifier",
																"src": "3104:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3094:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3094:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1357,
														"isOffset": false,
														"isSlot": true,
														"src": "3094:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1353,
														"isOffset": false,
														"isSlot": false,
														"src": "3104:4:10",
														"valueSize": 1
													}
												],
												"id": 1359,
												"nodeType": "InlineAssembly",
												"src": "3070:49:10"
											}
										]
									},
									"documentation": {
										"id": 1351,
										"nodeType": "StructuredDocumentation",
										"src": "2839:88:10",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2942:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2964:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "2956:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1352,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2956:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2955:14:10"
									},
									"returnParameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3012:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "2993:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1303_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1356,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1355,
														"name": "StringSlot",
														"nameLocations": [
															"2993:10:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "2993:10:10"
													},
													"referencedDeclaration": 1303,
													"src": "2993:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1303_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2992:22:10"
									},
									"scope": 1395,
									"src": "2933:193:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1371,
										"nodeType": "Block",
										"src": "3333:117:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3397:46:10",
													"nodeType": "YulBlock",
													"src": "3397:46:10",
													"statements": [
														{
															"nativeSrc": "3412:20:10",
															"nodeType": "YulAssignment",
															"src": "3412:20:10",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3422:10:10",
																"nodeType": "YulIdentifier",
																"src": "3422:10:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3412:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3412:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1368,
														"isOffset": false,
														"isSlot": true,
														"src": "3412:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1364,
														"isOffset": false,
														"isSlot": true,
														"src": "3422:10:10",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1370,
												"nodeType": "InlineAssembly",
												"src": "3388:55:10"
											}
										]
									},
									"documentation": {
										"id": 1362,
										"nodeType": "StructuredDocumentation",
										"src": "3134:103:10",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3252:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3281:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "3266:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1363,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3266:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3265:22:10"
									},
									"returnParameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3330:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "3311:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1303_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1367,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1366,
														"name": "StringSlot",
														"nameLocations": [
															"3311:10:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "3311:10:10"
													},
													"referencedDeclaration": 1303,
													"src": "3311:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1303_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3310:22:10"
									},
									"scope": 1395,
									"src": "3243:207:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1382,
										"nodeType": "Block",
										"src": "3631:111:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3695:40:10",
													"nodeType": "YulBlock",
													"src": "3695:40:10",
													"statements": [
														{
															"nativeSrc": "3710:14:10",
															"nodeType": "YulAssignment",
															"src": "3710:14:10",
															"value": {
																"name": "slot",
																"nativeSrc": "3720:4:10",
																"nodeType": "YulIdentifier",
																"src": "3720:4:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3710:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3710:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1379,
														"isOffset": false,
														"isSlot": true,
														"src": "3710:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1375,
														"isOffset": false,
														"isSlot": false,
														"src": "3720:4:10",
														"valueSize": 1
													}
												],
												"id": 1381,
												"nodeType": "InlineAssembly",
												"src": "3686:49:10"
											}
										]
									},
									"documentation": {
										"id": 1373,
										"nodeType": "StructuredDocumentation",
										"src": "3458:87:10",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1383,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3560:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3581:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "3573:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1374,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3573:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3572:14:10"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3628:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "3610:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1306_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1378,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1377,
														"name": "BytesSlot",
														"nameLocations": [
															"3610:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1306,
														"src": "3610:9:10"
													},
													"referencedDeclaration": 1306,
													"src": "3610:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1306_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:21:10"
									},
									"scope": 1395,
									"src": "3551:191:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1393,
										"nodeType": "Block",
										"src": "3944:117:10",
										"statements": [
											{
												"AST": {
													"nativeSrc": "4008:46:10",
													"nodeType": "YulBlock",
													"src": "4008:46:10",
													"statements": [
														{
															"nativeSrc": "4023:20:10",
															"nodeType": "YulAssignment",
															"src": "4023:20:10",
															"value": {
																"name": "store.slot",
																"nativeSrc": "4033:10:10",
																"nodeType": "YulIdentifier",
																"src": "4033:10:10"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "4023:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "4023:6:10"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1390,
														"isOffset": false,
														"isSlot": true,
														"src": "4023:6:10",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1386,
														"isOffset": false,
														"isSlot": true,
														"src": "4033:10:10",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1392,
												"nodeType": "InlineAssembly",
												"src": "3999:55:10"
											}
										]
									},
									"documentation": {
										"id": 1384,
										"nodeType": "StructuredDocumentation",
										"src": "3750:101:10",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3866:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3893:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3879:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1385,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3879:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3878:21:10"
									},
									"returnParameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3941:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3923:19:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1306_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1389,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1388,
														"name": "BytesSlot",
														"nameLocations": [
															"3923:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1306,
														"src": "3923:9:10"
													},
													"referencedDeclaration": 1306,
													"src": "3923:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1306_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3922:21:10"
									},
									"scope": 1395,
									"src": "3857:204:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1396,
							"src": "1275:2789:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "197:3869:10"
				},
				"id": 10
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3353
						],
						"SignedMath": [
							3458
						],
						"Strings": [
							1650
						]
					},
					"id": 1651,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1397,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:11"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1399,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1651,
							"sourceUnit": 3354,
							"src": "132:37:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1398,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3353,
										"src": "140:4:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1401,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1651,
							"sourceUnit": 3459,
							"src": "171:49:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1400,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3458,
										"src": "179:10:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1402,
								"nodeType": "StructuredDocumentation",
								"src": "224:36:11",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1650,
							"linearizedBaseContracts": [
								1650
							],
							"name": "Strings",
							"nameLocation": "270:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1405,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "310:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 1650,
									"src": "285:56:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1403,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "285:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1404,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "323:18:11",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1408,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "371:14:11",
									"nodeType": "VariableDeclaration",
									"scope": 1650,
									"src": "348:42:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1406,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "348:5:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1407,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "388:2:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1409,
										"nodeType": "StructuredDocumentation",
										"src": "399:83:11",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1415,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "494:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "531:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1415,
												"src": "523:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1410,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "523:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "546:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1415,
												"src": "538:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:31:11"
									},
									"src": "488:66:11"
								},
								{
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "731:647:11",
										"statements": [
											{
												"id": 1461,
												"nodeType": "UncheckedBlock",
												"src": "742:629:11",
												"statements": [
													{
														"assignments": [
															1424
														],
														"declarations": [
															{
																"constant": false,
																"id": 1424,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "775:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 1461,
																"src": "767:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1423,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "767:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1431,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1427,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1418,
																		"src": "795:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1425,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3353,
																		"src": "784:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3353_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "789:5:11",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3173,
																	"src": "784:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1428,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "784:17:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1429,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "804:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "784:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "767:38:11"
													},
													{
														"assignments": [
															1433
														],
														"declarations": [
															{
																"constant": false,
																"id": 1433,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "834:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 1461,
																"src": "820:20:11",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1432,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "820:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1438,
														"initialValue": {
															"arguments": [
																{
																	"id": 1436,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1424,
																	"src": "854:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "843:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1434,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "847:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "843:18:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "820:41:11"
													},
													{
														"assignments": [
															1440
														],
														"declarations": [
															{
																"constant": false,
																"id": 1440,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "884:3:11",
																"nodeType": "VariableDeclaration",
																"scope": 1461,
																"src": "876:11:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1439,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "876:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1441,
														"nodeType": "VariableDeclarationStatement",
														"src": "876:11:11"
													},
													{
														"AST": {
															"nativeSrc": "959:69:11",
															"nodeType": "YulBlock",
															"src": "959:69:11",
															"statements": [
																{
																	"nativeSrc": "978:35:11",
																	"nodeType": "YulAssignment",
																	"src": "978:35:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "989:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "989:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1001:2:11",
																						"nodeType": "YulLiteral",
																						"src": "1001:2:11",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "1005:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "1005:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "997:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "997:3:11"
																				},
																				"nativeSrc": "997:15:11",
																				"nodeType": "YulFunctionCall",
																				"src": "997:15:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "985:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "985:3:11"
																		},
																		"nativeSrc": "985:28:11",
																		"nodeType": "YulFunctionCall",
																		"src": "985:28:11"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "978:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "978:3:11"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1433,
																"isOffset": false,
																"isSlot": false,
																"src": "989:6:11",
																"valueSize": 1
															},
															{
																"declaration": 1424,
																"isOffset": false,
																"isSlot": false,
																"src": "1005:6:11",
																"valueSize": 1
															},
															{
																"declaration": 1440,
																"isOffset": false,
																"isSlot": false,
																"src": "978:3:11",
																"valueSize": 1
															}
														],
														"id": 1442,
														"nodeType": "InlineAssembly",
														"src": "950:78:11"
													},
													{
														"body": {
															"id": 1457,
															"nodeType": "Block",
															"src": "1055:277:11",
															"statements": [
																{
																	"expression": {
																		"id": 1445,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1074:5:11",
																		"subExpression": {
																			"id": 1444,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1440,
																			"src": "1074:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1446,
																	"nodeType": "ExpressionStatement",
																	"src": "1074:5:11"
																},
																{
																	"AST": {
																		"nativeSrc": "1159:88:11",
																		"nodeType": "YulBlock",
																		"src": "1159:88:11",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1190:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "1190:3:11"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1204:5:11",
																											"nodeType": "YulIdentifier",
																											"src": "1204:5:11"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1211:2:11",
																											"nodeType": "YulLiteral",
																											"src": "1211:2:11",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1200:3:11",
																										"nodeType": "YulIdentifier",
																										"src": "1200:3:11"
																									},
																									"nativeSrc": "1200:14:11",
																									"nodeType": "YulFunctionCall",
																									"src": "1200:14:11"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1216:10:11",
																									"nodeType": "YulIdentifier",
																									"src": "1216:10:11"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1195:4:11",
																								"nodeType": "YulIdentifier",
																								"src": "1195:4:11"
																							},
																							"nativeSrc": "1195:32:11",
																							"nodeType": "YulFunctionCall",
																							"src": "1195:32:11"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1182:7:11",
																						"nodeType": "YulIdentifier",
																						"src": "1182:7:11"
																					},
																					"nativeSrc": "1182:46:11",
																					"nodeType": "YulFunctionCall",
																					"src": "1182:46:11"
																				},
																				"nativeSrc": "1182:46:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "1182:46:11"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 1405,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1216:10:11",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1440,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1190:3:11",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1418,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1204:5:11",
																			"valueSize": 1
																		}
																	],
																	"id": 1447,
																	"nodeType": "InlineAssembly",
																	"src": "1150:97:11"
																},
																{
																	"expression": {
																		"id": 1450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1448,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "1265:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1449,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1274:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1265:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1451,
																	"nodeType": "ExpressionStatement",
																	"src": "1265:11:11"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1452,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1418,
																			"src": "1299:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1308:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1299:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1456,
																	"nodeType": "IfStatement",
																	"src": "1295:21:11",
																	"trueBody": {
																		"id": 1455,
																		"nodeType": "Break",
																		"src": "1311:5:11"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1049:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1458,
														"nodeType": "WhileStatement",
														"src": "1042:290:11"
													},
													{
														"expression": {
															"id": 1459,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "1353:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1422,
														"id": 1460,
														"nodeType": "Return",
														"src": "1346:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1416,
										"nodeType": "StructuredDocumentation",
										"src": "562:92:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "669:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "686:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "678:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:15:11"
									},
									"returnParameters": {
										"id": 1422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "716:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1420,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "716:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "715:15:11"
									},
									"scope": 1650,
									"src": "660:718:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1488,
										"nodeType": "Block",
										"src": "1559:94:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1474,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1466,
																	"src": "1591:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1599:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1591:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1609:2:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1591:20:11",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1603:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1483,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1466,
																			"src": "1637:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1481,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3458,
																			"src": "1622:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3458_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1633:3:11",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3457,
																		"src": "1622:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1622:21:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1480,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1463,
																"src": "1613:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1613:31:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1577:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1471,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1577:6:11",
																"typeDescriptions": {}
															}
														},
														"id": 1473,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1584:6:11",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1577:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1577:68:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1470,
												"id": 1487,
												"nodeType": "Return",
												"src": "1570:75:11"
											}
										]
									},
									"documentation": {
										"id": 1464,
										"nodeType": "StructuredDocumentation",
										"src": "1386:91:11",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1492:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1514:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "1507:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1465,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1507:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1506:14:11"
									},
									"returnParameters": {
										"id": 1470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "1544:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1468,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1544:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1543:15:11"
									},
									"scope": 1650,
									"src": "1483:170:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1508,
										"nodeType": "Block",
										"src": "1837:104:11",
										"statements": [
											{
												"id": 1507,
												"nodeType": "UncheckedBlock",
												"src": "1848:86:11",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1498,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1492,
																	"src": "1892:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1501,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1492,
																				"src": "1911:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1499,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3353,
																				"src": "1899:4:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3353_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1904:6:11",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3295,
																			"src": "1899:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1899:18:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1503,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1920:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1899:22:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1497,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1509,
																	1592,
																	1612
																],
																"referencedDeclaration": 1592,
																"src": "1880:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1880:42:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1496,
														"id": 1506,
														"nodeType": "Return",
														"src": "1873:49:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1490,
										"nodeType": "StructuredDocumentation",
										"src": "1661:96:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1509,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1772:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1792:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "1784:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1784:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1783:15:11"
									},
									"returnParameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "1822:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1494,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1822:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1821:15:11"
									},
									"scope": 1650,
									"src": "1763:178:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1591,
										"nodeType": "Block",
										"src": "2159:448:11",
										"statements": [
											{
												"assignments": [
													1520
												],
												"declarations": [
													{
														"constant": false,
														"id": 1520,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2178:10:11",
														"nodeType": "VariableDeclaration",
														"scope": 1591,
														"src": "2170:18:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1519,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2170:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1522,
												"initialValue": {
													"id": 1521,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1512,
													"src": "2191:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2170:26:11"
											},
											{
												"assignments": [
													1524
												],
												"declarations": [
													{
														"constant": false,
														"id": 1524,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2220:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1591,
														"src": "2207:19:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1523,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2207:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1533,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2239:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1528,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1514,
																	"src": "2243:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2239:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1530,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2252:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2239:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1526,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2229:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1525,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2233:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2229:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2207:47:11"
											},
											{
												"expression": {
													"id": 1538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1534,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "2265:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1536,
														"indexExpression": {
															"hexValue": "30",
															"id": 1535,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2272:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2265:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1537,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2277:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2265:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1539,
												"nodeType": "ExpressionStatement",
												"src": "2265:15:11"
											},
											{
												"expression": {
													"id": 1544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1540,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "2291:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1542,
														"indexExpression": {
															"hexValue": "31",
															"id": 1541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2298:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2291:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2303:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2291:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1545,
												"nodeType": "ExpressionStatement",
												"src": "2291:15:11"
											},
											{
												"body": {
													"id": 1574,
													"nodeType": "Block",
													"src": "2362:98:11",
													"statements": [
														{
															"expression": {
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1560,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1524,
																		"src": "2377:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1562,
																	"indexExpression": {
																		"id": 1561,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1547,
																		"src": "2384:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2377:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1563,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1405,
																		"src": "2389:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1567,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1564,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1520,
																			"src": "2400:10:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2413:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2400:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2389:28:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2377:40:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1569,
															"nodeType": "ExpressionStatement",
															"src": "2377:40:11"
														},
														{
															"expression": {
																"id": 1572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1570,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1520,
																	"src": "2432:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2447:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2432:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1573,
															"nodeType": "ExpressionStatement",
															"src": "2432:16:11"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1554,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1547,
														"src": "2350:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1555,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2354:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2350:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1575,
												"initializationExpression": {
													"assignments": [
														1547
													],
													"declarations": [
														{
															"constant": false,
															"id": 1547,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2330:1:11",
															"nodeType": "VariableDeclaration",
															"scope": 1575,
															"src": "2322:9:11",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1546,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2322:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1553,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1548,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2334:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1549,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1514,
																"src": "2338:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2334:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2347:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2334:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2322:26:11"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2357:3:11",
														"subExpression": {
															"id": 1557,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1547,
															"src": "2359:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1559,
													"nodeType": "ExpressionStatement",
													"src": "2357:3:11"
												},
												"nodeType": "ForStatement",
												"src": "2317:143:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1576,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1520,
														"src": "2474:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1577,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2488:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2474:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1585,
												"nodeType": "IfStatement",
												"src": "2470:98:11",
												"trueBody": {
													"id": 1584,
													"nodeType": "Block",
													"src": "2491:77:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1580,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "2542:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1581,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1514,
																		"src": "2549:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1579,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1415,
																	"src": "2513:28:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 1582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2513:43:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1583,
															"nodeType": "RevertStatement",
															"src": "2506:50:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1588,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "2592:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1587,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2585:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1586,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2585:6:11",
															"typeDescriptions": {}
														}
													},
													"id": 1589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2585:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1518,
												"id": 1590,
												"nodeType": "Return",
												"src": "2578:21:11"
											}
										]
									},
									"documentation": {
										"id": 1510,
										"nodeType": "StructuredDocumentation",
										"src": "1949:114:11",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2078:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2098:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "2090:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2090:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2113:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "2105:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2105:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2089:31:11"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "2144:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1516,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2144:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2143:15:11"
									},
									"scope": 1650,
									"src": "2069:538:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1611,
										"nodeType": "Block",
										"src": "2845:77:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1605,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1595,
																			"src": "2891:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2883:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1603,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2883:7:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2883:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1602,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2875:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1601,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2875:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2875:22:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1608,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1408,
															"src": "2899:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1600,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1509,
															1592,
															1612
														],
														"referencedDeclaration": 1592,
														"src": "2863:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2863:51:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1599,
												"id": 1610,
												"nodeType": "Return",
												"src": "2856:58:11"
											}
										]
									},
									"documentation": {
										"id": 1593,
										"nodeType": "StructuredDocumentation",
										"src": "2615:151:11",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2781:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2801:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1612,
												"src": "2793:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2793:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2792:14:11"
									},
									"returnParameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1612,
												"src": "2830:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1597,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2830:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2829:15:11"
									},
									"scope": 1650,
									"src": "2772:150:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1648,
										"nodeType": "Block",
										"src": "3082:106:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1632,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1624,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1615,
																		"src": "3106:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3100:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1622,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3100:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3100:8:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1626,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3109:6:11",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3100:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1629,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1617,
																		"src": "3125:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1628,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3119:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1627,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3119:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3119:8:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1631,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3128:6:11",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3119:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3100:34:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1645,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1636,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1615,
																			"src": "3154:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1635,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3148:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1634,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3148:5:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3148:8:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1633,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3138:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3138:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1642,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1617,
																			"src": "3177:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1641,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3171:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1640,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3171:5:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3171:8:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1639,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3161:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3161:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3138:42:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3100:80:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1621,
												"id": 1647,
												"nodeType": "Return",
												"src": "3093:87:11"
											}
										]
									},
									"documentation": {
										"id": 1613,
										"nodeType": "StructuredDocumentation",
										"src": "2930:68:11",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "3013:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3033:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1649,
												"src": "3019:15:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1614,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3019:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3050:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1649,
												"src": "3036:15:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1616,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3036:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3018:34:11"
									},
									"returnParameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1649,
												"src": "3076:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3076:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3075:6:11"
									},
									"scope": 1650,
									"src": "3004:184:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1651,
							"src": "262:2929:11",
							"usedErrors": [
								1415
							],
							"usedEvents": []
						}
					],
					"src": "104:3089:11"
				},
				"id": 11
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							1998
						]
					},
					"id": 1999,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1652,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1653,
								"nodeType": "StructuredDocumentation",
								"src": "143:210:12",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1998,
							"linearizedBaseContracts": [
								1998
							],
							"name": "ECDSA",
							"nameLocation": "363:5:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1658,
									"members": [
										{
											"id": 1654,
											"name": "NoError",
											"nameLocation": "405:7:12",
											"nodeType": "EnumValue",
											"src": "405:7:12"
										},
										{
											"id": 1655,
											"name": "InvalidSignature",
											"nameLocation": "423:16:12",
											"nodeType": "EnumValue",
											"src": "423:16:12"
										},
										{
											"id": 1656,
											"name": "InvalidSignatureLength",
											"nameLocation": "450:22:12",
											"nodeType": "EnumValue",
											"src": "450:22:12"
										},
										{
											"id": 1657,
											"name": "InvalidSignatureS",
											"nameLocation": "483:17:12",
											"nodeType": "EnumValue",
											"src": "483:17:12"
										}
									],
									"name": "RecoverError",
									"nameLocation": "381:12:12",
									"nodeType": "EnumDefinition",
									"src": "376:131:12"
								},
								{
									"documentation": {
										"id": 1659,
										"nodeType": "StructuredDocumentation",
										"src": "515:65:12",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1661,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "592:21:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "613:2:12"
									},
									"src": "586:30:12"
								},
								{
									"documentation": {
										"id": 1662,
										"nodeType": "StructuredDocumentation",
										"src": "624:62:12",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1666,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "698:27:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "734:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "726:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1663,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "726:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "725:16:12"
									},
									"src": "692:50:12"
								},
								{
									"documentation": {
										"id": 1667,
										"nodeType": "StructuredDocumentation",
										"src": "750:87:12",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1671,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "849:22:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "880:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "872:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1668,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "872:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "871:11:12"
									},
									"src": "843:40:12"
								},
								{
									"body": {
										"id": 1723,
										"nodeType": "Block",
										"src": "2297:670:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1686,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "2312:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1687,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2322:6:12",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2312:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1688,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2332:2:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2312:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1721,
													"nodeType": "Block",
													"src": "2850:110:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1710,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2881:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1709,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2873:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1708,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2873:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2873:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1712,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "2885:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1713,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2898:22:12",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1656,
																		"src": "2885:35:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1658",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1716,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1676,
																					"src": "2930:9:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1717,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2940:6:12",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2930:16:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1715,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2922:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1714,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2922:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1718,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2922:25:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1719,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2872:76:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1685,
															"id": 1720,
															"nodeType": "Return",
															"src": "2865:83:12"
														}
													]
												},
												"id": 1722,
												"nodeType": "IfStatement",
												"src": "2308:652:12",
												"trueBody": {
													"id": 1707,
													"nodeType": "Block",
													"src": "2336:508:12",
													"statements": [
														{
															"assignments": [
																1691
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1691,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2359:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1707,
																	"src": "2351:9:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1690,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2351:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1692,
															"nodeType": "VariableDeclarationStatement",
															"src": "2351:9:12"
														},
														{
															"assignments": [
																1694
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1694,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2383:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1707,
																	"src": "2375:9:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1693,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2375:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1695,
															"nodeType": "VariableDeclarationStatement",
															"src": "2375:9:12"
														},
														{
															"assignments": [
																1697
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1697,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2405:1:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 1707,
																	"src": "2399:7:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1696,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2399:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1698,
															"nodeType": "VariableDeclarationStatement",
															"src": "2399:7:12"
														},
														{
															"AST": {
																"nativeSrc": "2611:175:12",
																"nodeType": "YulBlock",
																"src": "2611:175:12",
																"statements": [
																	{
																		"nativeSrc": "2630:32:12",
																		"nodeType": "YulAssignment",
																		"src": "2630:32:12",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2645:9:12",
																							"nodeType": "YulIdentifier",
																							"src": "2645:9:12"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2656:4:12",
																							"nodeType": "YulLiteral",
																							"src": "2656:4:12",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2641:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "2641:3:12"
																					},
																					"nativeSrc": "2641:20:12",
																					"nodeType": "YulFunctionCall",
																					"src": "2641:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2635:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "2635:5:12"
																			},
																			"nativeSrc": "2635:27:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2635:27:12"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2630:1:12",
																				"nodeType": "YulIdentifier",
																				"src": "2630:1:12"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2680:32:12",
																		"nodeType": "YulAssignment",
																		"src": "2680:32:12",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2695:9:12",
																							"nodeType": "YulIdentifier",
																							"src": "2695:9:12"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2706:4:12",
																							"nodeType": "YulLiteral",
																							"src": "2706:4:12",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2691:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "2691:3:12"
																					},
																					"nativeSrc": "2691:20:12",
																					"nodeType": "YulFunctionCall",
																					"src": "2691:20:12"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2685:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "2685:5:12"
																			},
																			"nativeSrc": "2685:27:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2685:27:12"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2680:1:12",
																				"nodeType": "YulIdentifier",
																				"src": "2680:1:12"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2730:41:12",
																		"nodeType": "YulAssignment",
																		"src": "2730:41:12",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2740:1:12",
																					"nodeType": "YulLiteral",
																					"src": "2740:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2753:9:12",
																									"nodeType": "YulIdentifier",
																									"src": "2753:9:12"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2764:4:12",
																									"nodeType": "YulLiteral",
																									"src": "2764:4:12",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2749:3:12",
																								"nodeType": "YulIdentifier",
																								"src": "2749:3:12"
																							},
																							"nativeSrc": "2749:20:12",
																							"nodeType": "YulFunctionCall",
																							"src": "2749:20:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2743:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "2743:5:12"
																					},
																					"nativeSrc": "2743:27:12",
																					"nodeType": "YulFunctionCall",
																					"src": "2743:27:12"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2735:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "2735:4:12"
																			},
																			"nativeSrc": "2735:36:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2735:36:12"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2730:1:12",
																				"nodeType": "YulIdentifier",
																				"src": "2730:1:12"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 1691,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:1:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1694,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2680:1:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1676,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2645:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1676,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2695:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1676,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2753:9:12",
																	"valueSize": 1
																},
																{
																	"declaration": 1697,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2730:1:12",
																	"valueSize": 1
																}
															],
															"id": 1699,
															"nodeType": "InlineAssembly",
															"src": "2602:184:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1701,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1674,
																		"src": "2818:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1702,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1697,
																		"src": "2824:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1703,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1691,
																		"src": "2827:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1704,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1694,
																		"src": "2830:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1700,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1724,
																		1804,
																		1912
																	],
																	"referencedDeclaration": 1912,
																	"src": "2807:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1705,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2807:25:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1685,
															"id": 1706,
															"nodeType": "Return",
															"src": "2800:32:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "891:1287:12",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2193:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2212:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "2204:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1673,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2204:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2231:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "2218:22:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2218:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2203:38:12"
									},
									"returnParameters": {
										"id": 1685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "2265:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2265:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "2274:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1658",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1681,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1680,
														"name": "RecoverError",
														"nameLocations": [
															"2274:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1658,
														"src": "2274:12:12"
													},
													"referencedDeclaration": 1658,
													"src": "2274:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1658",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1724,
												"src": "2288:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1683,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2288:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2264:32:12"
									},
									"scope": 1998,
									"src": "2184:783:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1753,
										"nodeType": "Block",
										"src": "3877:172:12",
										"statements": [
											{
												"assignments": [
													1735,
													1738,
													1740
												],
												"declarations": [
													{
														"constant": false,
														"id": 1735,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3897:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "3889:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1734,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3889:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1738,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3921:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "3908:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1737,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1736,
																"name": "RecoverError",
																"nameLocations": [
																	"3908:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1658,
																"src": "3908:12:12"
															},
															"referencedDeclaration": 1658,
															"src": "3908:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1740,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3936:8:12",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "3928:16:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1739,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3928:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1745,
												"initialValue": {
													"arguments": [
														{
															"id": 1742,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1727,
															"src": "3959:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1743,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1729,
															"src": "3965:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1741,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1724,
															1804,
															1912
														],
														"referencedDeclaration": 1724,
														"src": "3948:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3948:27:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3888:87:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1747,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1738,
															"src": "3998:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1748,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1740,
															"src": "4005:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1746,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1997,
														"src": "3986:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1658_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3986:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1750,
												"nodeType": "ExpressionStatement",
												"src": "3986:28:12"
											},
											{
												"expression": {
													"id": 1751,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1735,
													"src": "4032:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1733,
												"id": 1752,
												"nodeType": "Return",
												"src": "4025:16:12"
											}
										]
									},
									"documentation": {
										"id": 1725,
										"nodeType": "StructuredDocumentation",
										"src": "2975:809:12",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3799:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3815:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "3807:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1726,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3807:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1729,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3834:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "3821:22:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3821:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3806:38:12"
									},
									"returnParameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "3868:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3868:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3867:9:12"
									},
									"scope": 1998,
									"src": "3790:259:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1803,
										"nodeType": "Block",
										"src": "4384:349:12",
										"statements": [
											{
												"id": 1802,
												"nodeType": "UncheckedBlock",
												"src": "4395:331:12",
												"statements": [
													{
														"assignments": [
															1772
														],
														"declarations": [
															{
																"constant": false,
																"id": 1772,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4428:1:12",
																"nodeType": "VariableDeclaration",
																"scope": 1802,
																"src": "4420:9:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1771,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4420:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1779,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1773,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1761,
																"src": "4432:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 1776,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4445:66:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 1775,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4437:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1774,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4437:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4437:75:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4432:80:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4420:92:12"
													},
													{
														"assignments": [
															1781
														],
														"declarations": [
															{
																"constant": false,
																"id": 1781,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4631:1:12",
																"nodeType": "VariableDeclaration",
																"scope": 1802,
																"src": "4625:7:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 1780,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4625:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1794,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1789,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 1786,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1761,
																							"src": "4650:2:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 1785,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4642:7:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1784,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4642:7:12",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1787,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4642:11:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 1788,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4657:3:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4642:18:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1790,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4641:20:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 1791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4664:2:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4641:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1783,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4635:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 1782,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4635:5:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4635:32:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4625:42:12"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1796,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "4700:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1797,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1781,
																	"src": "4706:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 1798,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1759,
																	"src": "4709:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1799,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1772,
																	"src": "4712:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1795,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1724,
																	1804,
																	1912
																],
																"referencedDeclaration": 1912,
																"src": "4689:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 1800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4689:25:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1770,
														"id": 1801,
														"nodeType": "Return",
														"src": "4682:32:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1755,
										"nodeType": "StructuredDocumentation",
										"src": "4057:209:12",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 1804,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4281:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4300:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4292:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1756,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4292:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4314:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4306:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1758,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4306:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4325:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4317:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1760,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4317:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4291:37:12"
									},
									"returnParameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4352:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4352:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4361:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1658",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1766,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1765,
														"name": "RecoverError",
														"nameLocations": [
															"4361:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1658,
														"src": "4361:12:12"
													},
													"referencedDeclaration": 1658,
													"src": "4361:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1658",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "4375:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1768,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4375:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4351:32:12"
									},
									"scope": 1998,
									"src": "4272:461:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1836,
										"nodeType": "Block",
										"src": "4951:168:12",
										"statements": [
											{
												"assignments": [
													1817,
													1820,
													1822
												],
												"declarations": [
													{
														"constant": false,
														"id": 1817,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4971:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1836,
														"src": "4963:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1816,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4963:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1820,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4995:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1836,
														"src": "4982:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1819,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1818,
																"name": "RecoverError",
																"nameLocations": [
																	"4982:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1658,
																"src": "4982:12:12"
															},
															"referencedDeclaration": 1658,
															"src": "4982:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1822,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "5010:8:12",
														"nodeType": "VariableDeclaration",
														"scope": 1836,
														"src": "5002:16:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1821,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5002:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1828,
												"initialValue": {
													"arguments": [
														{
															"id": 1824,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1807,
															"src": "5033:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1825,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1809,
															"src": "5039:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1826,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1811,
															"src": "5042:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1823,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1724,
															1804,
															1912
														],
														"referencedDeclaration": 1804,
														"src": "5022:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5022:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4962:83:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1830,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1820,
															"src": "5068:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1831,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1822,
															"src": "5075:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1829,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1997,
														"src": "5056:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1658_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5056:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1833,
												"nodeType": "ExpressionStatement",
												"src": "5056:28:12"
											},
											{
												"expression": {
													"id": 1834,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1817,
													"src": "5102:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1815,
												"id": 1835,
												"nodeType": "Return",
												"src": "5095:16:12"
											}
										]
									},
									"documentation": {
										"id": 1805,
										"nodeType": "StructuredDocumentation",
										"src": "4741:118:12",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 1837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4874:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4890:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "4882:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1806,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4882:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4904:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "4896:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1808,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4896:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4915:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "4907:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1810,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4907:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4881:37:12"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "4942:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4942:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4941:9:12"
									},
									"scope": 1998,
									"src": "4865:254:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1911,
										"nodeType": "Block",
										"src": "5424:1393:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1858,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1846,
																"src": "6330:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6322:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1856,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6322:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6322:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1860,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6335:66:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6322:79:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1872,
												"nodeType": "IfStatement",
												"src": "6318:166:12",
												"trueBody": {
													"id": 1871,
													"nodeType": "Block",
													"src": "6403:81:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1864,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6434:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6426:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1862,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6426:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1865,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6426:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1866,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "6438:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1867,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6451:17:12",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1657,
																		"src": "6438:30:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1658",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 1868,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1846,
																		"src": "6470:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1869,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6425:47:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1855,
															"id": 1870,
															"nodeType": "Return",
															"src": "6418:54:12"
														}
													]
												}
											},
											{
												"assignments": [
													1874
												],
												"declarations": [
													{
														"constant": false,
														"id": 1874,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6589:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1911,
														"src": "6581:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1873,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6581:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1881,
												"initialValue": {
													"arguments": [
														{
															"id": 1876,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1840,
															"src": "6608:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1877,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1842,
															"src": "6614:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1878,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1844,
															"src": "6617:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1879,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1846,
															"src": "6620:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1875,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6598:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6598:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6581:41:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1882,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1874,
														"src": "6637:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6655:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1884,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6647:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1883,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6647:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 1886,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6647:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6637:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1901,
												"nodeType": "IfStatement",
												"src": "6633:115:12",
												"trueBody": {
													"id": 1900,
													"nodeType": "Block",
													"src": "6659:89:12",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1890,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6690:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1889,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6682:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1888,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6682:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6682:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1892,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "6694:12:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1893,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6707:16:12",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1655,
																		"src": "6694:29:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1658",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1896,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6733:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6725:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1894,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6725:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6725:10:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1898,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6681:55:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1855,
															"id": 1899,
															"nodeType": "Return",
															"src": "6674:62:12"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1902,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1874,
															"src": "6768:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1903,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1658,
																"src": "6776:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1904,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6789:7:12",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1654,
															"src": "6776:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1907,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6806:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1906,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6798:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1905,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6798:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1908,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6798:10:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 1909,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6767:42:12",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 1855,
												"id": 1910,
												"nodeType": "Return",
												"src": "6760:49:12"
											}
										]
									},
									"documentation": {
										"id": 1838,
										"nodeType": "StructuredDocumentation",
										"src": "5127:128:12",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5270:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5299:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5291:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1839,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5291:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5320:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5314:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1841,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5314:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5340:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5332:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1843,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5332:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1846,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5360:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5352:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1845,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5352:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5280:88:12"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5392:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5392:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5401:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1658",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1851,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1850,
														"name": "RecoverError",
														"nameLocations": [
															"5401:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1658,
														"src": "5401:12:12"
													},
													"referencedDeclaration": 1658,
													"src": "5401:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1658",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "5415:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1853,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5415:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5391:32:12"
									},
									"scope": 1998,
									"src": "5261:1556:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1947,
										"nodeType": "Block",
										"src": "7050:170:12",
										"statements": [
											{
												"assignments": [
													1927,
													1930,
													1932
												],
												"declarations": [
													{
														"constant": false,
														"id": 1927,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "7070:9:12",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "7062:17:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1926,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7062:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1930,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "7094:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "7081:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1929,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1928,
																"name": "RecoverError",
																"nameLocations": [
																	"7081:12:12"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1658,
																"src": "7081:12:12"
															},
															"referencedDeclaration": 1658,
															"src": "7081:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1932,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "7109:8:12",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "7101:16:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1931,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7101:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1939,
												"initialValue": {
													"arguments": [
														{
															"id": 1934,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1915,
															"src": "7132:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1935,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1917,
															"src": "7138:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1936,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1919,
															"src": "7141:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1937,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1921,
															"src": "7144:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1933,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1724,
															1804,
															1912
														],
														"referencedDeclaration": 1912,
														"src": "7121:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1658_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7061:85:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1941,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1930,
															"src": "7169:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1942,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "7176:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1940,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1997,
														"src": "7157:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1658_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7157:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1944,
												"nodeType": "ExpressionStatement",
												"src": "7157:28:12"
											},
											{
												"expression": {
													"id": 1945,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1927,
													"src": "7203:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1925,
												"id": 1946,
												"nodeType": "Return",
												"src": "7196:16:12"
											}
										]
									},
									"documentation": {
										"id": 1913,
										"nodeType": "StructuredDocumentation",
										"src": "6825:125:12",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1948,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6965:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6981:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "6973:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1914,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6973:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6993:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "6987:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1916,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6987:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "7004:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "6996:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1918,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6996:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7015:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "7007:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1920,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7007:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6972:45:12"
									},
									"returnParameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1924,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "7041:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7041:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7040:9:12"
									},
									"scope": 1998,
									"src": "6956:264:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1996,
										"nodeType": "Block",
										"src": "7430:470:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1658",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1957,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1952,
														"src": "7445:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1958,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1658,
															"src": "7454:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7467:7:12",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1654,
														"src": "7454:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7445:29:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1658",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1966,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1963,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1952,
															"src": "7543:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1964,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1658,
																"src": "7552:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1965,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7565:16:12",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1655,
															"src": "7552:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7543:38:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1658",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1974,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1971,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1952,
																"src": "7650:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1658",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1972,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1658,
																	"src": "7659:12:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1973,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7672:22:12",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1656,
																"src": "7659:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1658",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7650:44:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1658",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1986,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1983,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1952,
																	"src": "7786:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1658",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1984,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1658,
																		"src": "7795:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1658_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7808:17:12",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1657,
																	"src": "7795:30:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1658",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7786:39:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1992,
															"nodeType": "IfStatement",
															"src": "7782:111:12",
															"trueBody": {
																"id": 1991,
																"nodeType": "Block",
																"src": "7827:66:12",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1988,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1954,
																					"src": "7872:8:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1987,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1671,
																				"src": "7849:22:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$__$",
																					"typeString": "function (bytes32) pure"
																				}
																			},
																			"id": 1989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7849:32:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1990,
																		"nodeType": "RevertStatement",
																		"src": "7842:39:12"
																	}
																]
															}
														},
														"id": 1993,
														"nodeType": "IfStatement",
														"src": "7646:247:12",
														"trueBody": {
															"id": 1982,
															"nodeType": "Block",
															"src": "7696:80:12",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1978,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1954,
																						"src": "7754:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 1977,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7746:7:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1976,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7746:7:12",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1979,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7746:17:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1975,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1666,
																			"src": "7718:27:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																				"typeString": "function (uint256) pure"
																			}
																		},
																		"id": 1980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7718:46:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1981,
																	"nodeType": "RevertStatement",
																	"src": "7711:53:12"
																}
															]
														}
													},
													"id": 1994,
													"nodeType": "IfStatement",
													"src": "7539:354:12",
													"trueBody": {
														"id": 1970,
														"nodeType": "Block",
														"src": "7583:57:12",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1967,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1661,
																		"src": "7605:21:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7605:23:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1969,
																"nodeType": "RevertStatement",
																"src": "7598:30:12"
															}
														]
													}
												},
												"id": 1995,
												"nodeType": "IfStatement",
												"src": "7441:452:12",
												"trueBody": {
													"id": 1962,
													"nodeType": "Block",
													"src": "7476:57:12",
													"statements": [
														{
															"functionReturnParameters": 1956,
															"id": 1961,
															"nodeType": "Return",
															"src": "7491:7:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1949,
										"nodeType": "StructuredDocumentation",
										"src": "7228:124:12",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 1997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7367:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1952,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7392:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "7379:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1658",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1951,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1950,
														"name": "RecoverError",
														"nameLocations": [
															"7379:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1658,
														"src": "7379:12:12"
													},
													"referencedDeclaration": 1658,
													"src": "7379:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1658",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1954,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7407:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "7399:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1953,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7399:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7378:38:12"
									},
									"returnParameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7430:0:12"
									},
									"scope": 1998,
									"src": "7358:542:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1999,
							"src": "355:7548:12",
							"usedErrors": [
								1661,
								1666,
								1671
							],
							"usedEvents": []
						}
					],
					"src": "115:7790:12"
				},
				"id": 12
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2225
						],
						"IERC5267": [
							24
						],
						"MessageHashUtils": [
							2299
						],
						"ShortString": [
							1074
						],
						"ShortStrings": [
							1285
						]
					},
					"id": 2226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2000,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "116:24:13"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2002,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2226,
							"sourceUnit": 2300,
							"src": "144:56:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2001,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2299,
										"src": "152:16:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2005,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2226,
							"sourceUnit": 1286,
							"src": "202:62:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2003,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1285,
										"src": "210:12:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2004,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1074,
										"src": "224:11:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2007,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2226,
							"sourceUnit": 25,
							"src": "266:55:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2006,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 24,
										"src": "274:8:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2009,
										"name": "IERC5267",
										"nameLocations": [
											"2021:8:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 24,
										"src": "2021:8:13"
									},
									"id": 2010,
									"nodeType": "InheritanceSpecifier",
									"src": "2021:8:13"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2008,
								"nodeType": "StructuredDocumentation",
								"src": "325:1666:13",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2225,
							"linearizedBaseContracts": [
								2225,
								24
							],
							"name": "EIP712",
							"nameLocation": "2011:6:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2012,
									"libraryName": {
										"id": 2011,
										"name": "ShortStrings",
										"nameLocations": [
											"2043:12:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1285,
										"src": "2043:12:13"
									},
									"nodeType": "UsingForDirective",
									"src": "2037:25:13"
								},
								{
									"constant": true,
									"id": 2017,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2095:9:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2070:141:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2013,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2070:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2015,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2126:84:13",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2014,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2116:9:13",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2016,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2116:95:13",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2019,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2440:22:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2414:48:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2018,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2414:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2021,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2495:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2469:40:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2020,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2469:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2023,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2542:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2516:37:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2022,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2516:7:13",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2025,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2588:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2562:37:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2024,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2562:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2027,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2632:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2606:40:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2026,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2606:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2030,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2685:5:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2655:35:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2029,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2028,
											"name": "ShortString",
											"nameLocations": [
												"2655:11:13"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1074,
											"src": "2655:11:13"
										},
										"referencedDeclaration": 1074,
										"src": "2655:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2033,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2727:8:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2697:38:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2032,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2031,
											"name": "ShortString",
											"nameLocations": [
												"2697:11:13"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1074,
											"src": "2697:11:13"
										},
										"referencedDeclaration": 1074,
										"src": "2697:11:13",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2035,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2757:13:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2742:28:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2034,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2742:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2037,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2792:16:13",
									"nodeType": "VariableDeclaration",
									"scope": 2225,
									"src": "2777:31:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2036,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2777:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2094,
										"nodeType": "Block",
										"src": "3448:385:13",
										"statements": [
											{
												"expression": {
													"id": 2050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2045,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "3459:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2048,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2035,
																"src": "3498:13:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2046,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2040,
																"src": "3467:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3472:25:13",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1226,
															"src": "3467:30:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1074_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:45:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
															"typeString": "ShortString"
														}
													},
													"src": "3459:53:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"id": 2051,
												"nodeType": "ExpressionStatement",
												"src": "3459:53:13"
											},
											{
												"expression": {
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2052,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2033,
														"src": "3523:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2055,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2037,
																"src": "3568:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2053,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2042,
																"src": "3534:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3542:25:13",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1226,
															"src": "3534:33:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1074_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2056,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3534:51:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
															"typeString": "ShortString"
														}
													},
													"src": "3523:62:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
														"typeString": "ShortString"
													}
												},
												"id": 2058,
												"nodeType": "ExpressionStatement",
												"src": "3523:62:13"
											},
											{
												"expression": {
													"id": 2066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2059,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2025,
														"src": "3596:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2063,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2040,
																		"src": "3626:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3620:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2061,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3620:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2064,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3620:11:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2060,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3610:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3610:22:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3596:36:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2067,
												"nodeType": "ExpressionStatement",
												"src": "3596:36:13"
											},
											{
												"expression": {
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2068,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2027,
														"src": "3643:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2072,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2042,
																		"src": "3676:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2071,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3670:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2070,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3670:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2073,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3670:14:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2069,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3660:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2074,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3660:25:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3643:42:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2076,
												"nodeType": "ExpressionStatement",
												"src": "3643:42:13"
											},
											{
												"expression": {
													"id": 2080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2077,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2021,
														"src": "3698:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2078,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3715:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2079,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3721:7:13",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3715:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3698:30:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2081,
												"nodeType": "ExpressionStatement",
												"src": "3698:30:13"
											},
											{
												"expression": {
													"id": 2085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2082,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2019,
														"src": "3739:22:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2083,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2142,
															"src": "3764:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2084,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3764:23:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3739:48:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2086,
												"nodeType": "ExpressionStatement",
												"src": "3739:48:13"
											},
											{
												"expression": {
													"id": 2092,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2087,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2023,
														"src": "3798:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2090,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3820:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2225",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2225",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3812:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2088,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3812:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 2091,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3812:13:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3798:27:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2093,
												"nodeType": "ExpressionStatement",
												"src": "3798:27:13"
											}
										]
									},
									"documentation": {
										"id": 2038,
										"nodeType": "StructuredDocumentation",
										"src": "2817:570:13",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2095,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3419:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "3405:18:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2039,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3405:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2042,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3439:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "3425:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2041,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3425:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3404:43:13"
									},
									"returnParameters": {
										"id": 2044,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3448:0:13"
									},
									"scope": 2225,
									"src": "3393:440:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2120,
										"nodeType": "Block",
										"src": "3986:206:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2103,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4009:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2225",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2225",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2102,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4001:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2101,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4001:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2104,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4001:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2105,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2023,
															"src": "4018:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "4001:28:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2107,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4033:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4039:7:13",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "4033:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2109,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "4050:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4033:31:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4001:63:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2118,
													"nodeType": "Block",
													"src": "4128:57:13",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2115,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2142,
																	"src": "4150:21:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2116,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4150:23:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2100,
															"id": 2117,
															"nodeType": "Return",
															"src": "4143:30:13"
														}
													]
												},
												"id": 2119,
												"nodeType": "IfStatement",
												"src": "3997:188:13",
												"trueBody": {
													"id": 2114,
													"nodeType": "Block",
													"src": "4066:56:13",
													"statements": [
														{
															"expression": {
																"id": 2112,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2019,
																"src": "4088:22:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2100,
															"id": 2113,
															"nodeType": "Return",
															"src": "4081:29:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2096,
										"nodeType": "StructuredDocumentation",
										"src": "3841:77:13",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3933:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3951:2:13"
									},
									"returnParameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2121,
												"src": "3977:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2098,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3977:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3976:9:13"
									},
									"scope": 2225,
									"src": "3924:268:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2141,
										"nodeType": "Block",
										"src": "4264:117:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2129,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2017,
																	"src": "4303:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2130,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2025,
																	"src": "4314:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2131,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2027,
																	"src": "4327:14:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2132,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4343:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4349:7:13",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4343:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2136,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4366:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2225",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2225",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4358:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2134,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4358:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2137,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4358:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2127,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4292:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2128,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4296:6:13",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4292:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4292:80:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2126,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4282:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4282:91:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2125,
												"id": 2140,
												"nodeType": "Return",
												"src": "4275:98:13"
											}
										]
									},
									"id": 2142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4209:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4230:2:13"
									},
									"returnParameters": {
										"id": 2125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "4255:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2123,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4255:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4254:9:13"
									},
									"scope": 2225,
									"src": "4200:181:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2157,
										"nodeType": "Block",
										"src": "5109:92:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2152,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2121,
																"src": "5160:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5160:20:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2154,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2145,
															"src": "5182:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2150,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2299,
															"src": "5127:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2299_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5144:15:13",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2298,
														"src": "5127:32:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5127:66:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2149,
												"id": 2156,
												"nodeType": "Return",
												"src": "5120:73:13"
											}
										]
									},
									"documentation": {
										"id": 2143,
										"nodeType": "StructuredDocumentation",
										"src": "4389:628:13",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "5032:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "5057:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "5049:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2144,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5049:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5048:20:13"
									},
									"returnParameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2158,
												"src": "5100:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2147,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5100:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5099:9:13"
									},
									"scope": 2225,
									"src": "5023:178:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										23
									],
									"body": {
										"id": 2199,
										"nodeType": "Block",
										"src": "5598:239:13",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2177,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5631:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2178,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2212,
																"src": "5662:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5662:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2180,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2224,
																"src": "5690:14:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5690:16:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2182,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5721:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5727:7:13",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5721:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2186,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5757:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2225",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2225",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5749:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2184,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5749:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5749:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5785:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5777:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2188,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5777:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5777:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5816:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2194,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5802:13:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2192,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5806:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2193,
																	"nodeType": "ArrayTypeName",
																	"src": "5806:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2196,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5802:16:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2197,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5616:213:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2176,
												"id": 2198,
												"nodeType": "Return",
												"src": "5609:220:13"
											}
										]
									},
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "5209:42:13",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5266:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5278:2:13"
									},
									"returnParameters": {
										"id": 2176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2162,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5367:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5360:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2161,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5360:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2164,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5402:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5388:18:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2163,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5388:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5435:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5421:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2165,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5421:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5465:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5457:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5457:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2170,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5495:17:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5487:25:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5487:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2172,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5535:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5527:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2171,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5527:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2175,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5571:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 2200,
												"src": "5554:27:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2173,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5554:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2174,
													"nodeType": "ArrayTypeName",
													"src": "5554:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5345:247:13"
									},
									"scope": 2225,
									"src": "5257:580:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2211,
										"nodeType": "Block",
										"src": "6227:67:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2208,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2035,
															"src": "6272:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2206,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "6245:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																"typeString": "ShortString"
															}
														},
														"id": 2207,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6251:20:13",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1253,
														"src": "6245:26:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1074_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1074_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6245:41:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2205,
												"id": 2210,
												"nodeType": "Return",
												"src": "6238:48:13"
											}
										]
									},
									"documentation": {
										"id": 2201,
										"nodeType": "StructuredDocumentation",
										"src": "5845:261:13",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6175:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6186:2:13"
									},
									"returnParameters": {
										"id": 2205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2212,
												"src": "6212:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2203,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6212:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6211:15:13"
									},
									"scope": 2225,
									"src": "6166:128:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2223,
										"nodeType": "Block",
										"src": "6693:73:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2220,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2037,
															"src": "6741:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2218,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2033,
															"src": "6711:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1074",
																"typeString": "ShortString"
															}
														},
														"id": 2219,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6720:20:13",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1253,
														"src": "6711:29:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1074_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1074_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6711:47:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2217,
												"id": 2222,
												"nodeType": "Return",
												"src": "6704:54:13"
											}
										]
									},
									"documentation": {
										"id": 2213,
										"nodeType": "StructuredDocumentation",
										"src": "6302:267:13",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6638:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6652:2:13"
									},
									"returnParameters": {
										"id": 2217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2224,
												"src": "6678:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2215,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6678:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6677:15:13"
									},
									"scope": 2225,
									"src": "6629:137:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2226,
							"src": "1993:4776:13",
							"usedErrors": [
								1082,
								1084
							],
							"usedEvents": [
								4
							]
						}
					],
					"src": "116:6655:13"
				},
				"id": 13
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2299
						],
						"Strings": [
							1650
						]
					},
					"id": 2300,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2227,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "126:24:14"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2300,
							"sourceUnit": 1651,
							"src": "154:39:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2228,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1650,
										"src": "162:7:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2230,
								"nodeType": "StructuredDocumentation",
								"src": "197:336:14",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2299,
							"linearizedBaseContracts": [
								2299
							],
							"name": "MessageHashUtils",
							"nameLocation": "543:16:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2239,
										"nodeType": "Block",
										"src": "1343:375:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1407:304:14",
													"nodeType": "YulBlock",
													"src": "1407:304:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1429:4:14",
																		"nodeType": "YulLiteral",
																		"src": "1429:4:14",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1435:34:14",
																		"nodeType": "YulLiteral",
																		"src": "1435:34:14",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1422:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:14"
																},
																"nativeSrc": "1422:48:14",
																"nodeType": "YulFunctionCall",
																"src": "1422:48:14"
															},
															"nativeSrc": "1422:48:14",
															"nodeType": "YulExpressionStatement",
															"src": "1422:48:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1532:4:14",
																		"nodeType": "YulLiteral",
																		"src": "1532:4:14",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1538:11:14",
																		"nodeType": "YulIdentifier",
																		"src": "1538:11:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1525:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "1525:6:14"
																},
																"nativeSrc": "1525:25:14",
																"nodeType": "YulFunctionCall",
																"src": "1525:25:14"
															},
															"nativeSrc": "1525:25:14",
															"nodeType": "YulExpressionStatement",
															"src": "1525:25:14"
														},
														{
															"nativeSrc": "1605:31:14",
															"nodeType": "YulAssignment",
															"src": "1605:31:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1625:4:14",
																		"nodeType": "YulLiteral",
																		"src": "1625:4:14",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1631:4:14",
																		"nodeType": "YulLiteral",
																		"src": "1631:4:14",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1615:9:14",
																	"nodeType": "YulIdentifier",
																	"src": "1615:9:14"
																},
																"nativeSrc": "1615:21:14",
																"nodeType": "YulFunctionCall",
																"src": "1615:21:14"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1605:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "1605:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2236,
														"isOffset": false,
														"isSlot": false,
														"src": "1605:6:14",
														"valueSize": 1
													},
													{
														"declaration": 2233,
														"isOffset": false,
														"isSlot": false,
														"src": "1538:11:14",
														"valueSize": 1
													}
												],
												"id": 2238,
												"nodeType": "InlineAssembly",
												"src": "1398:313:14"
											}
										]
									},
									"documentation": {
										"id": 2231,
										"nodeType": "StructuredDocumentation",
										"src": "567:678:14",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1260:22:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1291:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 2240,
												"src": "1283:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2232,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1283:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1282:21:14"
									},
									"returnParameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1335:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2240,
												"src": "1327:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2235,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1327:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1326:16:14"
									},
									"scope": 2299,
									"src": "1251:467:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2265,
										"nodeType": "Block",
										"src": "2282:146:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2336:32:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2257,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2243,
																						"src": "2393:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2258,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2401:6:14",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2393:14:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2255,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1650,
																					"src": "2376:7:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1650_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2384:8:14",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1463,
																				"src": "2376:16:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2376:32:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2254,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2370:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2253,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2370:5:14",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2370:39:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2261,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2243,
																	"src": "2411:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2323:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2249,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2323:5:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2251,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2329:6:14",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2323:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2323:96:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2248,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2313:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2313:107:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2247,
												"id": 2264,
												"nodeType": "Return",
												"src": "2293:127:14"
											}
										]
									},
									"documentation": {
										"id": 2241,
										"nodeType": "StructuredDocumentation",
										"src": "1726:464:14",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2205:22:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2243,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2241:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "2228:20:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2242,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2228:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2227:22:14"
									},
									"returnParameters": {
										"id": 2247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "2273:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2245,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2273:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2272:9:14"
									},
									"scope": 2299,
									"src": "2196:232:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2285,
										"nodeType": "Block",
										"src": "2893:82:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2938:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2280,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2269,
																	"src": "2950:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2281,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2271,
																	"src": "2961:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2277,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2921:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2278,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2925:12:14",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2921:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2282,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2921:45:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2276,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2911:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2911:56:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2275,
												"id": 2284,
												"nodeType": "Return",
												"src": "2904:63:14"
											}
										]
									},
									"documentation": {
										"id": 2267,
										"nodeType": "StructuredDocumentation",
										"src": "2436:340:14",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2791:31:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2831:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2286,
												"src": "2823:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2823:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2271,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2855:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2286,
												"src": "2842:17:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2270,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2842:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2822:38:14"
									},
									"returnParameters": {
										"id": 2275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2286,
												"src": "2884:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2273,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2884:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2883:9:14"
									},
									"scope": 2299,
									"src": "2782:193:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2297,
										"nodeType": "Block",
										"src": "3537:301:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3601:230:14",
													"nodeType": "YulBlock",
													"src": "3601:230:14",
													"statements": [
														{
															"nativeSrc": "3616:22:14",
															"nodeType": "YulVariableDeclaration",
															"src": "3616:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3633:4:14",
																		"nodeType": "YulLiteral",
																		"src": "3633:4:14",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3627:5:14",
																	"nodeType": "YulIdentifier",
																	"src": "3627:5:14"
																},
																"nativeSrc": "3627:11:14",
																"nodeType": "YulFunctionCall",
																"src": "3627:11:14"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3620:3:14",
																	"nodeType": "YulTypedName",
																	"src": "3620:3:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3659:3:14",
																		"nodeType": "YulIdentifier",
																		"src": "3659:3:14"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3664:10:14",
																		"nodeType": "YulLiteral",
																		"src": "3664:10:14",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3652:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3652:6:14"
																},
																"nativeSrc": "3652:23:14",
																"nodeType": "YulFunctionCall",
																"src": "3652:23:14"
															},
															"nativeSrc": "3652:23:14",
															"nodeType": "YulExpressionStatement",
															"src": "3652:23:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3700:3:14",
																				"nodeType": "YulIdentifier",
																				"src": "3700:3:14"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3705:4:14",
																				"nodeType": "YulLiteral",
																				"src": "3705:4:14",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3696:3:14",
																			"nodeType": "YulIdentifier",
																			"src": "3696:3:14"
																		},
																		"nativeSrc": "3696:14:14",
																		"nodeType": "YulFunctionCall",
																		"src": "3696:14:14"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3712:15:14",
																		"nodeType": "YulIdentifier",
																		"src": "3712:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3689:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3689:6:14"
																},
																"nativeSrc": "3689:39:14",
																"nodeType": "YulFunctionCall",
																"src": "3689:39:14"
															},
															"nativeSrc": "3689:39:14",
															"nodeType": "YulExpressionStatement",
															"src": "3689:39:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3753:3:14",
																				"nodeType": "YulIdentifier",
																				"src": "3753:3:14"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3758:4:14",
																				"nodeType": "YulLiteral",
																				"src": "3758:4:14",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3749:3:14",
																			"nodeType": "YulIdentifier",
																			"src": "3749:3:14"
																		},
																		"nativeSrc": "3749:14:14",
																		"nodeType": "YulFunctionCall",
																		"src": "3749:14:14"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3765:10:14",
																		"nodeType": "YulIdentifier",
																		"src": "3765:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3742:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3742:6:14"
																},
																"nativeSrc": "3742:34:14",
																"nodeType": "YulFunctionCall",
																"src": "3742:34:14"
															},
															"nativeSrc": "3742:34:14",
															"nodeType": "YulExpressionStatement",
															"src": "3742:34:14"
														},
														{
															"nativeSrc": "3790:30:14",
															"nodeType": "YulAssignment",
															"src": "3790:30:14",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3810:3:14",
																		"nodeType": "YulIdentifier",
																		"src": "3810:3:14"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3815:4:14",
																		"nodeType": "YulLiteral",
																		"src": "3815:4:14",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3800:9:14",
																	"nodeType": "YulIdentifier",
																	"src": "3800:9:14"
																},
																"nativeSrc": "3800:20:14",
																"nodeType": "YulFunctionCall",
																"src": "3800:20:14"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3790:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3790:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2294,
														"isOffset": false,
														"isSlot": false,
														"src": "3790:6:14",
														"valueSize": 1
													},
													{
														"declaration": 2289,
														"isOffset": false,
														"isSlot": false,
														"src": "3712:15:14",
														"valueSize": 1
													},
													{
														"declaration": 2291,
														"isOffset": false,
														"isSlot": false,
														"src": "3765:10:14",
														"valueSize": 1
													}
												],
												"id": 2296,
												"nodeType": "InlineAssembly",
												"src": "3592:239:14"
											}
										]
									},
									"documentation": {
										"id": 2287,
										"nodeType": "StructuredDocumentation",
										"src": "2983:439:14",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2298,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3437:15:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3461:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "3453:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2288,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3486:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "3478:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2290,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3452:45:14"
									},
									"returnParameters": {
										"id": 2295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2294,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3529:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "3521:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2293,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3521:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3520:16:14"
									},
									"scope": 2299,
									"src": "3428:410:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2300,
							"src": "535:3306:14",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "126:3717:14"
				},
				"id": 14
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3353
						]
					},
					"id": 3354,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2301,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2302,
								"nodeType": "StructuredDocumentation",
								"src": "134:75:15",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3353,
							"linearizedBaseContracts": [
								3353
							],
							"name": "Math",
							"nameLocation": "219:4:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2303,
										"nodeType": "StructuredDocumentation",
										"src": "231:52:15",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2305,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "295:20:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "315:2:15"
									},
									"src": "289:29:15"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2310,
									"members": [
										{
											"id": 2306,
											"name": "Floor",
											"nameLocation": "351:5:15",
											"nodeType": "EnumValue",
											"src": "351:5:15"
										},
										{
											"id": 2307,
											"name": "Ceil",
											"nameLocation": "395:4:15",
											"nodeType": "EnumValue",
											"src": "395:4:15"
										},
										{
											"id": 2308,
											"name": "Trunc",
											"nameLocation": "438:5:15",
											"nodeType": "EnumValue",
											"src": "438:5:15"
										},
										{
											"id": 2309,
											"name": "Expand",
											"nameLocation": "469:6:15",
											"nodeType": "EnumValue",
											"src": "469:6:15"
										}
									],
									"name": "Rounding",
									"nameLocation": "331:8:15",
									"nodeType": "EnumDefinition",
									"src": "326:174:15"
								},
								{
									"body": {
										"id": 2341,
										"nodeType": "Block",
										"src": "685:146:15",
										"statements": [
											{
												"id": 2340,
												"nodeType": "UncheckedBlock",
												"src": "696:128:15",
												"statements": [
													{
														"assignments": [
															2323
														],
														"declarations": [
															{
																"constant": false,
																"id": 2323,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "729:1:15",
																"nodeType": "VariableDeclaration",
																"scope": 2340,
																"src": "721:9:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2322,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "721:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2327,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2324,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2313,
																"src": "733:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2325,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2315,
																"src": "737:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "733:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "721:17:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2328,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2323,
																"src": "757:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2329,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2313,
																"src": "761:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "757:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2335,
														"nodeType": "IfStatement",
														"src": "753:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "772:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "779:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2333,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "771:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2321,
															"id": 2334,
															"nodeType": "Return",
															"src": "764:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "804:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2337,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2323,
																	"src": "810:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2338,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "803:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2321,
														"id": 2339,
														"nodeType": "Return",
														"src": "796:16:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2311,
										"nodeType": "StructuredDocumentation",
										"src": "508:95:15",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "618:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2313,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "633:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "625:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2315,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "644:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "636:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "624:22:15"
									},
									"returnParameters": {
										"id": 2321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "670:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2317,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "670:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "676:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "676:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:15:15"
									},
									"scope": 3353,
									"src": "609:222:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2369,
										"nodeType": "Block",
										"src": "1019:118:15",
										"statements": [
											{
												"id": 2368,
												"nodeType": "UncheckedBlock",
												"src": "1030:100:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2354,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2347,
																"src": "1059:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2355,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2345,
																"src": "1063:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1059:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2361,
														"nodeType": "IfStatement",
														"src": "1055:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1074:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1081:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2359,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1073:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2353,
															"id": 2360,
															"nodeType": "Return",
															"src": "1066:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1106:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2363,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2345,
																		"src": "1112:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2364,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2347,
																		"src": "1116:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1112:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2366,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1105:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2353,
														"id": 2367,
														"nodeType": "Return",
														"src": "1098:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2343,
										"nodeType": "StructuredDocumentation",
										"src": "839:98:15",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "952:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2345,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "967:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2370,
												"src": "959:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2347,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "978:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2370,
												"src": "970:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:22:15"
									},
									"returnParameters": {
										"id": 2353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2350,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2370,
												"src": "1004:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2349,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1004:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2370,
												"src": "1010:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:15:15"
									},
									"scope": 3353,
									"src": "943:194:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2411,
										"nodeType": "Block",
										"src": "1328:427:15",
										"statements": [
											{
												"id": 2410,
												"nodeType": "UncheckedBlock",
												"src": "1339:409:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2382,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2373,
																"src": "1601:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2383,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1606:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1601:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2389,
														"nodeType": "IfStatement",
														"src": "1597:28:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2385,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1617:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1623:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2387,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1616:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2381,
															"id": 2388,
															"nodeType": "Return",
															"src": "1609:16:15"
														}
													},
													{
														"assignments": [
															2391
														],
														"declarations": [
															{
																"constant": false,
																"id": 2391,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1648:1:15",
																"nodeType": "VariableDeclaration",
																"scope": 2410,
																"src": "1640:9:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2390,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1640:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2395,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2392,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2373,
																"src": "1652:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2393,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2375,
																"src": "1656:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1652:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1640:17:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2396,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2391,
																	"src": "1676:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2397,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2373,
																	"src": "1680:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1676:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2399,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2375,
																"src": "1685:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1676:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2405,
														"nodeType": "IfStatement",
														"src": "1672:33:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1696:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1703:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2403,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1695:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2381,
															"id": 2404,
															"nodeType": "Return",
															"src": "1688:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1728:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2407,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2391,
																	"src": "1734:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2408,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1727:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2381,
														"id": 2409,
														"nodeType": "Return",
														"src": "1720:16:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2371,
										"nodeType": "StructuredDocumentation",
										"src": "1145:101:15",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1261:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1276:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "1268:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1268:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1287:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "1279:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:22:15"
									},
									"returnParameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "1313:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2377,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1313:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2412,
												"src": "1319:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1319:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1312:15:15"
									},
									"scope": 3353,
									"src": "1252:503:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2439,
										"nodeType": "Block",
										"src": "1947:119:15",
										"statements": [
											{
												"id": 2438,
												"nodeType": "UncheckedBlock",
												"src": "1958:101:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2424,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2417,
																"src": "1987:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2425,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1992:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1987:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2431,
														"nodeType": "IfStatement",
														"src": "1983:29:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2003:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2428,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2010:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2429,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2002:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2423,
															"id": 2430,
															"nodeType": "Return",
															"src": "1995:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2035:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2433,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2415,
																		"src": "2041:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2434,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2417,
																		"src": "2045:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2041:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2436,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2034:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2423,
														"id": 2437,
														"nodeType": "Return",
														"src": "2027:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2413,
										"nodeType": "StructuredDocumentation",
										"src": "1763:102:15",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1880:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2415,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1895:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1887:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2417,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1906:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1898:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1898:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1886:22:15"
									},
									"returnParameters": {
										"id": 2423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1932:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2419,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1932:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "1938:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1938:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1931:15:15"
									},
									"scope": 3353,
									"src": "1871:195:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2467,
										"nodeType": "Block",
										"src": "2268:119:15",
										"statements": [
											{
												"id": 2466,
												"nodeType": "UncheckedBlock",
												"src": "2279:101:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2452,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2445,
																"src": "2308:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2453,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2313:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2308:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2459,
														"nodeType": "IfStatement",
														"src": "2304:29:15",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2324:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2331:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2457,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2323:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2451,
															"id": 2458,
															"nodeType": "Return",
															"src": "2316:17:15"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2356:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2461,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2443,
																		"src": "2362:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2462,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2445,
																		"src": "2366:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2362:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2464,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2355:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2451,
														"id": 2465,
														"nodeType": "Return",
														"src": "2348:20:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2441,
										"nodeType": "StructuredDocumentation",
										"src": "2074:112:15",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2201:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2216:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2468,
												"src": "2208:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2445,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2227:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2468,
												"src": "2219:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2219:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:22:15"
									},
									"returnParameters": {
										"id": 2451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2468,
												"src": "2253:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2253:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2468,
												"src": "2259:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2259:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2252:15:15"
									},
									"scope": 3353,
									"src": "2192:195:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2485,
										"nodeType": "Block",
										"src": "2529:39:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2478,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2471,
															"src": "2547:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2479,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2473,
															"src": "2551:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2547:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2482,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2473,
														"src": "2559:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2547:13:15",
													"trueExpression": {
														"id": 2481,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2471,
														"src": "2555:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2477,
												"id": 2484,
												"nodeType": "Return",
												"src": "2540:20:15"
											}
										]
									},
									"documentation": {
										"id": 2469,
										"nodeType": "StructuredDocumentation",
										"src": "2395:61:15",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2471:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2471,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2483:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "2475:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2475:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2473,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2494:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "2486:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2486:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2474:22:15"
									},
									"returnParameters": {
										"id": 2477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2476,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2486,
												"src": "2520:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2520:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2519:9:15"
									},
									"scope": 3353,
									"src": "2462:106:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2503,
										"nodeType": "Block",
										"src": "2711:39:15",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2496,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2489,
															"src": "2729:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2497,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2491,
															"src": "2733:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2729:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2500,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2491,
														"src": "2741:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2729:13:15",
													"trueExpression": {
														"id": 2499,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2489,
														"src": "2737:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2495,
												"id": 2502,
												"nodeType": "Return",
												"src": "2722:20:15"
											}
										]
									},
									"documentation": {
										"id": 2487,
										"nodeType": "StructuredDocumentation",
										"src": "2576:62:15",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2653:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2665:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "2657:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2657:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2676:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "2668:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2656:22:15"
									},
									"returnParameters": {
										"id": 2495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2494,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "2702:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2702:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:9:15"
									},
									"scope": 3353,
									"src": "2644:106:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2526,
										"nodeType": "Block",
										"src": "2940:85:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2514,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2507,
																	"src": "2997:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2515,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2509,
																	"src": "3001:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2997:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2517,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2996:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2523,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2520,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2518,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2507,
																		"src": "3007:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2519,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2509,
																		"src": "3011:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3007:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2521,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3006:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3016:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "3006:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2996:21:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2513,
												"id": 2525,
												"nodeType": "Return",
												"src": "2989:28:15"
											}
										]
									},
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "2758:105:15",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2878:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2894:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2886:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2886:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2509,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2905:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2897:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2897:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2885:22:15"
									},
									"returnParameters": {
										"id": 2513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2527,
												"src": "2931:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2931:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2930:9:15"
									},
									"scope": 3353,
									"src": "2869:156:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2560,
										"nodeType": "Block",
										"src": "3325:268:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2537,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2532,
														"src": "3340:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2538,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3345:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3340:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2545,
												"nodeType": "IfStatement",
												"src": "3336:130:15",
												"trueBody": {
													"id": 2544,
													"nodeType": "Block",
													"src": "3348:118:15",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2540,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2530,
																	"src": "3449:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2541,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2532,
																	"src": "3453:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3449:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2536,
															"id": 2543,
															"nodeType": "Return",
															"src": "3442:12:15"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2548,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2546,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2530,
															"src": "3557:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3562:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3557:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2557,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2550,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2530,
																			"src": "3571:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3575:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3571:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2553,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3570:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2554,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "3580:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3570:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3584:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3570:15:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3557:28:15",
													"trueExpression": {
														"hexValue": "30",
														"id": 2549,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3566:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2536,
												"id": 2559,
												"nodeType": "Return",
												"src": "3550:35:15"
											}
										]
									},
									"documentation": {
										"id": 2528,
										"nodeType": "StructuredDocumentation",
										"src": "3033:215:15",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2561,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3263:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2530,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3279:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2561,
												"src": "3271:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3271:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2532,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3290:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2561,
												"src": "3282:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3282:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3270:22:15"
									},
									"returnParameters": {
										"id": 2536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2535,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2561,
												"src": "3316:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2534,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3316:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3315:9:15"
									},
									"scope": 3353,
									"src": "3254:339:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2686,
										"nodeType": "Block",
										"src": "4023:4097:15",
										"statements": [
											{
												"id": 2685,
												"nodeType": "UncheckedBlock",
												"src": "4034:4079:15",
												"statements": [
													{
														"assignments": [
															2574
														],
														"declarations": [
															{
																"constant": false,
																"id": 2574,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4367:5:15",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "4359:13:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2573,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4359:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2578,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2575,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2564,
																"src": "4375:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2576,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2566,
																"src": "4379:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4375:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4359:21:15"
													},
													{
														"assignments": [
															2580
														],
														"declarations": [
															{
																"constant": false,
																"id": 2580,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4448:5:15",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "4440:13:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2579,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4440:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2581,
														"nodeType": "VariableDeclarationStatement",
														"src": "4440:13:15"
													},
													{
														"AST": {
															"nativeSrc": "4521:125:15",
															"nodeType": "YulBlock",
															"src": "4521:125:15",
															"statements": [
																{
																	"nativeSrc": "4540:30:15",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4540:30:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4557:1:15",
																				"nodeType": "YulIdentifier",
																				"src": "4557:1:15"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4560:1:15",
																				"nodeType": "YulIdentifier",
																				"src": "4560:1:15"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4567:1:15",
																						"nodeType": "YulLiteral",
																						"src": "4567:1:15",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4563:3:15",
																					"nodeType": "YulIdentifier",
																					"src": "4563:3:15"
																				},
																				"nativeSrc": "4563:6:15",
																				"nodeType": "YulFunctionCall",
																				"src": "4563:6:15"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4550:6:15",
																			"nodeType": "YulIdentifier",
																			"src": "4550:6:15"
																		},
																		"nativeSrc": "4550:20:15",
																		"nodeType": "YulFunctionCall",
																		"src": "4550:20:15"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4544:2:15",
																			"nodeType": "YulTypedName",
																			"src": "4544:2:15",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4588:43:15",
																	"nodeType": "YulAssignment",
																	"src": "4588:43:15",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4605:2:15",
																						"nodeType": "YulIdentifier",
																						"src": "4605:2:15"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4609:5:15",
																						"nodeType": "YulIdentifier",
																						"src": "4609:5:15"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4601:3:15",
																					"nodeType": "YulIdentifier",
																					"src": "4601:3:15"
																				},
																				"nativeSrc": "4601:14:15",
																				"nodeType": "YulFunctionCall",
																				"src": "4601:14:15"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4620:2:15",
																						"nodeType": "YulIdentifier",
																						"src": "4620:2:15"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4624:5:15",
																						"nodeType": "YulIdentifier",
																						"src": "4624:5:15"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4617:2:15",
																					"nodeType": "YulIdentifier",
																					"src": "4617:2:15"
																				},
																				"nativeSrc": "4617:13:15",
																				"nodeType": "YulFunctionCall",
																				"src": "4617:13:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4597:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "4597:3:15"
																		},
																		"nativeSrc": "4597:34:15",
																		"nodeType": "YulFunctionCall",
																		"src": "4597:34:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4588:5:15",
																			"nodeType": "YulIdentifier",
																			"src": "4588:5:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "4609:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "4624:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2580,
																"isOffset": false,
																"isSlot": false,
																"src": "4588:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2564,
																"isOffset": false,
																"isSlot": false,
																"src": "4557:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2566,
																"isOffset": false,
																"isSlot": false,
																"src": "4560:1:15",
																"valueSize": 1
															}
														],
														"id": 2582,
														"nodeType": "InlineAssembly",
														"src": "4512:134:15"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2583,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2580,
																"src": "4730:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4739:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4730:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2591,
														"nodeType": "IfStatement",
														"src": "4726:373:15",
														"trueBody": {
															"id": 2590,
															"nodeType": "Block",
															"src": "4742:357:15",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2588,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2586,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2574,
																			"src": "5064:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2587,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2568,
																			"src": "5072:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5064:19:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2572,
																	"id": 2589,
																	"nodeType": "Return",
																	"src": "5057:26:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2592,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2568,
																"src": "5208:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2593,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2580,
																"src": "5223:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5208:20:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2599,
														"nodeType": "IfStatement",
														"src": "5204:90:15",
														"trueBody": {
															"id": 2598,
															"nodeType": "Block",
															"src": "5230:64:15",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2595,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2305,
																			"src": "5256:20:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5256:22:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2597,
																	"nodeType": "RevertStatement",
																	"src": "5249:29:15"
																}
															]
														}
													},
													{
														"assignments": [
															2601
														],
														"declarations": [
															{
																"constant": false,
																"id": 2601,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5564:9:15",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "5556:17:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2600,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5556:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2602,
														"nodeType": "VariableDeclarationStatement",
														"src": "5556:17:15"
													},
													{
														"AST": {
															"nativeSrc": "5597:298:15",
															"nodeType": "YulBlock",
															"src": "5597:298:15",
															"statements": [
																{
																	"nativeSrc": "5668:38:15",
																	"nodeType": "YulAssignment",
																	"src": "5668:38:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5688:1:15",
																				"nodeType": "YulIdentifier",
																				"src": "5688:1:15"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5691:1:15",
																				"nodeType": "YulIdentifier",
																				"src": "5691:1:15"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5694:11:15",
																				"nodeType": "YulIdentifier",
																				"src": "5694:11:15"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5681:6:15",
																			"nodeType": "YulIdentifier",
																			"src": "5681:6:15"
																		},
																		"nativeSrc": "5681:25:15",
																		"nodeType": "YulFunctionCall",
																		"src": "5681:25:15"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5668:9:15",
																			"nodeType": "YulIdentifier",
																			"src": "5668:9:15"
																		}
																	]
																},
																{
																	"nativeSrc": "5791:41:15",
																	"nodeType": "YulAssignment",
																	"src": "5791:41:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5804:5:15",
																				"nodeType": "YulIdentifier",
																				"src": "5804:5:15"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5814:9:15",
																						"nodeType": "YulIdentifier",
																						"src": "5814:9:15"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5825:5:15",
																						"nodeType": "YulIdentifier",
																						"src": "5825:5:15"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5811:2:15",
																					"nodeType": "YulIdentifier",
																					"src": "5811:2:15"
																				},
																				"nativeSrc": "5811:20:15",
																				"nodeType": "YulFunctionCall",
																				"src": "5811:20:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5800:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "5800:3:15"
																		},
																		"nativeSrc": "5800:32:15",
																		"nodeType": "YulFunctionCall",
																		"src": "5800:32:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5791:5:15",
																			"nodeType": "YulIdentifier",
																			"src": "5791:5:15"
																		}
																	]
																},
																{
																	"nativeSrc": "5850:30:15",
																	"nodeType": "YulAssignment",
																	"src": "5850:30:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5863:5:15",
																				"nodeType": "YulIdentifier",
																				"src": "5863:5:15"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5870:9:15",
																				"nodeType": "YulIdentifier",
																				"src": "5870:9:15"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5859:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "5859:3:15"
																		},
																		"nativeSrc": "5859:21:15",
																		"nodeType": "YulFunctionCall",
																		"src": "5859:21:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5850:5:15",
																			"nodeType": "YulIdentifier",
																			"src": "5850:5:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2568,
																"isOffset": false,
																"isSlot": false,
																"src": "5694:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "5825:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "5850:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "5863:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2580,
																"isOffset": false,
																"isSlot": false,
																"src": "5791:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2580,
																"isOffset": false,
																"isSlot": false,
																"src": "5804:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2601,
																"isOffset": false,
																"isSlot": false,
																"src": "5668:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2601,
																"isOffset": false,
																"isSlot": false,
																"src": "5814:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2601,
																"isOffset": false,
																"isSlot": false,
																"src": "5870:9:15",
																"valueSize": 1
															},
															{
																"declaration": 2564,
																"isOffset": false,
																"isSlot": false,
																"src": "5688:1:15",
																"valueSize": 1
															},
															{
																"declaration": 2566,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:1:15",
																"valueSize": 1
															}
														],
														"id": 2603,
														"nodeType": "InlineAssembly",
														"src": "5588:307:15"
													},
													{
														"assignments": [
															2605
														],
														"declarations": [
															{
																"constant": false,
																"id": 2605,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "6112:4:15",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "6104:12:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2604,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6104:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2612,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2611,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2606,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2568,
																"src": "6119:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6134:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2608,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2568,
																			"src": "6138:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6134:15:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2610,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6133:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6119:31:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6104:46:15"
													},
													{
														"AST": {
															"nativeSrc": "6174:371:15",
															"nodeType": "YulBlock",
															"src": "6174:371:15",
															"statements": [
																{
																	"nativeSrc": "6241:37:15",
																	"nodeType": "YulAssignment",
																	"src": "6241:37:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6260:11:15",
																				"nodeType": "YulIdentifier",
																				"src": "6260:11:15"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6273:4:15",
																				"nodeType": "YulIdentifier",
																				"src": "6273:4:15"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6256:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "6256:3:15"
																		},
																		"nativeSrc": "6256:22:15",
																		"nodeType": "YulFunctionCall",
																		"src": "6256:22:15"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6241:11:15",
																			"nodeType": "YulIdentifier",
																			"src": "6241:11:15"
																		}
																	]
																},
																{
																	"nativeSrc": "6348:25:15",
																	"nodeType": "YulAssignment",
																	"src": "6348:25:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6361:5:15",
																				"nodeType": "YulIdentifier",
																				"src": "6361:5:15"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6368:4:15",
																				"nodeType": "YulIdentifier",
																				"src": "6368:4:15"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6357:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "6357:3:15"
																		},
																		"nativeSrc": "6357:16:15",
																		"nodeType": "YulFunctionCall",
																		"src": "6357:16:15"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6348:5:15",
																			"nodeType": "YulIdentifier",
																			"src": "6348:5:15"
																		}
																	]
																},
																{
																	"nativeSrc": "6491:39:15",
																	"nodeType": "YulAssignment",
																	"src": "6491:39:15",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6511:1:15",
																								"nodeType": "YulLiteral",
																								"src": "6511:1:15",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6514:4:15",
																								"nodeType": "YulIdentifier",
																								"src": "6514:4:15"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6507:3:15",
																							"nodeType": "YulIdentifier",
																							"src": "6507:3:15"
																						},
																						"nativeSrc": "6507:12:15",
																						"nodeType": "YulFunctionCall",
																						"src": "6507:12:15"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6521:4:15",
																						"nodeType": "YulIdentifier",
																						"src": "6521:4:15"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6503:3:15",
																					"nodeType": "YulIdentifier",
																					"src": "6503:3:15"
																				},
																				"nativeSrc": "6503:23:15",
																				"nodeType": "YulFunctionCall",
																				"src": "6503:23:15"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6528:1:15",
																				"nodeType": "YulLiteral",
																				"src": "6528:1:15",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6499:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "6499:3:15"
																		},
																		"nativeSrc": "6499:31:15",
																		"nodeType": "YulFunctionCall",
																		"src": "6499:31:15"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6491:4:15",
																			"nodeType": "YulIdentifier",
																			"src": "6491:4:15"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2568,
																"isOffset": false,
																"isSlot": false,
																"src": "6241:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2568,
																"isOffset": false,
																"isSlot": false,
																"src": "6260:11:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "6348:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2574,
																"isOffset": false,
																"isSlot": false,
																"src": "6361:5:15",
																"valueSize": 1
															},
															{
																"declaration": 2605,
																"isOffset": false,
																"isSlot": false,
																"src": "6273:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2605,
																"isOffset": false,
																"isSlot": false,
																"src": "6368:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2605,
																"isOffset": false,
																"isSlot": false,
																"src": "6491:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2605,
																"isOffset": false,
																"isSlot": false,
																"src": "6514:4:15",
																"valueSize": 1
															},
															{
																"declaration": 2605,
																"isOffset": false,
																"isSlot": false,
																"src": "6521:4:15",
																"valueSize": 1
															}
														],
														"id": 2613,
														"nodeType": "InlineAssembly",
														"src": "6165:380:15"
													},
													{
														"expression": {
															"id": 2618,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2614,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2574,
																"src": "6614:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2617,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2615,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2580,
																	"src": "6623:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2616,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2605,
																	"src": "6631:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6623:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6614:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2619,
														"nodeType": "ExpressionStatement",
														"src": "6614:21:15"
													},
													{
														"assignments": [
															2621
														],
														"declarations": [
															{
																"constant": false,
																"id": 2621,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6966:7:15",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "6958:15:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2620,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6958:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2628,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6977:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2623,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2568,
																			"src": "6981:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6977:15:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2625,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6976:17:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6996:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6976:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6958:39:15"
													},
													{
														"expression": {
															"id": 2635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2629,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7218:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7229:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2633,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2631,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7233:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2632,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7247:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7233:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7229:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7218:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2636,
														"nodeType": "ExpressionStatement",
														"src": "7218:36:15"
													},
													{
														"expression": {
															"id": 2643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2637,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7288:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2638,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7299:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2639,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7303:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2640,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7317:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7303:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7299:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7288:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2644,
														"nodeType": "ExpressionStatement",
														"src": "7288:36:15"
													},
													{
														"expression": {
															"id": 2651,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2645,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7359:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2646,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7370:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2647,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7374:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2648,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7388:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7374:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7370:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7359:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2652,
														"nodeType": "ExpressionStatement",
														"src": "7359:36:15"
													},
													{
														"expression": {
															"id": 2659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2653,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7430:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2654,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7441:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2655,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7445:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2656,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7459:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7445:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7441:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7430:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2660,
														"nodeType": "ExpressionStatement",
														"src": "7430:36:15"
													},
													{
														"expression": {
															"id": 2667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2661,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7501:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2666,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7512:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2663,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7516:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2664,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7530:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7516:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7512:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7501:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2668,
														"nodeType": "ExpressionStatement",
														"src": "7501:36:15"
													},
													{
														"expression": {
															"id": 2675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2669,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2621,
																"src": "7573:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7584:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2671,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2568,
																		"src": "7588:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2672,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2621,
																		"src": "7602:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7588:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7584:25:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7573:36:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2676,
														"nodeType": "ExpressionStatement",
														"src": "7573:36:15"
													},
													{
														"expression": {
															"id": 2681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2677,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2571,
																"src": "8049:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2680,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2678,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2574,
																	"src": "8058:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2679,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2621,
																	"src": "8066:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8058:15:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8049:24:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2682,
														"nodeType": "ExpressionStatement",
														"src": "8049:24:15"
													},
													{
														"expression": {
															"id": 2683,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2571,
															"src": "8095:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2572,
														"id": 2684,
														"nodeType": "Return",
														"src": "8088:13:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2562,
										"nodeType": "StructuredDocumentation",
										"src": "3601:318:15",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3934:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2564,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3949:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3941:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2563,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2566,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3960:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3952:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3952:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2568,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3971:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "3963:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3963:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:43:15"
									},
									"returnParameters": {
										"id": 2572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2571,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "4015:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "4007:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4007:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4006:16:15"
									},
									"scope": 3353,
									"src": "3925:4195:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2729,
										"nodeType": "Block",
										"src": "8367:198:15",
										"statements": [
											{
												"assignments": [
													2703
												],
												"declarations": [
													{
														"constant": false,
														"id": 2703,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8386:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2729,
														"src": "8378:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2702,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8378:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2709,
												"initialValue": {
													"arguments": [
														{
															"id": 2705,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2690,
															"src": "8402:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2706,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2692,
															"src": "8405:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2707,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2694,
															"src": "8408:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2704,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2687,
															2730
														],
														"referencedDeclaration": 2687,
														"src": "8395:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8395:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8378:42:15"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2711,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2697,
																"src": "8452:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2310",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2310",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2710,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3352,
															"src": "8435:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2310_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2712,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8435:26:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2719,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2714,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2690,
																	"src": "8472:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2715,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2692,
																	"src": "8475:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2716,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2694,
																	"src": "8478:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2713,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8465:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8465:25:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2718,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8493:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8465:29:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8435:59:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2726,
												"nodeType": "IfStatement",
												"src": "8431:103:15",
												"trueBody": {
													"id": 2725,
													"nodeType": "Block",
													"src": "8496:38:15",
													"statements": [
														{
															"expression": {
																"id": 2723,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2721,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2703,
																	"src": "8511:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2722,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8521:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8511:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2724,
															"nodeType": "ExpressionStatement",
															"src": "8511:11:15"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2727,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2703,
													"src": "8551:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2701,
												"id": 2728,
												"nodeType": "Return",
												"src": "8544:13:15"
											}
										]
									},
									"documentation": {
										"id": 2688,
										"nodeType": "StructuredDocumentation",
										"src": "8128:123:15",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8266:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8281:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2730,
												"src": "8273:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8273:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8292:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2730,
												"src": "8284:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8284:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2694,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8303:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2730,
												"src": "8295:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8325:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 2730,
												"src": "8316:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2696,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2695,
														"name": "Rounding",
														"nameLocations": [
															"8316:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "8316:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "8316:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8272:62:15"
									},
									"returnParameters": {
										"id": 2701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2730,
												"src": "8358:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8358:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8357:9:15"
									},
									"scope": 3353,
									"src": "8257:308:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2841,
										"nodeType": "Block",
										"src": "8864:1616:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2738,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2733,
														"src": "8879:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2739,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8884:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8879:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2744,
												"nodeType": "IfStatement",
												"src": "8875:47:15",
												"trueBody": {
													"id": 2743,
													"nodeType": "Block",
													"src": "8887:35:15",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2741,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8909:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2737,
															"id": 2742,
															"nodeType": "Return",
															"src": "8902:8:15"
														}
													]
												}
											},
											{
												"assignments": [
													2746
												],
												"declarations": [
													{
														"constant": false,
														"id": 2746,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9621:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 2841,
														"src": "9613:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2745,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9613:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2755,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2747,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9630:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2752,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2749,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2733,
																			"src": "9641:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2748,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3009,
																			3044
																		],
																		"referencedDeclaration": 3009,
																		"src": "9636:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2750,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9636:7:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9647:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9636:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2753,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9635:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9630:19:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9613:36:15"
											},
											{
												"id": 2840,
												"nodeType": "UncheckedBlock",
												"src": "10056:417:15",
												"statements": [
													{
														"expression": {
															"id": 2765,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2756,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10081:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2764,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2761,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2757,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10091:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2760,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2758,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10100:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2759,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10104:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10100:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10091:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2762,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10090:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10115:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10090:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10081:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2766,
														"nodeType": "ExpressionStatement",
														"src": "10081:35:15"
													},
													{
														"expression": {
															"id": 2776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2767,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10131:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2775,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2772,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2768,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10141:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2771,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2769,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10150:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2770,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10154:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10150:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10141:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2773,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10140:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2774,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10165:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10140:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10131:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2777,
														"nodeType": "ExpressionStatement",
														"src": "10131:35:15"
													},
													{
														"expression": {
															"id": 2787,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2778,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10181:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2786,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2779,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10191:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2782,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2780,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10200:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2781,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10204:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10200:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10191:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2784,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10190:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2785,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10215:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10190:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10181:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2788,
														"nodeType": "ExpressionStatement",
														"src": "10181:35:15"
													},
													{
														"expression": {
															"id": 2798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2789,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10231:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2797,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2790,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10241:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2793,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2791,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10250:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2792,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10254:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10250:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10241:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2795,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10240:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10265:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10240:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10231:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2799,
														"nodeType": "ExpressionStatement",
														"src": "10231:35:15"
													},
													{
														"expression": {
															"id": 2809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2800,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10281:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2808,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2805,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2801,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10291:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2804,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2802,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10300:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2803,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10304:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10300:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10291:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2806,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10290:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2807,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10315:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10290:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10281:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2810,
														"nodeType": "ExpressionStatement",
														"src": "10281:35:15"
													},
													{
														"expression": {
															"id": 2820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2811,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10331:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2819,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2816,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2812,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10341:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2815,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2813,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10350:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2814,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10354:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10350:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10341:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2817,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10340:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10365:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10340:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10331:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2821,
														"nodeType": "ExpressionStatement",
														"src": "10331:35:15"
													},
													{
														"expression": {
															"id": 2831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2822,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2746,
																"src": "10381:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2830,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2827,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2823,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2746,
																				"src": "10391:6:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2826,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2824,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2733,
																					"src": "10400:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2825,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2746,
																					"src": "10404:6:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10400:10:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10391:19:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2828,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10390:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10415:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10390:26:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10381:35:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2832,
														"nodeType": "ExpressionStatement",
														"src": "10381:35:15"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2834,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2746,
																	"src": "10442:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2835,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2733,
																		"src": "10450:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2836,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2746,
																		"src": "10454:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10450:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2833,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2504,
																"src": "10438:3:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10438:23:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2737,
														"id": 2839,
														"nodeType": "Return",
														"src": "10431:30:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2731,
										"nodeType": "StructuredDocumentation",
										"src": "8573:228:15",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2842,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8816:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2733,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8829:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2842,
												"src": "8821:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8821:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8820:11:15"
									},
									"returnParameters": {
										"id": 2737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2736,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2842,
												"src": "8855:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8855:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8854:9:15"
									},
									"scope": 3353,
									"src": "8807:1673:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2876,
										"nodeType": "Block",
										"src": "10661:169:15",
										"statements": [
											{
												"id": 2875,
												"nodeType": "UncheckedBlock",
												"src": "10672:151:15",
												"statements": [
													{
														"assignments": [
															2854
														],
														"declarations": [
															{
																"constant": false,
																"id": 2854,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10705:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 2875,
																"src": "10697:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2853,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10697:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2858,
														"initialValue": {
															"arguments": [
																{
																	"id": 2856,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2845,
																	"src": "10719:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2855,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2842,
																	2877
																],
																"referencedDeclaration": 2842,
																"src": "10714:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10714:7:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10697:24:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2859,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2854,
																"src": "10743:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2861,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2848,
																						"src": "10770:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2860,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3352,
																					"src": "10753:16:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2310_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2862,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10753:26:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2867,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2865,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2863,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2854,
																						"src": "10783:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2864,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2854,
																						"src": "10792:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10783:15:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2866,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2845,
																					"src": "10801:1:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10783:19:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10753:49:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2870,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10809:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2871,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10753:57:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2869,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10805:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2872,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10752:59:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10743:68:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2852,
														"id": 2874,
														"nodeType": "Return",
														"src": "10736:75:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2843,
										"nodeType": "StructuredDocumentation",
										"src": "10488:91:15",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10594:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2845,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10607:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "10599:9:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10599:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2848,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10619:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "10610:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2846,
														"name": "Rounding",
														"nameLocations": [
															"10610:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "10610:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "10610:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10598:30:15"
									},
									"returnParameters": {
										"id": 2852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2851,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2877,
												"src": "10652:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2850,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10652:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10651:9:15"
									},
									"scope": 3353,
									"src": "10585:245:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3008,
										"nodeType": "Block",
										"src": "11027:958:15",
										"statements": [
											{
												"assignments": [
													2886
												],
												"declarations": [
													{
														"constant": false,
														"id": 2886,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11046:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 3008,
														"src": "11038:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2885,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11038:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2888,
												"initialValue": {
													"hexValue": "30",
													"id": 2887,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11055:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11038:18:15"
											},
											{
												"id": 3005,
												"nodeType": "UncheckedBlock",
												"src": "11067:887:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2889,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11096:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11105:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11096:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11111:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11096:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2903,
														"nodeType": "IfStatement",
														"src": "11092:102:15",
														"trueBody": {
															"id": 2902,
															"nodeType": "Block",
															"src": "11114:80:15",
															"statements": [
																{
																	"expression": {
																		"id": 2896,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2894,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11133:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11143:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11133:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2897,
																	"nodeType": "ExpressionStatement",
																	"src": "11133:13:15"
																},
																{
																	"expression": {
																		"id": 2900,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2898,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11165:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2899,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11175:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11165:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2901,
																	"nodeType": "ExpressionStatement",
																	"src": "11165:13:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2906,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2904,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11212:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11221:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11212:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11226:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11212:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2918,
														"nodeType": "IfStatement",
														"src": "11208:99:15",
														"trueBody": {
															"id": 2917,
															"nodeType": "Block",
															"src": "11229:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 2911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2909,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11248:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11258:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11248:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2912,
																	"nodeType": "ExpressionStatement",
																	"src": "11248:12:15"
																},
																{
																	"expression": {
																		"id": 2915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2913,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11279:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2914,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11289:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11279:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2916,
																	"nodeType": "ExpressionStatement",
																	"src": "11279:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2919,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11325:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11334:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11325:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11339:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11325:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2933,
														"nodeType": "IfStatement",
														"src": "11321:99:15",
														"trueBody": {
															"id": 2932,
															"nodeType": "Block",
															"src": "11342:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 2926,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2924,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11361:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2925,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11371:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11361:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2927,
																	"nodeType": "ExpressionStatement",
																	"src": "11361:12:15"
																},
																{
																	"expression": {
																		"id": 2930,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2928,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11392:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2929,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11402:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11392:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2931,
																	"nodeType": "ExpressionStatement",
																	"src": "11392:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2934,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11438:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11447:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11438:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11452:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11438:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2948,
														"nodeType": "IfStatement",
														"src": "11434:99:15",
														"trueBody": {
															"id": 2947,
															"nodeType": "Block",
															"src": "11455:78:15",
															"statements": [
																{
																	"expression": {
																		"id": 2941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2939,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11474:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2940,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11484:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11474:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2942,
																	"nodeType": "ExpressionStatement",
																	"src": "11474:12:15"
																},
																{
																	"expression": {
																		"id": 2945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2943,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11505:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2944,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11515:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11505:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2946,
																	"nodeType": "ExpressionStatement",
																	"src": "11505:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2949,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11551:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11560:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11551:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2952,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11564:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11551:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2963,
														"nodeType": "IfStatement",
														"src": "11547:96:15",
														"trueBody": {
															"id": 2962,
															"nodeType": "Block",
															"src": "11567:76:15",
															"statements": [
																{
																	"expression": {
																		"id": 2956,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2954,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11586:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2955,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11596:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11586:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2957,
																	"nodeType": "ExpressionStatement",
																	"src": "11586:11:15"
																},
																{
																	"expression": {
																		"id": 2960,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2958,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11616:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2959,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11626:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11616:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2961,
																	"nodeType": "ExpressionStatement",
																	"src": "11616:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2966,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2964,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11661:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2965,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11670:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11661:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2967,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11674:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11661:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2978,
														"nodeType": "IfStatement",
														"src": "11657:96:15",
														"trueBody": {
															"id": 2977,
															"nodeType": "Block",
															"src": "11677:76:15",
															"statements": [
																{
																	"expression": {
																		"id": 2971,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2969,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11696:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2970,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11706:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11696:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2972,
																	"nodeType": "ExpressionStatement",
																	"src": "11696:11:15"
																},
																{
																	"expression": {
																		"id": 2975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2973,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11726:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2974,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11736:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11726:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2976,
																	"nodeType": "ExpressionStatement",
																	"src": "11726:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2979,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11771:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2980,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11780:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11771:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11784:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11771:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2993,
														"nodeType": "IfStatement",
														"src": "11767:96:15",
														"trueBody": {
															"id": 2992,
															"nodeType": "Block",
															"src": "11787:76:15",
															"statements": [
																{
																	"expression": {
																		"id": 2986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2984,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2880,
																			"src": "11806:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2985,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11816:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11806:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2987,
																	"nodeType": "ExpressionStatement",
																	"src": "11806:11:15"
																},
																{
																	"expression": {
																		"id": 2990,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2988,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11836:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2989,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11846:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11836:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2991,
																	"nodeType": "ExpressionStatement",
																	"src": "11836:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2996,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2994,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2880,
																	"src": "11881:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11890:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11881:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2997,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11894:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11881:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3004,
														"nodeType": "IfStatement",
														"src": "11877:66:15",
														"trueBody": {
															"id": 3003,
															"nodeType": "Block",
															"src": "11897:46:15",
															"statements": [
																{
																	"expression": {
																		"id": 3001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2999,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2886,
																			"src": "11916:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3000,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11926:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11916:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3002,
																	"nodeType": "ExpressionStatement",
																	"src": "11916:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3006,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2886,
													"src": "11971:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2884,
												"id": 3007,
												"nodeType": "Return",
												"src": "11964:13:15"
											}
										]
									},
									"documentation": {
										"id": 2878,
										"nodeType": "StructuredDocumentation",
										"src": "10838:122:15",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3009,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10975:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2880,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10988:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "10980:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10980:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10979:15:15"
									},
									"returnParameters": {
										"id": 2884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2883,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3009,
												"src": "11018:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11018:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11017:9:15"
									},
									"scope": 3353,
									"src": "10966:1019:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3043,
										"nodeType": "Block",
										"src": "12224:173:15",
										"statements": [
											{
												"id": 3042,
												"nodeType": "UncheckedBlock",
												"src": "12235:155:15",
												"statements": [
													{
														"assignments": [
															3021
														],
														"declarations": [
															{
																"constant": false,
																"id": 3021,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12268:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 3042,
																"src": "12260:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3020,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12260:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3025,
														"initialValue": {
															"arguments": [
																{
																	"id": 3023,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3012,
																	"src": "12282:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3022,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3009,
																	3044
																],
																"referencedDeclaration": 3009,
																"src": "12277:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12277:11:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12260:28:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3040,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3026,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3021,
																"src": "12310:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3035,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3028,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3015,
																						"src": "12337:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3027,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3352,
																					"src": "12320:16:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2310_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3029,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12320:26:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3034,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3032,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3030,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12350:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3031,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3021,
																						"src": "12355:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12350:11:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3033,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3012,
																					"src": "12364:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12350:19:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12320:49:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12376:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3038,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12320:57:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3036,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12372:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3039,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12319:59:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12310:68:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3019,
														"id": 3041,
														"nodeType": "Return",
														"src": "12303:75:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3010,
										"nodeType": "StructuredDocumentation",
										"src": "11993:145:15",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3044,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "12153:4:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3012,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12166:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3044,
												"src": "12158:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12158:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3015,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12182:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3044,
												"src": "12173:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3014,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3013,
														"name": "Rounding",
														"nameLocations": [
															"12173:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "12173:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "12173:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12157:34:15"
									},
									"returnParameters": {
										"id": 3019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3018,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3044,
												"src": "12215:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12215:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12214:9:15"
									},
									"scope": 3353,
									"src": "12144:253:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3172,
										"nodeType": "Block",
										"src": "12596:886:15",
										"statements": [
											{
												"assignments": [
													3053
												],
												"declarations": [
													{
														"constant": false,
														"id": 3053,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12615:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 3172,
														"src": "12607:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3052,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12607:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3055,
												"initialValue": {
													"hexValue": "30",
													"id": 3054,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12624:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12607:18:15"
											},
											{
												"id": 3169,
												"nodeType": "UncheckedBlock",
												"src": "12636:815:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3056,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "12665:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3059,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3057,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12674:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3058,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12680:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12674:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12665:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3072,
														"nodeType": "IfStatement",
														"src": "12661:106:15",
														"trueBody": {
															"id": 3071,
															"nodeType": "Block",
															"src": "12684:83:15",
															"statements": [
																{
																	"expression": {
																		"id": 3065,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3061,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "12703:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3064,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3062,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12712:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3063,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12718:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12712:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12703:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3066,
																	"nodeType": "ExpressionStatement",
																	"src": "12703:17:15"
																},
																{
																	"expression": {
																		"id": 3069,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3067,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "12739:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3068,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12749:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12739:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3070,
																	"nodeType": "ExpressionStatement",
																	"src": "12739:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3073,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "12785:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3076,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12794:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12800:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12794:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12785:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3089,
														"nodeType": "IfStatement",
														"src": "12781:106:15",
														"trueBody": {
															"id": 3088,
															"nodeType": "Block",
															"src": "12804:83:15",
															"statements": [
																{
																	"expression": {
																		"id": 3082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3078,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "12823:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3081,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3079,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12832:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3080,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12838:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12832:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12823:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3083,
																	"nodeType": "ExpressionStatement",
																	"src": "12823:17:15"
																},
																{
																	"expression": {
																		"id": 3086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3084,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "12859:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3085,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12869:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12859:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3087,
																	"nodeType": "ExpressionStatement",
																	"src": "12859:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3090,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "12905:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3093,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12914:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3092,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12920:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12914:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12905:17:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3106,
														"nodeType": "IfStatement",
														"src": "12901:106:15",
														"trueBody": {
															"id": 3105,
															"nodeType": "Block",
															"src": "12924:83:15",
															"statements": [
																{
																	"expression": {
																		"id": 3099,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3095,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "12943:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3098,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3096,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12952:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3097,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12958:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12952:8:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12943:17:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3100,
																	"nodeType": "ExpressionStatement",
																	"src": "12943:17:15"
																},
																{
																	"expression": {
																		"id": 3103,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3101,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "12979:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3102,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12989:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12979:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3104,
																	"nodeType": "ExpressionStatement",
																	"src": "12979:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3107,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "13025:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13034:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13040:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "13034:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "13025:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3123,
														"nodeType": "IfStatement",
														"src": "13021:103:15",
														"trueBody": {
															"id": 3122,
															"nodeType": "Block",
															"src": "13043:81:15",
															"statements": [
																{
																	"expression": {
																		"id": 3116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3112,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "13062:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3113,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13071:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3114,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13077:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "13071:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "13062:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3117,
																	"nodeType": "ExpressionStatement",
																	"src": "13062:16:15"
																},
																{
																	"expression": {
																		"id": 3120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3118,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "13097:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13107:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "13097:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3121,
																	"nodeType": "ExpressionStatement",
																	"src": "13097:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3124,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "13142:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3127,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13151:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13157:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "13151:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "13142:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3140,
														"nodeType": "IfStatement",
														"src": "13138:103:15",
														"trueBody": {
															"id": 3139,
															"nodeType": "Block",
															"src": "13160:81:15",
															"statements": [
																{
																	"expression": {
																		"id": 3133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3129,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "13179:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3130,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13188:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3131,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13194:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "13188:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "13179:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3134,
																	"nodeType": "ExpressionStatement",
																	"src": "13179:16:15"
																},
																{
																	"expression": {
																		"id": 3137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3135,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "13214:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13224:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "13214:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3138,
																	"nodeType": "ExpressionStatement",
																	"src": "13214:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3141,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "13259:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3144,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13268:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13274:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "13268:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "13259:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3157,
														"nodeType": "IfStatement",
														"src": "13255:103:15",
														"trueBody": {
															"id": 3156,
															"nodeType": "Block",
															"src": "13277:81:15",
															"statements": [
																{
																	"expression": {
																		"id": 3150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3146,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3047,
																			"src": "13296:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3147,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13305:2:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13311:1:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "13305:7:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "13296:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3151,
																	"nodeType": "ExpressionStatement",
																	"src": "13296:16:15"
																},
																{
																	"expression": {
																		"id": 3154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3152,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "13331:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13341:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "13331:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3155,
																	"nodeType": "ExpressionStatement",
																	"src": "13331:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3158,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3047,
																"src": "13376:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3161,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13385:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13391:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13385:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13376:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3168,
														"nodeType": "IfStatement",
														"src": "13372:68:15",
														"trueBody": {
															"id": 3167,
															"nodeType": "Block",
															"src": "13394:46:15",
															"statements": [
																{
																	"expression": {
																		"id": 3165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3163,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3053,
																			"src": "13413:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3164,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13423:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13413:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3166,
																	"nodeType": "ExpressionStatement",
																	"src": "13413:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3170,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3053,
													"src": "13468:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3051,
												"id": 3171,
												"nodeType": "Return",
												"src": "13461:13:15"
											}
										]
									},
									"documentation": {
										"id": 3045,
										"nodeType": "StructuredDocumentation",
										"src": "12405:123:15",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12543:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3047,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12557:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3173,
												"src": "12549:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12549:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12548:15:15"
									},
									"returnParameters": {
										"id": 3051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3050,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3173,
												"src": "12587:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12587:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12586:9:15"
									},
									"scope": 3353,
									"src": "12534:948:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3207,
										"nodeType": "Block",
										"src": "13723:175:15",
										"statements": [
											{
												"id": 3206,
												"nodeType": "UncheckedBlock",
												"src": "13734:157:15",
												"statements": [
													{
														"assignments": [
															3185
														],
														"declarations": [
															{
																"constant": false,
																"id": 3185,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13767:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 3206,
																"src": "13759:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3184,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13759:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3189,
														"initialValue": {
															"arguments": [
																{
																	"id": 3187,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3176,
																	"src": "13782:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3186,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3173,
																	3208
																],
																"referencedDeclaration": 3173,
																"src": "13776:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13776:12:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13759:29:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3190,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3185,
																"src": "13810:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3199,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3192,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3179,
																						"src": "13837:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3191,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3352,
																					"src": "13820:16:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2310_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3193,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13820:26:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3198,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3196,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3194,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13850:2:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3195,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3185,
																						"src": "13856:6:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13850:12:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3197,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3176,
																					"src": "13865:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13850:20:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13820:50:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3201,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13877:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3202,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13820:58:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3200,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13873:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3203,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13819:60:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13810:69:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3183,
														"id": 3205,
														"nodeType": "Return",
														"src": "13803:76:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3174,
										"nodeType": "StructuredDocumentation",
										"src": "13490:146:15",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3208,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13651:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3176,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13665:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3208,
												"src": "13657:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13657:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3179,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13681:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3208,
												"src": "13672:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3178,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3177,
														"name": "Rounding",
														"nameLocations": [
															"13672:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "13672:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "13672:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13656:34:15"
									},
									"returnParameters": {
										"id": 3183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3208,
												"src": "13714:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13714:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13713:9:15"
									},
									"scope": 3353,
									"src": "13642:256:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3294,
										"nodeType": "Block",
										"src": "14226:624:15",
										"statements": [
											{
												"assignments": [
													3217
												],
												"declarations": [
													{
														"constant": false,
														"id": 3217,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "14245:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 3294,
														"src": "14237:14:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3216,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14237:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3219,
												"initialValue": {
													"hexValue": "30",
													"id": 3218,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14254:1:15",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14237:18:15"
											},
											{
												"id": 3291,
												"nodeType": "UncheckedBlock",
												"src": "14266:553:15",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3220,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3211,
																	"src": "14295:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14304:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "14295:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14310:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14295:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3234,
														"nodeType": "IfStatement",
														"src": "14291:101:15",
														"trueBody": {
															"id": 3233,
															"nodeType": "Block",
															"src": "14313:79:15",
															"statements": [
																{
																	"expression": {
																		"id": 3227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3225,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3211,
																			"src": "14332:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3226,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14342:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "14332:13:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3228,
																	"nodeType": "ExpressionStatement",
																	"src": "14332:13:15"
																},
																{
																	"expression": {
																		"id": 3231,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3229,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3217,
																			"src": "14364:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14374:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14364:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3232,
																	"nodeType": "ExpressionStatement",
																	"src": "14364:12:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3235,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3211,
																	"src": "14410:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14419:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14410:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14424:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14410:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3249,
														"nodeType": "IfStatement",
														"src": "14406:98:15",
														"trueBody": {
															"id": 3248,
															"nodeType": "Block",
															"src": "14427:77:15",
															"statements": [
																{
																	"expression": {
																		"id": 3242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3240,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3211,
																			"src": "14446:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14456:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14446:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3243,
																	"nodeType": "ExpressionStatement",
																	"src": "14446:12:15"
																},
																{
																	"expression": {
																		"id": 3246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3244,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3217,
																			"src": "14477:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14487:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14477:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3247,
																	"nodeType": "ExpressionStatement",
																	"src": "14477:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3252,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3250,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3211,
																	"src": "14522:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14531:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14522:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14536:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14522:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3264,
														"nodeType": "IfStatement",
														"src": "14518:98:15",
														"trueBody": {
															"id": 3263,
															"nodeType": "Block",
															"src": "14539:77:15",
															"statements": [
																{
																	"expression": {
																		"id": 3257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3255,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3211,
																			"src": "14558:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14568:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14558:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3258,
																	"nodeType": "ExpressionStatement",
																	"src": "14558:12:15"
																},
																{
																	"expression": {
																		"id": 3261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3259,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3217,
																			"src": "14589:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3260,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14599:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14589:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3262,
																	"nodeType": "ExpressionStatement",
																	"src": "14589:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3265,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3211,
																	"src": "14634:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14643:2:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14634:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14648:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14634:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3279,
														"nodeType": "IfStatement",
														"src": "14630:98:15",
														"trueBody": {
															"id": 3278,
															"nodeType": "Block",
															"src": "14651:77:15",
															"statements": [
																{
																	"expression": {
																		"id": 3272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3270,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3211,
																			"src": "14670:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3271,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14680:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14670:12:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3273,
																	"nodeType": "ExpressionStatement",
																	"src": "14670:12:15"
																},
																{
																	"expression": {
																		"id": 3276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3274,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3217,
																			"src": "14701:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3275,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14711:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14701:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3277,
																	"nodeType": "ExpressionStatement",
																	"src": "14701:11:15"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3280,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3211,
																	"src": "14746:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14755:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14746:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14759:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14746:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3290,
														"nodeType": "IfStatement",
														"src": "14742:66:15",
														"trueBody": {
															"id": 3289,
															"nodeType": "Block",
															"src": "14762:46:15",
															"statements": [
																{
																	"expression": {
																		"id": 3287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3285,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3217,
																			"src": "14781:6:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3286,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14791:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14781:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3288,
																	"nodeType": "ExpressionStatement",
																	"src": "14781:11:15"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3292,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3217,
													"src": "14836:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3215,
												"id": 3293,
												"nodeType": "Return",
												"src": "14829:13:15"
											}
										]
									},
									"documentation": {
										"id": 3209,
										"nodeType": "StructuredDocumentation",
										"src": "13906:251:15",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3295,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14172:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3211,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14187:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3295,
												"src": "14179:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14179:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14178:15:15"
									},
									"returnParameters": {
										"id": 3215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3295,
												"src": "14217:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14217:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14216:9:15"
									},
									"scope": 3353,
									"src": "14163:687:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3332,
										"nodeType": "Block",
										"src": "15093:182:15",
										"statements": [
											{
												"id": 3331,
												"nodeType": "UncheckedBlock",
												"src": "15104:164:15",
												"statements": [
													{
														"assignments": [
															3307
														],
														"declarations": [
															{
																"constant": false,
																"id": 3307,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "15137:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 3331,
																"src": "15129:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3306,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15129:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3311,
														"initialValue": {
															"arguments": [
																{
																	"id": 3309,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3298,
																	"src": "15153:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3308,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3295,
																	3333
																],
																"referencedDeclaration": 3295,
																"src": "15146:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15146:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15129:30:15"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3312,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3307,
																"src": "15181:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3314,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3301,
																						"src": "15208:8:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2310",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3313,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3352,
																					"src": "15191:16:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2310_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "15191:26:15",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3323,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3321,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3316,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "15221:1:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3319,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3317,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3307,
																									"src": "15227:6:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3318,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "15237:1:15",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "15227:11:15",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3320,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "15226:13:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "15221:18:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3322,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3298,
																					"src": "15242:5:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15221:26:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "15191:56:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "15254:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "15191:64:15",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3325,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "15250:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3328,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "15190:66:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "15181:75:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3305,
														"id": 3330,
														"nodeType": "Return",
														"src": "15174:82:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3296,
										"nodeType": "StructuredDocumentation",
										"src": "14858:147:15",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3333,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "15020:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3298,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "15035:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 3333,
												"src": "15027:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15027:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3301,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15051:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3333,
												"src": "15042:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3299,
														"name": "Rounding",
														"nameLocations": [
															"15042:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "15042:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "15042:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15026:34:15"
									},
									"returnParameters": {
										"id": 3305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3304,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3333,
												"src": "15084:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15084:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15083:9:15"
									},
									"scope": 3353,
									"src": "15011:264:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3351,
										"nodeType": "Block",
										"src": "15478:50:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3344,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3337,
																	"src": "15502:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2310",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2310",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15496:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3342,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15496:5:15",
																	"typeDescriptions": {}
																}
															},
															"id": 3345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15496:15:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15514:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15496:19:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15519:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15496:24:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3341,
												"id": 3350,
												"nodeType": "Return",
												"src": "15489:31:15"
											}
										]
									},
									"documentation": {
										"id": 3334,
										"nodeType": "StructuredDocumentation",
										"src": "15283:115:15",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15413:16:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3337,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15439:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 3352,
												"src": "15430:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2310",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3336,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3335,
														"name": "Rounding",
														"nameLocations": [
															"15430:8:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2310,
														"src": "15430:8:15"
													},
													"referencedDeclaration": 2310,
													"src": "15430:8:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2310",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15429:19:15"
									},
									"returnParameters": {
										"id": 3341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3352,
												"src": "15472:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3339,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15472:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15471:6:15"
									},
									"scope": 3353,
									"src": "15404:124:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3354,
							"src": "211:15320:15",
							"usedErrors": [
								2305
							],
							"usedEvents": []
						}
					],
					"src": "106:15427:15"
				},
				"id": 15
			},
			"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3458
						]
					},
					"id": 3459,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3355,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3356,
								"nodeType": "StructuredDocumentation",
								"src": "140:82:16",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3458,
							"linearizedBaseContracts": [
								3458
							],
							"name": "SignedMath",
							"nameLocation": "232:10:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3373,
										"nodeType": "Block",
										"src": "388:39:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3366,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3359,
															"src": "406:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3367,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3361,
															"src": "410:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "406:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3370,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3361,
														"src": "418:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "406:13:16",
													"trueExpression": {
														"id": 3369,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3359,
														"src": "414:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3365,
												"id": 3372,
												"nodeType": "Return",
												"src": "399:20:16"
											}
										]
									},
									"documentation": {
										"id": 3357,
										"nodeType": "StructuredDocumentation",
										"src": "250:68:16",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "333:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3359,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "344:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "337:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3358,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "337:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3361,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "354:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "347:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3360,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "347:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "336:20:16"
									},
									"returnParameters": {
										"id": 3365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "380:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3363,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "380:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:8:16"
									},
									"scope": 3458,
									"src": "324:103:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3391,
										"nodeType": "Block",
										"src": "574:39:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3386,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3384,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3377,
															"src": "592:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3385,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3379,
															"src": "596:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "592:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3388,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3379,
														"src": "604:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "592:13:16",
													"trueExpression": {
														"id": 3387,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3377,
														"src": "600:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3383,
												"id": 3390,
												"nodeType": "Return",
												"src": "585:20:16"
											}
										]
									},
									"documentation": {
										"id": 3375,
										"nodeType": "StructuredDocumentation",
										"src": "435:69:16",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "519:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3377,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "530:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3392,
												"src": "523:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3376,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "523:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3379,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "540:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3392,
												"src": "533:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3378,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "533:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:20:16"
									},
									"returnParameters": {
										"id": 3383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3392,
												"src": "566:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3381,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "566:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "565:8:16"
									},
									"scope": 3458,
									"src": "510:103:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3435,
										"nodeType": "Block",
										"src": "824:166:16",
										"statements": [
											{
												"assignments": [
													3403
												],
												"declarations": [
													{
														"constant": false,
														"id": 3403,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "895:1:16",
														"nodeType": "VariableDeclaration",
														"scope": 3435,
														"src": "888:8:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3402,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "888:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3416,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3404,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3395,
																	"src": "900:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3405,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3397,
																	"src": "904:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "900:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3407,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "899:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3410,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3408,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3395,
																				"src": "911:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3409,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3397,
																				"src": "915:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "911:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3411,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "910:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "921:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "910:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3414,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "909:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "899:24:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "888:35:16"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3417,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3403,
														"src": "941:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3422,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3403,
																						"src": "961:1:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3421,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "953:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3420,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "953:7:16",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3423,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "953:10:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "967:3:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "953:17:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3419,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "946:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3418,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "946:6:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "946:25:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3429,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3427,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3395,
																				"src": "975:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3428,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3397,
																				"src": "979:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "975:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3430,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "974:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "946:35:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3432,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "945:37:16",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "941:41:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3401,
												"id": 3434,
												"nodeType": "Return",
												"src": "934:48:16"
											}
										]
									},
									"documentation": {
										"id": 3393,
										"nodeType": "StructuredDocumentation",
										"src": "621:129:16",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "765:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3395,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "780:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "773:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3394,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "773:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3397,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "790:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "783:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3396,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "783:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "772:20:16"
									},
									"returnParameters": {
										"id": 3401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3436,
												"src": "816:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3399,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "816:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "815:8:16"
									},
									"scope": 3458,
									"src": "756:234:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3456,
										"nodeType": "Block",
										"src": "1139:163:16",
										"statements": [
											{
												"id": 3455,
												"nodeType": "UncheckedBlock",
												"src": "1150:145:16",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3448,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3446,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3439,
																			"src": "1267:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1272:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1267:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1280:2:16",
																		"subExpression": {
																			"id": 3450,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3439,
																			"src": "1281:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1267:15:16",
																	"trueExpression": {
																		"id": 3449,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3439,
																		"src": "1276:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1259:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3444,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1259:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1259:24:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3443,
														"id": 3454,
														"nodeType": "Return",
														"src": "1252:31:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3437,
										"nodeType": "StructuredDocumentation",
										"src": "998:80:16",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1093:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3439,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1104:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "1097:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3438,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1097:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1096:10:16"
									},
									"returnParameters": {
										"id": 3443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3457,
												"src": "1130:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1130:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1129:9:16"
									},
									"scope": 3458,
									"src": "1084:218:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3459,
							"src": "224:1081:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:1195:16"
				},
				"id": 16
			},
			"app/back-end/contract/src/erc20-usdt.sol": {
				"ast": {
					"absolutePath": "app/back-end/contract/src/erc20-usdt.sol",
					"exportedSymbols": {
						"Context": [
							1000
						],
						"ECDSA": [
							1998
						],
						"EIP712": [
							2225
						],
						"ERC20": [
							676
						],
						"ERC20Permit": [
							908
						],
						"IERC20": [
							754
						],
						"IERC20Errors": [
							66
						],
						"IERC20Metadata": [
							934
						],
						"IERC20Permit": [
							970
						],
						"Nonces": [
							1068
						],
						"wUSDT": [
							3558
						]
					},
					"id": 3559,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3460,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:17"
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"file": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"id": 3461,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3559,
							"sourceUnit": 677,
							"src": "61:90:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3462,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3559,
							"sourceUnit": 909,
							"src": "155:107:17",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3463,
										"name": "ERC20",
										"nameLocations": [
											"286:5:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 676,
										"src": "286:5:17"
									},
									"id": 3464,
									"nodeType": "InheritanceSpecifier",
									"src": "286:5:17"
								},
								{
									"baseName": {
										"id": 3465,
										"name": "ERC20Permit",
										"nameLocations": [
											"292:11:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 908,
										"src": "292:11:17"
									},
									"id": 3466,
									"nodeType": "InheritanceSpecifier",
									"src": "292:11:17"
								}
							],
							"canonicalName": "wUSDT",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3558,
							"linearizedBaseContracts": [
								3558,
								908,
								1068,
								2225,
								24,
								970,
								676,
								66,
								934,
								754,
								1000
							],
							"name": "wUSDT",
							"nameLocation": "277:5:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3468,
									"mutability": "mutable",
									"name": "Market",
									"nameLocation": "318:6:17",
									"nodeType": "VariableDeclaration",
									"scope": 3558,
									"src": "310:14:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3467,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "310:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 3470,
									"mutability": "mutable",
									"name": "admin",
									"nameLocation": "339:5:17",
									"nodeType": "VariableDeclaration",
									"scope": 3558,
									"src": "331:13:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3469,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "331:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3500,
										"nodeType": "Block",
										"src": "419:96:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3481,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "436:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "440:6:17",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "436:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3487,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "31",
																	"id": 3483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "448:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_rational_100000000_by_1",
																		"typeString": "int_const 100000000"
																	},
																	"id": 3486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 3484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "452:2:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"hexValue": "38",
																		"id": 3485,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "458:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_8_by_1",
																			"typeString": "int_const 8"
																		},
																		"value": "8"
																	},
																	"src": "452:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100000000_by_1",
																		"typeString": "int_const 100000000"
																	}
																},
																"src": "448:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "462:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3489,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "468:8:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 3490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "468:10:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "462:16:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "448:30:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3480,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "430:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "430:49:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3494,
												"nodeType": "ExpressionStatement",
												"src": "430:49:17"
											},
											{
												"expression": {
													"id": 3498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3495,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3470,
														"src": "489:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 3496,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "497:3:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 3497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "501:6:17",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "497:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "489:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3499,
												"nodeType": "ExpressionStatement",
												"src": "489:18:17"
											}
										]
									},
									"id": 3501,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "57696e2d57696e2055534454",
													"id": 3473,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "374:14:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_e0f689de161673ced1da1a24c582e347e361a67e36f0a58b5ae8c050f39fc075",
														"typeString": "literal_string \"Win-Win USDT\""
													},
													"value": "Win-Win USDT"
												},
												{
													"hexValue": "7755534454",
													"id": 3474,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "390:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_d9b8bde6d7805c2a37add23efa6e8825a52e73ab27a72d974348a08b81182b0d",
														"typeString": "literal_string \"wUSDT\""
													},
													"value": "wUSDT"
												}
											],
											"id": 3475,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3472,
												"name": "ERC20",
												"nameLocations": [
													"368:5:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 676,
												"src": "368:5:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "368:30:17"
										},
										{
											"arguments": [
												{
													"hexValue": "7755534454",
													"id": 3477,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "410:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_d9b8bde6d7805c2a37add23efa6e8825a52e73ab27a72d974348a08b81182b0d",
														"typeString": "literal_string \"wUSDT\""
													},
													"value": "wUSDT"
												}
											],
											"id": 3478,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3476,
												"name": "ERC20Permit",
												"nameLocations": [
													"398:11:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 908,
												"src": "398:11:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "398:20:17"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "365:2:17"
									},
									"returnParameters": {
										"id": 3479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "419:0:17"
									},
									"scope": 3558,
									"src": "354:161:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3518,
										"nodeType": "Block",
										"src": "568:109:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3510,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3507,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "587:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "591:6:17",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "587:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 3509,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3470,
																"src": "599:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "587:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6e",
															"id": 3511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "606:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b",
																"typeString": "literal_string \"Only admin can call this function\""
															},
															"value": "Only admin can call this function"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e0ef19aa67a8b89b19419c8977a6a75d04286a47014bf7a3d2ea537634352c8b",
																"typeString": "literal_string \"Only admin can call this function\""
															}
														],
														"id": 3506,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "579:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "579:63:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3513,
												"nodeType": "ExpressionStatement",
												"src": "579:63:17"
											},
											{
												"expression": {
													"id": 3516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3514,
														"name": "Market",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3468,
														"src": "653:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3515,
														"name": "_Market",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3503,
														"src": "662:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "653:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3517,
												"nodeType": "ExpressionStatement",
												"src": "653:16:17"
											}
										]
									},
									"functionSelector": "6dcea85f",
									"id": 3519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setMarket",
									"nameLocation": "532:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3503,
												"mutability": "mutable",
												"name": "_Market",
												"nameLocation": "550:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3519,
												"src": "542:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "541:17:17"
									},
									"returnParameters": {
										"id": 3505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "568:0:17"
									},
									"scope": 3558,
									"src": "523:154:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3530,
										"nodeType": "Block",
										"src": "705:96:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 3525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3522,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "724:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 3523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "728:6:17",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "724:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 3524,
																"name": "Market",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3468,
																"src": "736:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "724:18:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206d61726b65742063616e2063616c6c20746869732066756e6374696f6e",
															"id": 3526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "744:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7ee95a850e265287713312fd6edb847021666b882f6668bb7e21a4764e4399a2",
																"typeString": "literal_string \"Only market can call this function\""
															},
															"value": "Only market can call this function"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7ee95a850e265287713312fd6edb847021666b882f6668bb7e21a4764e4399a2",
																"typeString": "literal_string \"Only market can call this function\""
															}
														],
														"id": 3521,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "716:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "716:65:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3528,
												"nodeType": "ExpressionStatement",
												"src": "716:65:17"
											},
											{
												"id": 3529,
												"nodeType": "PlaceholderStatement",
												"src": "792:1:17"
											}
										]
									},
									"id": 3531,
									"name": "onlyMarket",
									"nameLocation": "694:10:17",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 3520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "705:0:17"
									},
									"src": "685:116:17",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3556,
										"nodeType": "Block",
										"src": "905:93:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3545,
															"name": "buyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3533,
															"src": "922:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3546,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3537,
															"src": "928:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3544,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "916:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "916:19:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3548,
												"nodeType": "ExpressionStatement",
												"src": "916:19:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3550,
															"name": "seller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3535,
															"src": "952:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3551,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3537,
															"src": "959:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3549,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "946:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "946:20:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3553,
												"nodeType": "ExpressionStatement",
												"src": "946:20:17"
											},
											{
												"expression": {
													"id": 3554,
													"name": "amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3537,
													"src": "984:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3543,
												"id": 3555,
												"nodeType": "Return",
												"src": "977:13:17"
											}
										]
									},
									"functionSelector": "b7881eb0",
									"id": 3557,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3540,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3539,
												"name": "onlyMarket",
												"nameLocations": [
													"878:10:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3531,
												"src": "878:10:17"
											},
											"nodeType": "ModifierInvocation",
											"src": "878:10:17"
										}
									],
									"name": "Aware",
									"nameLocation": "818:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3533,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "832:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3557,
												"src": "824:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "824:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3535,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "846:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3557,
												"src": "838:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "838:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3537,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "861:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3557,
												"src": "853:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "853:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "823:45:17"
									},
									"returnParameters": {
										"id": 3543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3542,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3557,
												"src": "897:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "897:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "896:9:17"
									},
									"scope": 3558,
									"src": "809:189:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3559,
							"src": "268:733:17",
							"usedErrors": [
								36,
								41,
								46,
								55,
								60,
								65,
								785,
								792,
								1010,
								1082,
								1084,
								1661,
								1666,
								1671
							],
							"usedEvents": [
								4,
								688,
								697
							]
						}
					],
					"src": "33:970:17"
				},
				"id": 17
			}
		}
	}
}