{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721IncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721InsufficientApproval",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOperator",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ERC721InvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC721InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC721InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ERC721NonexistentToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "currentNonce",
						"type": "uint256"
					}
				],
				"name": "InvalidAccountNonce",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "derivedSigner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "validSigner",
						"type": "address"
					}
				],
				"name": "Unapproved",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "currendTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "expiredSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "externalApproveBanned",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "inputAddr",
						"type": "address"
					}
				],
				"name": "invalidAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "derivedSigner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "validSigner",
						"type": "address"
					}
				],
				"name": "invalidSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "notCardOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "notFactory",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "reachMaxSupply",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "uninitialized",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_toTokenId",
						"type": "uint256"
					}
				],
				"name": "BatchMetadataUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EIP712DomainChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "MetadataUpdate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "validatedForCardClaimed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "_data",
						"type": "bytes[]"
					},
					{
						"internalType": "uint256",
						"name": "_deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "_r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "cardPermit",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "executeCardTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getCardBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMerchantId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSeriesId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getTransNum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_factoryAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_merchantId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_seriesId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_seriesName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_seriesSymbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_maxSupply",
						"type": "uint256"
					}
				],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_tokenURI",
						"type": "string"
					}
				],
				"name": "mintCard",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_ownerOfAVAX",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_merchantId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_seriesId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_deadline",
						"type": "uint256"
					}
				],
				"name": "permitForMint_buildHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_ownerOfAVAX",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_hash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "permitForMint_validateSig",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "_MerkleProof",
						"type": "bytes32[]"
					},
					{
						"internalType": "bytes32",
						"name": "_MerkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "_tokenURI",
						"type": "string"
					}
				],
				"name": "validateCardClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implementation of the {ICardSeries} interface.",
			"errors": {
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				],
				"ERC721IncorrectOwner(address,uint256,address)": [
					{
						"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
						"params": {
							"owner": "Address of the current owner of a token.",
							"sender": "Address whose tokens are being transferred.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InsufficientApproval(address,uint256)": [
					{
						"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner.",
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"ERC721InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC721InvalidOperator(address)": [
					{
						"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
						"params": {
							"operator": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC721InvalidOwner(address)": [
					{
						"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
						"params": {
							"owner": "Address of the current owner of a token."
						}
					}
				],
				"ERC721InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC721InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC721NonexistentToken(uint256)": [
					{
						"details": "Indicates a `tokenId` whose `owner` is the zero address.",
						"params": {
							"tokenId": "Identifier number of a token."
						}
					}
				],
				"InvalidAccountNonce(address,uint256)": [
					{
						"details": "The nonce used for an `account` is not the expected current nonce."
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"expiredSignature(uint256,uint256)": [
					{
						"details": "Indicates a failure with `currendTimestamp` and `deadline`. Used in checking if a signature of a signed message out is expired."
					}
				],
				"externalApproveBanned()": [
					{
						"details": "Indicates a failure when any account(address) calls {approve}."
					}
				],
				"invalidAddress(address)": [
					{
						"details": "Indicates a failure with `inputAddr`. Used in checking if the input address is applicable to the function called."
					}
				],
				"invalidSignature(address,address)": [
					{
						"details": "Indicates a failure with `derivedSigner` and `validSigner`. Used in checking if the signer of a signed message equals the expected address."
					}
				],
				"notCardOwner()": [
					{
						"details": "Indicates a failure. Used in checking if `msg.sender` equals the owner of the card."
					}
				],
				"notFactory(address)": [
					{
						"details": "Indicates a failure with `caller`. Used in checking if the caller equals `factory`."
					}
				],
				"reachMaxSupply()": [
					{
						"details": "Indicates a failure. Used in checking if the current supply of the cards has reached `maxSupply`."
					}
				],
				"uninitialized()": [
					{
						"details": "Indicates a failure when {init} is not called after the deployment of the current contract. Used in checking if `factory` is initialized with a value of a non-address(0) address."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"BatchMetadataUpdate(uint256,uint256)": {
					"details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
				},
				"EIP712DomainChanged()": {
					"details": "MAY be emitted to signal that the domain could have changed."
				},
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"MetadataUpdate(uint256)": {
					"details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				},
				"validatedForCardClaimed(string,address)": {
					"details": "Emitted when a Merkle proof is validated successfully."
				}
			},
			"kind": "dev",
			"methods": {
				"balanceOf(address)": {
					"details": "See {IERC721-balanceOf}."
				},
				"cardPermit(address,uint256,bytes[],uint256,uint8,bytes32,bytes32)": {
					"params": {
						"_data": "the array of bytes which includes the necessary information to be signed",
						"_deadline": "the expire timestamp of the input signed message",
						"_operator": "the address which is able to control the signer's card",
						"_r": "ECDSA signature parameter r",
						"_s": "ECDSA signature parameter s",
						"_tokenId": "the specific tokenId of the card series which is assigned to be listed",
						"_v": "ECDSA signature parameter v"
					}
				},
				"eip712Domain()": {
					"details": "See {IERC-5267}."
				},
				"executeCardTransfer(address,uint256)": {
					"details": "Conduct the action of card transfer. The card will be transferred from the owner of the card to `_to`. Emits a {Transfer} event."
				},
				"getApproved(uint256)": {
					"details": "See {IERC721-getApproved}."
				},
				"init(address,uint256,uint256,string,string,uint256)": {
					"details": "Because the constructor does not work when this contract is deployed via minimal proxy, this function will initialize  the state variables of itself and its parent contract(s). Note that {init} should only be called once at the moment of the deployment of this contract."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC721-isApprovedForAll}."
				},
				"mintCard(address,string)": {
					"params": {
						"_to": "the recipient of the minted card",
						"_tokenURI": "a custom string which is stored in the card"
					},
					"returns": {
						"_0": "tokenId a unique ID of the card minted directly returned by internal function {_mintCard}. Note `tokenId` starts from 0 and ends at `maxSupply`."
					}
				},
				"nonces(address)": {
					"details": "Returns the next unused nonce for an address."
				},
				"ownerOf(uint256)": {
					"details": "See {IERC721-ownerOf}."
				},
				"permitForMint_buildHash(address,uint256,uint256,uint256,uint256)": {
					"details": "Generate a hash of the combination of a typehash and a message based on the parameters.",
					"params": {
						"_ownerOfAVAX": "the address of the minted card repicient that pays AVAX for the card",
						"_price": "the value of AVAX in exchange for the minted card"
					}
				},
				"permitForMint_validateSig(address,bytes32,bytes)": {
					"details": "Validate the given signature before transfer AVAX when mint a card.",
					"params": {
						"_hash": "a bytes32 variable which should be generated by {permitForMint_buildHash}",
						"_ownerOfAVAX": "the address of the minted card repicient that pays AVAX for the card",
						"_signature": "the signature given by the recipient, which indicates the recipient has approved the message signed"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "See {IERC721-safeTransferFrom}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}"
				},
				"tokenURI(uint256)": {
					"details": "See {IERC721Metadata-tokenURI}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC721-transferFrom}."
				},
				"validateCardClaim(bytes32[],bytes32,string)": {
					"params": {
						"_MerkleProof": "a dynamic array which contains Merkle proof is used for validating the membership of the caller. This should be offered by the project party",
						"_MerkleRoot": "the root of the Merkle tree of the whitelist",
						"_tokenURI": "a custom string which is stored in the card"
					}
				}
			},
			"title": "The implementation contract which realizes the basic logic of membership cards.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "The external function {approve} of the contract {ERC721} is banned in this contract. Note that any cards should keep their approval to `factory` at any time."
				},
				"cardPermit(address,uint256,bytes[],uint256,uint8,bytes32,bytes32)": {
					"notice": "When a specific card(specified by input '_tokenId') is assigned to be operated by calling this function with a signed message, this function will check if the signer of the signed message equals the owner of the card. Once the signature is successfully validated, the card will be approved to `_operator`. The splitted parts('_v', \"_r\", \"_s\") of the signed message, are checked for the validity of the signature."
				},
				"getCardBalance(uint256)": {
					"notice": "Get the `cardBalance` of the current card."
				},
				"getCurrentSupply()": {
					"notice": "Get the `currentSupply` of the current card series."
				},
				"getMerchantId()": {
					"notice": "Get the `merchantId` of the current card series."
				},
				"getSeriesId()": {
					"notice": "Get the `seriesId` of the current card series."
				},
				"getTransNum(uint256)": {
					"notice": "Get the `transNum` of the card corresponding to the input `_tokenId`."
				},
				"mintCard(address,string)": {
					"notice": "Merchant mints a new card to `_to` with an originally stored value(count in token)."
				},
				"name()": {
					"notice": "Get the `name` of the current card series."
				},
				"setApprovalForAll(address,bool)": {
					"notice": "The external function {setApprovalForAll} of the contract {ERC721} is banned in this contract. Note that any cards should keep their approval to `factory` at any time."
				},
				"symbol()": {
					"notice": "Get the `symbol` of the current card series."
				},
				"validateCardClaim(bytes32[],bytes32,string)": {
					"notice": "To meet the demand of distributing cards to multiple users, the merchant can make a whitelist containing the member addresses and stored values inside the card. Users who are in the whitelist can call {validateCardClaim} to get their cards. The membership of the whitelist should be in the form of a Merkle tree."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"app/back-end/contract/src/CardSeries.sol": "CardSeries"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC5267.sol": {
			"keccak256": "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
				"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c",
				"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0xbd4d5abdb240f249320828b0c339096f8b7efa1dfde577dad07116bf3af7a618",
			"license": "MIT",
			"urls": [
				"bzz-raw://317cadb9839a6a619ec5c344bc41fb8676fc4ba09e848a158148d871c0391781",
				"dweb:/ipfs/QmPYBEc8ThmMUYtXAFUrxXKp3teiBvr1z1iQ5GnxGRkoy8"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
			"keccak256": "0x886f60a63de29eecd416df62732de6af6f59671d15d96182a2efa4a204fca3b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://5dca76e18a9206b8ed9c654620958ace1758bf48bb4f0a651bf3bb59a98d872b",
				"dweb:/ipfs/QmdKj9MK4bPmHVoQqgm3RLvDDM36JjrbPJepNq5kvt6byB"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x4764a3cb550846ec714888e19407f05c8d3cf56181d4a090f451beb8064b1a41",
			"license": "MIT",
			"urls": [
				"bzz-raw://c0dfe15ab99b1ec4aec1d0c90dc077b27aab5a1a0d305c6c641698100fc27c64",
				"dweb:/ipfs/QmWWsr2frKgKhNMJwdRXBe7vgRHCzSNTLyGMxbbc6Fuz81"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol": {
			"keccak256": "0x7b29b3947e0a86bf596aa408b1395110a9a7fa31213dc928cf5ec927edff2585",
			"license": "MIT",
			"urls": [
				"bzz-raw://d59b31e9c356988b8eb7bf63a4ea264f583dd0a62b86a163632c40bbe3aa7050",
				"dweb:/ipfs/QmZBiYy7icKr5Lucb8yxujYfg3AMHW2zLD7n4JFYNVSinV"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol": {
			"keccak256": "0xdac767d30fc5b3ab8cb3238a18a86a6738f02ec8fad07b1cd74493c7212d3141",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5142e04f3b754c3c24795000e10d90dbd5565499f1b019de9e9f6a847a219a0",
				"dweb:/ipfs/QmS7VJ4LxS4F4okSxSu93ELv6irVCGfQDPDH3ENUz2rGYF"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b",
				"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0xdde6917a300a3e655ca443b76266ce89145a7c9eb6a70298bf8aab4965bc40fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://39416f61b555df983b22c85803cbe7606fb7f2004b4dbbd51995c7dc552a7137",
				"dweb:/ipfs/QmUG2ghvGz4iDLrvaUfEjcjn8qbvfcoi5AFpGW9t4cupGc"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xb8745c44e53e2a74e9a5d97de4f91d065f1e05cc3e624639485e7b29fb73b728",
			"license": "MIT",
			"urls": [
				"bzz-raw://76d9aba69c37eedb96c529c03c006e8c7f9ea3c2cc11635b21aedc0a65810cfd",
				"dweb:/ipfs/QmUDZnzN5VAmQY6w2Vr6Uef6xNT5jFM9Grb4MUkECXWzjz"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa324c22ef2aaa7b7cd4db27007e7c6fc2d7877cc6381510fca9c83d72bb9ab3c",
			"license": "MIT",
			"urls": [
				"bzz-raw://acb98725687905d9183432eeaa3f7dca110b258ea403fd07b01fcc32ddb16d04",
				"dweb:/ipfs/QmaWdFfHxZdggD16Hu3CgJ3dSGvQzsmovZBW3rorYh6S5N"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
			"keccak256": "0xea2ce2276d96ef81067a452a0c27f31bee2d3c47de47041fda9931c10e825523",
			"license": "MIT",
			"urls": [
				"bzz-raw://29793c6d491ee3bf35f86ed717126830efc0309ac9d10f6c3059f4da0355fce7",
				"dweb:/ipfs/QmUZV6nnQEXoiBDCgYSyPhSqLjAFJsrzghX5aqKWCrmxtH"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x62e9e9e364dcd065b87229e727198f2ee8592c3c22010ead00f66cc370b6db43",
			"license": "MIT",
			"urls": [
				"bzz-raw://fda109e10a60e3ad248094787cffc42e12579215e30536d26c38cca922a951de",
				"dweb:/ipfs/QmdAZxHrJpLj9nUvv61CV1QyCP28vvgJCva4e5949DqFNT"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x3dcd533a3f709bda89bb8e649eb97aed96578e606f3796609544b1dcff975a0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://83fa9b15077fd2f33f6c175d694e2f7ae9c9a289c7feaca40aa7d6feb8d87c26",
				"dweb:/ipfs/QmQLfKCJ7mjiEeCGN1sHgWT8wjAMbAmBqcBVoQQyUZa5ws"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
			"keccak256": "0xb2ac469a92e3980b87267eacabd4e470df6cf278858efa230f69c723316c138d",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ce61d28f35bf80f21d884b285b4061c938e400a0d90d7a8176e2cacf29b5eaf",
				"dweb:/ipfs/Qmar9FHYkwMVvQYtDoeJFETryVwBPTPs1dxhvKG1AMah1c"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
			"keccak256": "0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92",
			"license": "MIT",
			"urls": [
				"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368",
				"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x2d8207531ade88bd3e1c0dc264c1c8c1a46a62d3f79d6b0ddad7743d886f2eef",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf6c34e642d31633434efc3381aeab02876928da15386459d9158e070ed5b27a",
				"dweb:/ipfs/QmQp6H9WZ93V5byxvYQbcFjRtiHTj8RbqadMWmivMLx5B8"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0x9443e69a76d18715b1a17753f565a8678c525e38d7dee16708e07e3bbb6089a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3054d638c63fd63c50261d6725511895e483937d34101f7b1255a0ff1d22cbb8",
				"dweb:/ipfs/QmQ4TguCe6nMUYaGjfz9akdMeRh27DpHJgktFzvwfqiX6y"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39",
			"license": "MIT",
			"urls": [
				"bzz-raw://3fd926ba3c959be85a706285338cc7dde03af8ecb4e2a936f3bac18441abfe97",
				"dweb:/ipfs/QmaSdTPxbPPscAxiNFqExm7dTuXp4VuBsiiuGcuk4euJie"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9",
				"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
			"keccak256": "0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063",
				"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1"
			]
		},
		"app/back-end/contract/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb",
			"license": "MIT",
			"urls": [
				"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf",
				"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6"
			]
		},
		"app/back-end/contract/src/CardSeries.sol": {
			"keccak256": "0x2f444030284a626975b14fa5c1a88c3ce9651834b557f27b02f6d965f5721a2d",
			"license": "MIT",
			"urls": [
				"bzz-raw://916d94afedf72207b6903534b23f8fb7b20f4f57de276c3c170845e64d3db704",
				"dweb:/ipfs/QmVpT56JyjUZ26qCCQrkYcBQu9SN6jmWuYt9ko6PcGwEGc"
			]
		},
		"app/back-end/contract/src/ICardSeries.sol": {
			"keccak256": "0xe88bc78c50d14e0fff8ccf2288f45f75b407ceb9e2bab6eb316f92b159e0cc29",
			"license": "MIT",
			"urls": [
				"bzz-raw://7587deb71c6103264fca42f7a3ac8f44929b4e87bae2640d56f307edf3ff2edc",
				"dweb:/ipfs/Qmc3WYwErzVtATD59WH3dFuQ35qoEQUoAGKmtsh584T3wJ"
			]
		},
		"forge-std/console.sol": {
			"keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
				"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
			]
		}
	},
	"version": 1
}